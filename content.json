{"pages":[{"title":"推荐网站","text":"编程这个纯粹的世界里，总是少不了一些让人印象深刻的东西。 膜拜大佬「javadoop」http://www.javadoop.com「酷壳」https://coolshell.cn/「polarxiong」https://www.polarxiong.com/ 工具类站点「tinypng 图片压缩」https://tinypng.com/「imagecompressor 图片压缩」https://imagecompressor.com/zh/「nginx-ssl 配置」https://ssl-config.mozilla.org/「书栈网」https://www.bookstack.cn/「码农之家 资源下载」https://www.xz577.com/","link":"/friend/index.html"},{"title":"留言","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"关于我","text":"我是一个挺普通的程序员，很喜欢 coding 的时候那种创造的感觉，在工作和生活中不断提升自己。 目前在北京做 Java 开发。 本站记录一些学习工作中的所得，以及一些读书笔记。 推荐一些非技术类书籍：《原则》《思考，快与慢》《高效能人士的七个习惯》","link":"/about/index.html"}],"posts":[{"title":"《人生效率手册》","text":"知易行难，一个人如果能够数十年如一日地践行一种良好的学习和生活习惯，必然是因为在内心深处有着一个十分坚定的人生目标和具体的实施计划。 现实情况是，大部分人都很迷茫，根本不知道自己一生究竟想要成为什么样的人，要做出怎样的事业、构建怎样的人生。好像一切都得按照“本应该的样子”而活，墨守成规，不求突破，到了一定的年龄就要按部就班工作、买房、结婚、生子、养老，最后死亡。有人将这千篇一律的人生轨迹叫作自然规律。可是自然规律并不等于人云亦云，更不是要求我们只能按所谓的“规律”、毫无生气地去生活。 自然规律只是人们从物质固有的、本质的、稳定的联系中总结出来的规律，并不代表人人都要如此，人人都需要遵守自然规律生活下去。有些所谓的“规律”是可以打破的，那些弃之不顾的人就变成了大家眼中的“成功人士”，而那些墨守成规的人，自然变成了大多数的平凡人。 我们之所以最后成为了大多数的平凡人，没有创造理想中的一番天地，就是因为我们并没有领悟人生的奥秘，未能及早觉醒，并在想明白之后发愤图强。通常来说，绝大多数的人会在四五十岁开始悔恨，悔恨自己在年轻时没有想清楚，或者在想明白后没有立即付诸行动。甚至还有一些人，一生都处于糊涂懵懂的状态，他们也就谈不上想没想明白，想没想清楚，更谈不上努力奋斗了。 只有把自己的人生目标先明确出来，精准定位自己的目标和未来走向，才能从茫然的人生状态中解脱出来，才能真正通过切切实实的行动去实现自我价值。就像行驶在马路上的汽车，只有明确自己要走的方向，才是有效的；就像在茫茫大海中航行的轮船，只有在导航和灯塔的帮助下才不会迷失方向，所以在努力之前，你最应该明确自己的目标，不然一切都是无用功。 通过多年的观察分析，我将职场青年大致分为以下五类，我们现在就来定义一下自己到底是哪一类。 第一类朋友——完全没有人生目标，每一天都活得浑浑噩噩，每一天都如行尸走肉一般，完全都不知道自己的人生为了什么，仿佛在这个世界上有他们也行没他们也罢。 第二类朋友——时常找不到目标，别人说什么仿佛都是对的，别人告诉他们应该做什么他们就去做，完全没有自己的想法，更加不知道什么是自己的想法。 第三类朋友——有的时候仿佛能找到目标，这个目标时有时无，就像风筝一样缥缈不定，没有清晰的人生目标，没有明确的奋斗方向。 第四类朋友——也是最常见的一类，他们其实有着明确的人生目标，但就是没有清晰的人生道路规划，差在规划上。 第五类朋友——很少见，但是却非常有代表性，他们一般都拥有明确的人生目标，同时又有着清晰的道路规划，每一步的选择都是围绕目标来进行的，而且能通过踏踏实实的努力来构建。 每个人到年底都会参加各种各样的聚会，有目标的人是不会轻易参加这些聚会的，他们的目的是构建自己的朋友圈，而不是被构建，他们有清晰的人际交往选择。但是没有人生目标的人，一般随叫随到，别人一叫他们去参加聚会，他们就去了，而且他们也不清楚自己为什么参加，感觉就是好玩，或者有空就去了，是完全没有目的性的参与，这就是一种区别。 还有一个很特别的方法，就是去看他们对时间的吝惜程度。有目标的人，往往对时间使用得特别仔细，好像他们做什么事情都是为了争分夺秒地实现自己的梦想，在他们的世界中，拒绝别人不会是一件很困难的事情，他们清楚地知道自己要什么，自己努力是为了什么。没有目标的人仿佛到处都能找到机会，这个聚会去参加，那个聚会也去参加，一会去学习这个技能，一会去学习那个技能，人生处处是目标，目标随时都在变化，没有清晰而坚定的目标。别人喜欢的他们就喜欢，别人倡导的他们就去跟随。 对待学习的态度，有目标的人和没有目标的人也是不一样的。有目标的人一般会有在知识和技能领域获取和提升的诉求，求知若渴，他们能够清晰地划分出什么是精学，什么是泛学，对知识如饥似渴，不知疲倦地去汲取知识的力量。没有目标的人，压根就不会主动去学，就算是学，也是走马观花，他们往往学的是一种快感，在快感消失后，他们对所学到的东西也就渐渐地毫无印象了。 有目标的人，他们生而具有使命感，好像可以预知未来，对人生每一步都能稳健规划，并按照计划实现梦想，人生充满节奏感。但没有目标的人，对未来茫然无知，常把好运气当成能力。 10000 小时定律 在决定要不要做一件事情时，一定要和我们的目标进行密切的结合，如果你没有想清楚一个目标，那么建议你不要做，你甚至可以用那些时间去睡觉。你做的每一件事，都需要树立一个基本的目标，这样在做完这件事，达到自己预期的目标后，你就会特别有成就感，也更愿意投入下一件事、下一个目标中，达到一个良性的循环。 需要注意的是，晚上不适合做10000小时的基础学习，因为这类学习属于精学体系，它需要安静，同时它需要一个绝对的真空环境，以保证自己能够完成一个又一个专注力的训练，所以嘈杂的夜晚不适合做这件事情。你的晚间基本上是用来进行泛学训练和健康锻炼的，尤其是被动式的学习特别合适，收听或收看学习栏目是不错的选择。 7 个人物法。适合大多数人，探究未来的方向不合适。实操性很强。 事实上，大部分人在做一个决定之前，一定是经过了深思熟虑，然后才下定的决心，最后付诸行动。 在我设计的效率手册中，每年要对自我评估，每一个进行评估的人都会被要求计算每日、每周、每月、每年的学习时间，占额外8小时，也就是2920小时（8小时乘以365天）的百分之几。我曾经做过调查，GYL（全球青年领导力）导师的学习时间平均为额外8小时的37.5%，也就是说，他们每天至少花3个小时在业余学习上。很多人看到这里都会诧异，他们都已经那么牛了，为什么还要花那么多的时间去学习？ CEO高鸿鹏老师，都曾分享过他们的读书经历和学习方法，实质是讲你把时间花在什么上面，你就会收获什么。时间的魅力在于，在你不知不觉中给你惊喜，让你变成一个意想不到的自己，一个更好的自己。 你需要把计划、实施、总结、评估以及再次计划做成一个大的循环体系，这才是时间管理。 每年我都会制定一些评价标准，比如我有每年出一本书的习惯，这就是我时间管理能力的重要指标。我是一位创业者，目前是创业的第四年。这期间，我要带领着两个团队同步发展，每年至少进行100场演讲、阅读100本书、训练一项硬本领。那么，我时间管理的重要指标，就是我能否还能拿出时间来出版一本书。如果能够拿出来，一定是在顺利完成其他指标后才可以。这样，我就可以检验出自己的时间管理能力。如果我一年能出版一本书的话，那么我的时间管理能力就基本符合了我对自己的要求。大家也可以用其他方法自测，比如做一次减脂塑身的活动，或者完成一项技能训练，说好一口流利的英文等，这都是可以检验时间管理能力的标准，大家要形成自己的风格来进行时间管理，而不是人云亦云。 问问自己哪些事情是可以坚持10000小时的？很多人觉得除了将吃饭、睡觉、玩手机坚持了10000小时以上，他们的人生还没有什么事情是可以坚持10000小时的。在这里我想让大家知道的是，每一个成功人士的背后，都是坚持。只不过有些人在很年轻的时候就有了这种坚持、训练的意识，也就是俗称的开窍早，但有些人开窍非常晚，所以没有坚持的意识，也没有坚持做下去的习惯。 在人生电池图理论下，我们每个人都要把自己当成一块不能再次蓄电的电池，时间就是这块电池的电量，浪费了就没有了。生命也是这块电池，过完了，过去的日子就一去不复返了。每个人一定要不断地反复问自己：我生命的有效周期到底还有多长时间。这个思考以及自问自答的反思，最好每周进行一次。不要等到每年年底或者年初的时候，临时抱佛脚，才意识到时间不够用。因为你必须知道，自己还可以拿多少时间，或者说多少小时来实现梦想。尤其是如果梦想远大的话，就需要去拥有实现梦想的时间基础。 可人往往就是这样的物种，他的意识发育成熟速度，往往远远落后于身体。也就是说，你现在空有体力和大把空闲时间，却不知道该怎么用，该朝着什么方向努力。等你慢慢步入30岁、40岁、50岁的时候，你开始懂了，想明白奋斗的重要含义了，可是身体、精力以及家庭状况却不允许你去奋斗了，你往往没有时间修炼你的硬本领了。30岁以后，不论是男生、女生，体力、精力都非常有限，动不动就缺觉，而且每天单位有一堆烦心事，家里面时不时还会出状况。 灵魂如果没有确定的目标，就会丧失自己。 可控时间： 每天早上的早起 下班的晚上 周六日的时间 管理学当中，我们用SMART原则来确定目标，即具体的（specific）、可衡量的（measurable）、可实现的（attainable）、合理的（realistic）、有时间限制的（time-targeted）。从第五项标准（time-targeted）一词就能看出，目标性法则是以时间管理为基础的。 我们要明白，一个人越想做卓越的贡献，就越需要整块的时间。我个人非常反对碎片化时间的管理，我认为碎片时间，不能做整体性工作，我们应该放弃无用的碎片化知识的涉猎。——同意 在时间管理中，从人生目标和自我现状两个维度去区分，可以得出对自己的判断，也就是“自我认知”。从人生目标来说，人生目标是一项远期目标，相对应的时间管理方法叫作远期目标的时间管理法；对近期目标来说，我们可以称之为日程管理或者近期时间管理法则。 目标分解法：我们需要将长期的人生目标和短期的人生目标进行一定程度上的区分。漫长的人生是由一天一天组成的，人在时间中慢慢老去。有的人在年轻的时候就找到了人生的正确打开方式，而一直没有找到的人只能庸庸碌碌地度过一生。 真正的时间管理，是从开始计划，到实施计划、总结复盘，再到评估，以及再次计划的过程。 如果你想掌握时间管理，一个非常重要的方法就是用项目管理的方法，来管理好自己的时间，记住四个要素，计划、实施、总结、评估，才能到再次计划。 这些成功的人，都有一些共同的习惯，那就是早起、健身、阅读以及陪伴家人。 早起做什么，有三个方向可以思考。 发展你自己的事业，也就是我说的硬本领； 要给家庭基本需求以外的呵护，比如你每天都会花费 10 分钟的时间跟孩子深度交流、沟通，来聆听他们的内心，或者陪伴他们做手工或者读书，等等； 第三是从事健身锻炼，投身到兴趣爱好中。 时间管理，越早想明白越好；但想明白还不够，越早做到越好；做到还不够，只有每天坚持才重要。 当你陷入负面情绪无法自拔时，你身边要有充满正能量的朋友，他们在你的身边鼓励你、激励你，让你远离负面情绪，进入积极正面的情绪。或者，你可以去寻找比你年轻、比你还拼搏的异类群体。当你偶尔犯懒的时候，就去关注了解他们的生活，要知道他们为了实现自己的梦想，同样很拼搏。 成为企业的 CEO，不仅需要独特的战略眼光，也要能看懂手中的财务报表，不仅要在决策的关键时刻有足够的勇气和魄力，也要会制作漂亮美观又言之有物的 PPT。 早起仪式： 听到闹铃后立即起床。 香气唤醒，咖啡唤醒。 进入高效能的状态。 写下三个目标。 用总结法为昨日的事情进行复盘。 为今天一整天进行日程的安排。 精学训练 努力进入忘我状态，且最少持续一小时。 出状态，吃早餐，调整积极心情，放松。 强健的体魄和敏锐的大脑，是成功的先决条件。 在学习的过程中，一定要有总结与反馈机制。所谓总结，是吸收，也就是只是输入后，与你之前知识体系中的元素互相融合，形成自我反思。总结一定要靠思维逻辑来一步步梳理与理顺。 高效学习的十个秘诀 目标 为目标设置节奏，找短板，找需要修炼的硬本领 精学体系，需要整块时间来处理。 泛学体系，体现的是一个人综合的知识面。往往需要你在每个领域都略知一二才可以。 预习 实时学习 复习，看记录的学习笔记，对自己的专项能力尽心再次训练。 早起法 屏蔽周围的负面信息 自我激励与分享 有人说，这是人的趋利避害性导致的，当你知道一件事是对你有好处的时候，你就会坚持去做，早起就是这样。 曾国藩最大的能力是通过个人努力，将自己从一个笨人，变成了非常高明且有本领的人，这就是坚持早起的力量。 每天早上 6 点半前起来算早起；6 点半以后，只能说是正常起床了。 很多人觉得自己每天最困的时候就是起床1小时以后，有时甚至他们在早起的社群里打完卡后又重新回到了被窝里。我想说，你要了解你的身体，知道它什么时候会懈怠。什么时候是你意识上的懈怠，这点非常重要，因为它将决定你是否能有效地坚持目标、实现目标。所以，咖啡是一项最有效的唤醒方法，如果你对咖啡过敏，也可以饮用红茶等。 如果你觉得自己是异类（轻度暗示了，你不是异类，只不过好学而已），那么在你的工作和生活圈，你一定要努力去找到那些与你相同的异类才可以。努力在你身边找寻，发现他们与你一样有不凡的气质，和他们一起进步和发展，最好可以达成生活同步。 每年聚会都是以头脑风暴会为目标，除了各自复盘一下过去的一年，彼此点评，同时还能商量出一些今年的合作事宜。 其实很多杰出的人在修炼完围绕自己核心竞争力的硬本领之后，仍然坚持每年学习一门及技能。 把硬本领的相关知识点与其他领域的相关内容，一个个先修炼好，并最终把它们结合在一起运用到实践中的不同的场景，这个结合的过程被称为技能整合。 学习是为自己而学，而且只为自己而学。同时，学习不是一个阶段性行为，学无止境！ 人是知识以及行动力的集合载体，在有一定的知识基础后，我们需要向人学习。 自我评价体系的四个能力： 获取信息的能力：感知能力、阅读能力、搜集资料的能力等。 加工、应用、创造信息的能力：包括记忆能力、思维能力、表达能力（口头、文字的）、实践运用能力、创造能力等。 学习的调控能力：包括确定学习目的、制订和调整学习计划、培养学习兴趣、克服学习困难等。 自我意识和自我超越的能力。 练习一个知识点，就启动一项评价。 给身体编程： 屏蔽负面信息（无用信息）； 身体与大脑虽然相连，但不共享一套体系。 养成习惯 呼吸法。用鼻子吸进空气3秒钟，让空气停留3秒钟，呼气6秒钟。这种呼吸法能给大脑提供更多的氧气，刺激副交感神经系统，降低呼吸速度和心脏跳动频率，使肌肉放松、血管膨胀，改善血液流动。从根本上说，它给大脑传达了一个信息：一切都正常，无须抵抗或逃跑。 每一个困难的背后都蕴藏着同等、甚至更大的机遇。 我们平时看书就是一种输入，我们在读书期间，老师上课，我们听课，对于我们学生来说，这就是一种输入；除了看工具书外，我们还会看其他的书籍，它们帮助我们拓宽视野，提升知识储备，这也是一种输入；我们在和其他人沟通交流时，获得新的知识或者是新的观点，这也是一种输入；甚至在外出旅行的过程中，那些所见所闻，所接触到的新鲜事物，也是一种输入。 输出一般指的是将知识传授给他人、指导他人。分享、讲话和写作都属于输出，你把你学到的东西转化成你自己的观点。 通过输出机制来巩固输入的学习成果，让学习成为一个封闭的环，一入一出，学习效果更佳，知识点也就记得更牢固，同时，我们接收到的知识也更加广泛。 每年我都会要求自己拜访一定数量的人生导师，他们有的人是企业老板、商界名人，有的是文化圈的泰斗、大文豪。他们在不同的领域有着不同的成就，通过拜访他们，和他们沟通交流，完成我的自我输入。 一场成功的演讲是基于两个要素为基础的，第一是真诚，第二是换位思考。这是能够真正实现沟通，以及在沟通之下进行表达、演讲，市场工作等最重要的两个基础。 后来他甚至到了这样一个阶段，在大学选课时，尽量选那些不用在人们面前发言的课程，他尽量回避需要进行公开的演讲和谈话的课程。我非常不赞同的这种行为，主动回避你的弱点，要知道敢比会更重要，未来你将需要这些技能。——说法偏激了，应该想我得到这些技能多好啊，引起正向的激励。 90 分钟的演讲，我们需要准备八项。演讲的目的性、服饰与装扮、动作设置、环境、次序、礼仪、手稿、彩蛋。 每晚临睡前需要先思考明天的目标是什么，想明白了再睡觉，然后早起就要把它写下来。 康奈尔笔记法的结构是这样的：康奈尔笔记法将一页纸分成了三部分，右上最大的空间用来做笔记，左边四分之一左右用来写提纲，下方五分之一左右的空间用于写总结。 第一步，记录（Record）。在右上方的笔记栏内记下课程要点。 第二步，简化（Reduce）。记录以后，尽早将笔记栏的重点以关键词、简短标题、概念等方式写在随手笔记的侧栏大纲中。 第三步，背诵（Recite）。 第四步，思考（Reflect）。这是康奈尔笔记法中最“精髓”的一步，随手笔记下方的总结区域是你的思想结晶。 第五步，复习（Review）。短期记忆很容易遗忘，间隔复习有助于加深记忆。每周花10分钟左右时间快速复习笔记。 我们的阅读，可以转化成思想，成为思想的核心价值。 计划、实施、总结、评估、再计划 人际关系的价值在于，每个人的时间具有稀缺性，在时间上的投入，需要我们有明确的目标性原则。你需要为值得的人投资更多，同时减少不必要的社交浪费。 情商公式=真诚+换位思考； 人际关系分类管理原则需要遵循 10/20/150原则。","link":"/2021/02/13/books/%E4%BA%BA%E7%94%9F%E6%95%88%E7%8E%87%E6%89%8B%E5%86%8C/"},{"title":"《博恩崔西的时间管理课》","text":"我对成功和成功者了解得越多，就越觉得成功者都有一个明显的共同特征：重视时间的价值，并能持续高效地利用时间。 因此，我得出这样一个结论：没有超群的时间管理技能就不可能成功。我们甚至无法想象一个快乐、有成就的人会过着一种杂乱无章的生活。我的另一个重大发现是，如果你接受了时间管理训练，就相当于培养了自己获得成就、财富和成功的习惯。 培养时间管理技能的首要一点就是要认识到，对时间的管理就是对生活的管理，这就是好好珍惜时间这份最珍贵的礼物的方法。正如本杰明·富兰克林所说：“你热爱生活吗？那就请不要挥霍时间，因为生活正是由时间组成的。” 在你学习管理时间的同时，你也在掌握着人生，掌控着未来。 多年来，心理学家在“心理控制点”领域做过大量研究，发现人们对自己和生活的积极态度取决于他们能在多大程度上掌控自己的生活。如果你有一个“内在”控制点，便可以感到生活掌握在自己的手里。你能够自己做决定，为你自己的行为和结果负责。你是自己生活的首要创造者。 心理学家还发现，如果你拥有的是“外在”控制点，也就是生活的决定权在于外部的人和事，比如你的老板、账单、家庭、健康或其他任何因素，你将感到消极、愤怒和沮丧。挫败感将使你丧失改变的力量。你将产生“习得性无助”，将自己视为“环境的产物”而非“环境的创造者”。当你的控制点是外在的，你会感到自己沦为外在力量的囚犯和受害者。 如果你在明天的彩票中赢得100万美元，你将会如何改变你的生活？如果你瞬间成为一个百万富翁，你所做的事会与今天有什么不同？你将会着手做哪些现在无法做的事？你将停止做哪些现在正在做的事？你将更多的或更少的做什么？你想要去哪里？你想要见到谁？如果此刻你的手上有100万美元的现金，你想做的第一个改变是什么。 如果有机会为自己写自传，你希望在自传里写什么？设想你就要走到生命的尽头，你想为自己写一本自传。如果你可以提前设计好自己的生活，写自己的故事，你会希望你的生命中发生什么？你希望自己成为一个怎样的人？你想要获得哪些成就？想象着你将为自己编写生活的脚本，如果你对这个脚本不满意，你可以把它撕毁，再重新来写。 要培养他人的能力、信心，一个最有效的方法就是让他们全权负责完成一项重要的任务。当人们知道自己要负全部责任时，就会感受到更强的个人力量和掌控感。这有利于建立人的主动性和决心，也有助于培养意志力和决断力。 所有的时间管理技能都要建立在一个清晰、明确的目标和目的基础之上。确认什么是你想要实现的最重要的目标和愿意全身心投入的工作，是进行高效时间管理的第一步。 成功必备的品质是：明确的目标、扎实的知识和强烈的愿望。 1.明确的目标是基础！列一张清单，写出未来一年内你打算在生活和工作中的各个领域实现的十个目标。用现在时态来描述，就如同你已经实现了这些目标。 2.重读你的清单，自问：“如果有一个目标可以对我的生活产生最积极的影响，会是哪一个目标？”把它写在一张新纸的最顶端。 3.为自己设定一个实现目标的具体时间。如果必要的话，可以设定目标完成过程中每个阶段的时间表。 4.列出你能想到的每一件可以帮助你完成这个目标的事。如果想到新的，再加上去。不断更新你的行动列表，直到最终完成。 5.把你的列表整理成一个计划。确定哪个是最重要的，哪个是最首要的。 6.找出你需要克服的障碍，你需要掌握的新知识、新技能，以及可以提供帮助的人。要详细。 7.从最重要的目标开始着手，下决心每天都向你的目标迈进一步。永不放弃！ 你越多地计划一件事，你就越深地把你的目标印在潜意识中，而潜意识正是为其提供动力的工具。 2.以一个旁观者的视角来评价自己。一个很好的训练方法是：站到你的办公桌或办公室旁，问问自己：“什么样的人会在这样的地方工作？” 打开你的皮夹或公文包看看，问问自己：“什么样的人会有这样的皮夹或公文包？”看看你的车里车外、你的橱柜、你的家、你的院子还有车库，问问自己：“什么样的人像这样生活？” 你是否会对这个人委以重任？为什么？通过一个中立的第三方视角来诚实地评价自己，你会看到一个怎样的自我？ 整洁的桌面是效率的提升。 一项任务的完成会使人产生极大地心理满足感。你的大脑就以这种方式构造，当你完后一项工作时，不论大小，都会引起内啡肽的分泌。对你而言一项任务越是艰巨、重要，你就会越多地在完成时体验到快乐、愉悦的感觉。每次完成一项任务，你就希望继续去完成接下来的任务。 当你提前一晚制定工作计划时，在你睡觉的时候你的潜意识就已经开始致力于你的计划和目标了。这样，当你从睡梦中醒来是，就已经迸发出一些对工作的思考和想法。 个人条理的 7 个工具 前夜的准备 规划你的时间 早起的鸟儿有虫吃 利用有序的归档系统 利用黄金时间做最重要的工作 利用听写机或录音机来做记录 使你的航空旅行也能创造财富。—带本书看，不困的话 自我暗示：我在做每件事时都是有序高效的。 人的自然倾向是优先处理“占多数的小事”。遵循这种自然倾向，我们很多时候都是在努力地解决那些根本不需要处理的事情。 只有在你的行动与价值观相一致时，你才能达到最佳状态，你才会充满自信。只有你的信念与你的行动像手和手套一样契合，你才能真正地感觉到幸福。 无论如何，当你发现自己的外在表现与内在信念不一致时，你就会体验到压力和冲突。 人们单身的时候的价值观会与他们结了婚和有了孩子之后差别非常大。单身的人不需要对其他人承担责任，此时工作、社交、旅行、娱乐、运动及其他活动更有价值。可是人一旦结婚、生了孩子，价值观会发生极大的改变。几乎每个夜晚，你的配偶和孩子都是最为重要的。当你的价值观发生了变化，你也就变成了与之前不同的人。 如果你所做的事情与自己的价值观完全相符，你会感受到由衷的幸福。 要想实现一个之前从未实现过的目标，你就需要培养并掌握一种之前没有的新技能。 对时间最糟糕的利用就是把不需要做的事做得完美无缺。 如果一件事根本不值得做，那就更不值得把它做对。 你的时间掌控力取决于你能在多大程度上放弃低价值或无意义的事情。你越多地放弃、取消不必要的任务你就为“A”类任务的完成腾出越多的时间，而这类事情才是决定你事业成败的关键。 时间就是你的生命。当你投入精力去做最高优先级的任务时，你就是在为生活创造最大的财富。相对的，去做非优先级的事情就是对时间的浪费。当你全身心处理最高优先级的任务时，你就能获得最大回报，你会体验到源源不断的力量、热情和自尊感。你会感到更有力量、更自信，你自己和你的整个人生都呈现着最佳状态。 人的潜意识无法分辨真实经验和生动想象之间的区别，如果你想象自己表现得高效，你的潜意识就会完全按照你在哪个时候的表现高效来做出反应。每一次你都想象自己表现出最佳状态，你的潜意识就会把这种想象当做真发生过记录下来。 你可以通过想自己灌输积极的形象来推动自己走向成功，这种积极的形象可以是自己想象出来的，也可以是回味自己之前有过的高峰体验。 如果你想更加自信，那就表现得自信。如果你想更勇敢，那就表现得勇敢。如果你想更高效，那就像你已经是高工作效率的人那样来表现自己。你的行为表现会改变你的感情和信念，就像你的感情和信念能够决定你的行为表现一样。 天才的三个特质：第一种特质是所有的天才看起来都会采取系统和有序的方法去解决问题；第二种特质是好奇心；第三种特质是他们注意力的集中程度要比普通人更加深入和强烈。 托马斯·杰弗逊说过：“太阳从未照到过躺在床上的我。” 在别人回家后再在办公室待 1 个小时。对于工作繁忙的人而言，这是保证完成工作的最好办法。 每当你满足了大脑对于完成任务的需要时，大脑就会把内啡肽释放到血液里。这些内啡肽会让你感觉快乐和幸福，可以提高你的动力和创造力，能改善你的个性，让你对自己更加满意。所以要训练自己完成重要任务，这样既可以改善整体生活质量，又可以显著提高自己的工作效率。 奖励对于高水平表现具有非常的激励作用。你应该尽量多给自己一些奖励，即便是完成报告就出去散步这种简单的奖励预期都能推动你前进和帮助你集中精力完成任务。 无论工作类型如何，一旦开始工作就要下定决心坚持到工作完全结束。 “一次只做一件事”是成功的销售人员、主管人员和企业家的共同特征。他们只专注于处理眼前最重要的工作，直到该工作完成为止。他们为工作设定优先级，一次只做一件事。 美国是一个特殊的地方，它在经济上提供你一个向上攀登的阶梯。令人兴奋的是：只是在梯子的底部拥挤不堪，顶端并非如此。 生活就是一系列的项目，而每一个项目又是一个复杂的任务，我们称之为“多任务工作”。这种工作类型要求多人的合作，每个人负责这项工作的一部分，而每一部分都是最终成功的必要基石。计划和组织类型是时间管理的核心技能之一。 组织团队完成任务的能力是管理者事业成功的最重要的品质。 你在前期花越多的时间与团队成员制定计划，他们在执行的时候就越是能够富有创造力的投入。 你越是能把一个大项目分解成每个人的工作，你就越容易来计划、组织、监督、任命和协调，最终按时交工。 在生活中，只有当你的选择是自由的，你才是自由的；只有当你有了准备充分的备用方案时，你才是自由的。如果没有预备好的其他选择，你会发现自己被限制在一个行动程式中。一旦这个计划或行动出错，你就会有大麻烦。 在任务管理中需要掌握的最后一点就是安排时间定期检查工作进展，解决问题及重新安排任务。不管你在一开始计划的多么完美，在过程中都会收到大量的反馈，你要根据这些反馈定期修改原计划，保证工作顺利完成。 成为一个好的领导者要求你拥有或建立最出色的领导和管理能力。但出现问题是你必须保持冷静。你必须不断地提醒自己如果你不站在制高点掌控全局，他就无法成功。如果这个项目非常重要，你就必须承担起检查目标完成进站的责任。除非你亲自花时间去检查、确认，否则不要妄想每一件事都能忠于计划。 把你所有的精力集中到人生最大的梦想上。 如何花费你的时间？根据时间管理专家迈克尔·弗蒂诺的统计，平均在一生中，你将花7年沐浴，6年进餐，5年排队，4年打扫房子，3年开会，1年找东西，8个月处理垃圾邮件，6个月等红灯，120天刷牙。最让人惊讶的是，你每天只花4分钟与配偶交谈，30秒与孩子说话。 要想朝着积极地方向改变这个比例，你就要学会如何切断这些时间的浪费源。 纵观历史，伟大的领导者都有一个共同的特点，就是具有前瞻性，并能发掘所有可能出现问题的事情。他们会提前为偶然时间制定计划。如果真的遇到了麻烦，也已经做好了快速解决的准备，因为他们已经完全考虑过这种情况的出现了。 快速决策，迅速行动 能分辨最重要的工作并尽快完成它的能力比你的其他习惯更能帮你进入事业进步的快车道。 Do it now. 如果你能把引起你内心最大的担忧和痛苦的那件事先完成，你就会变得更高效。 仔细地规划你的生活、工作和节奏，你就可以不时地引起“心流”体验，它也是你成功的关键。所有真正高效的人都会经常性的体验这些神奇的能量流。它可以通过有意识的加快工作节奏来激活，就像飞机清空跑道（加速直到起飞）一样。 如今，任何领域的知识量每 5~7 年就翻一翻，有的甚至只需两三年。这意味着你必须经常地翻新知识才能保持同步。你所有的收入都来源于你的所知。 通过打开思路，不断地从各个不同的来源阅读、收集新信息，科学家们找到了能把其他知识贯穿起来的那一条信息，从而实现了一个伟大的目标。 生活中的每一个改变都源于你的思想和新观点发生的碰撞，就像台球桌上一个球去撞击另一个球。 在这个信息时代，你越多地接触、汲取新观点和新知识，你就越有可能在恰当的时间发现你所需要的那个想法和见解。 阅读之于大脑的意义就如同锻炼之于身体。当你每天都阅读自己专业的知识、书籍时，你就会变得更聪慧、敏锐，也会变得更积极、专注和富有创造性。缺乏阅读，你会眼睁睁地看着成功的机遇从身边溜走。 你所接触的观点越多，你就越有可能在恰当的时间遇到那个对的想法。 对你所挣的钱最好的投资就是自己，成为比挣到这笔钱时的自己更优秀的人。 成熟的大脑是精心设计的，因此你只学习和记忆那些对目前的情况有关和实用的东西。不管这件事多么有趣，如果你无法将它与你目前的工作生活建立起任何联系，或想到如何应用，它就会从你的大脑中溜走，就像流水过筛，你事后很难记住。 做一件事意味着不做另一件事，如果你阅读一些无直接关联或无法应用到你的工作中的东西，你就同时失去了对于能给你带来帮助的东西的阅读机会。 在阅读阶段，你要坐下来，开始快速地阅读，概览和预览的过程已经勾起了你的兴趣和好奇。在阅读中，你就会去寻找这些能填补你知识空缺的信息。这时，你实际上是进入一种“预期学习”中。你会努力寻找书中所包含的信息和观点。 重复是学习之母，一条新信息需要重复 3~6 遍才能被你内化并进入长时记忆。 你学的越多，你就越会学习。 你越是不求回报的付出，回报越是会从意想不到的地方不期而至。 没有什么比对人性的洞察更有力量。人的行为受何种动力驱使，被什么本能控制？如果你了解了人的这些方面，你就能触碰到他存在的本质。 不要假设他人能够理解你们所讨论的内容，直到他能用自己的话把意思反馈给你。同样，不要认为自己理解了一件事情，而是应达到能用自己的话复述，并得到他人的肯定。 你需要把所有能交给别人的事都委派出去为自己获得更多的时间来处理最重要的一些事。 有一个有趣的发现。你越多地思考和讨论问题可能的解决方法，你越是聪明，越是有更多的想法。你会变得越来越有创造性。你的思维也会更加敏捷。你越多地去寻找解决办法，他们就会越多地出现在你的大脑中。最终，你就像吃豆子游戏中的黄色小精灵一样在遇到问题时尽快地把它们消灭掉。 思考备用方案的过程是一个很好的思维训练。它促使你以更发散的思维看待问题的所有可能性。通常，在思考如何留出退路的同时，你实际上也在完善最初确定的解决方案。有时，你在做全面的调整。 在以情动人前，你自己要先被打动。在催人泪下前，你自己要热泪盈眶。在你以理服人前，你自己要坚信不疑。 对于那些生活在社会底层的人而言，时间的概念不过几分钟，他们根本不考虑此刻以外的事情。小时工的时间观是两个支付周期，工薪阶层的时间观大约是两个月。当你在社会经济的阶梯上不断向上攀登时，你的时间观就不断加长。 当你为时间和资源的分配做决定时，你考虑了多久以后的未来？有一条规律是：长久的时间观会提高短期的决策能力。在思考当下的决定时，你向前看得越远，你的决定就越正确。长期的成功取决于现在所做的每一个决定的质量。好的决策积累是你未来目标得以顺利实现的保证。 你要尽可能地去雇用他人来做较低价值的工作，而为你自己、你的工作和加人赢得更多的时间。 感情的目的是什么？最简单的答案就是你会比现在更快乐。可是很显然，很多人都没有意识到这一点。人的每一个行为都是为了以某种方式改善自己的生活，提升自己的幸福感。因此，你对一段感情的选择是你一生中所做的最重要的决定。在感情上做出一个正确的选择会比你所做的其他所有选择对你幸福的影响都要大。而对感情的错误选择也会比其他所有决定都能使你的希望和梦想破灭。 一个成熟的、发展健全的成年人会考虑他人的好恶和观点，但是仍然坚持以自己的方式做出自己的决定。 大多数人都忙着处理自己的事情，根本没有时间去顾及别人的生活和行为。 把精力投入到高价值的工作中去——那些让你获得你所预期的报酬的事情。如果你希望每小时挣100元，就一直问自己：“我现在做的事情是否能够支付我100元/小时或者更多的薪水？”如果不是，就告诉自己不要再做下去。只做那些能够支付你预期报酬的事情。 要想让生活保持均衡，你需要不断地回顾自己的价值观，什么对你而言是最重要的。如果你的目标和每天的工作与你的价值观相一致，你会感到无比快乐，并享有最高的自尊感。当你的外在行为表现和内在的心理期望完全吻合时，就是你感到最满足的时候。 为自己理想的生活方式下个定义。如果你有足够的钱，能以任何你想要的方式规划你的生活，你希望它与今天有什么不同？试想为自己制定每个月、每一周最完美的生活计划。如果你能够设计从 1 月 1 日到 12 月 31 日的每一天，你希望自己如何度过？你有哪些想去的地方？你会带着自己的家人去哪里旅行？在最理想的生活转台中，你的作息如何安排？如果你完全有选择的自由，从今天起你会在生活方式上做出什么改变？ 你对自己理想的生活方式越是清晰，你就越能在短时间内做出能确保未来用友这种生活方式的决定。清晰的目标是一切。 通过进行身体锻炼来使你的生活保持平衡，走路、跑步、游泳或者打高尔夫都可以。你要确保每天自己身上的每个关节都得到活动，每块肌肉都得到拉伸。每周进行三次有氧运动才能维持能够保证最佳状态的健康水平。 如果你感到自己太忙了，没有时间进行运动，那就意味着你的生活已经开始失衡。如果你感到自己因为太多的任务而停不下来时，它暗示你已经到了极限。不管何时，当你觉得自己无法停下来时，就是身体在告诉你必须尽快停止的时候。","link":"/2021/02/13/books/%E5%8D%9A%E6%81%A9%E5%B4%94%E8%A5%BF%E7%9A%84%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E8%AF%BE/"},{"title":"《小狗钱钱》","text":"大多数人并不清楚自己想要的是什么，他们只知道，自己想得到更多的东西。 对于快乐的认知。人的感觉自是激素化学反应的结果。 好奇是好的，但是绝不能让好奇阻碍你做事。太多的人做事犹豫不决，就是因为他们觉得没有完全弄懂这件事。真正付诸实践要比纯粹的思考有用多了。 “尝试”纯粹是一种借口，你还没有做，就已经给自己想好了退路。 学习就是认识新观念和新想法的过程。假如人们始终以同一种思维方式来考虑问题的话，那么始终只会得到同样的结果。没有想象力的人是很难成就大事的。我们对一件事投入的精力越多，成功的可能性也越大。可是大多数人把精力放在自己并不喜欢的事情上，而不去想象自己希望的到的东西。 机会到处都是，但是只有在你寻找它的时候，你才能看见它。 金先生是一位不同寻常的人，他总是做一些非同寻常的事情。他不在乎别人做什么，只要他认为正确的事情，他就会去做。 金先生答道：“越是把注意力放在疼痛上，我就越会觉得疼。谈论疼痛就像给植物施肥一样。所以我很多年以前就改掉了抱怨的习惯。” 要想过更幸福、更满意的生活，人就得改变自身。这和钱无关，金钱本身既不会使人幸福，也不会带来不幸。金钱是中性的，既不好，也不坏。只有当钱属于某一个人的时候，它才会对这个人产生好的影响或者坏的影响。钱可以被用于好的用途，也可以被用于坏的用途。一个幸福的人有了钱会更幸福；而一个悲观忧虑的人，钱越多，烦恼就越多。 他停顿了片刻，接着又说：“如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。这一点你千万不要忘记。”","link":"/2021/02/13/books/%E5%B0%8F%E7%8B%97%E9%92%B1%E9%92%B1/"},{"title":"《付鹏-经济世界观-全文》","text":"视频学习记录。来源：华尔街见闻大师课 1.1 什么是大类资产开篇先跟大家讲一下什么叫大类资产。 我经常会被问到，付总你怎么看猪肉？我说我没法看。还有朋友问我，4月30日红枣期货上市你怎么看？我说我没法看。或者有人问付总你怎么看某某公司的股价？我说我没法看。 我确实没法回答这些问题，因为我们这个所谓的大类资产框架，它有一个最基本的原则-不是所有的资产都放在一起的。换句话说，不是所有的资产价格都只是一个价格，看涨看跌，什么都可以看，那是不是跑到澳门赌场看大看小也可以用同样的方法？当然不是。 这里面对于资产的定性是很关键的，对于大类资产，我们可以遵循这种宏观策略的逻辑框架，但是对于小众资产，你可能根本不需要研究今天宏观怎么样，明天全球怎么样，因为不重要，你更多的需要关注的，实际上是小众资产本身微观要素正在产生的这种变量。 为什么要区分大类资产和小众资产呢？因为它们的侧重点是不同的。所以说我们后面分享的，更多的是大类资产框架，并不适用于小众资产。 即便是对商品来讲，可以放到框架中的、真正可以去使用的，铜和原油就够了，其他小众的，比如说咖啡期货、红枣期货、苹果期货，这些跟宏观体系有什么关系？没有，你可能要看的更多的是它的交割、它的仓库、它的品级、它的参与者、它的交易制度，你可能会看得非常微观。所以并不是说期货就叫大类资产，这是错的。 很多人会说股票是大类资产，这从另外一个维度上来讲也不完整。前几年经常有人问我，付总对新西兰的股市怎么看？我说很简单，它不属于大类资产框架，你可以观察它，但是不可能把它放进来。他说为什么？我说第一，流动性不够，纵深不够；第二，它的交易制度不是T+0，甚至不像中国，连T+1都不是，前后需要5天。 所以你会发现它的性质决定了它是一个小众资产，但是它可能会受到宏观的影响。股票里面很多的，比如香港的小盘股、仙股，它们跟经济的好坏有什么关系？没有任何关系。所以说不能把股票笼统的放到我们这个框架里。 大类资产框架包含什么呢？FICC，基本上就那几样东西，债券、权益，加上一部分的商品。其实有的时候框架里包含什么取决于你的交易策略，还有你的特点。我经常跟大家讲，我说资金属性决定了你的行为，而你的行为又决定了你的可选项是不一样的。 有人问房地产算不算？比如说做一个私募或者公募基金，可以看涨或者看跌房地产，但是我没法把它做成一个资产配置进去。但是后面我们讲到全球的FICC框架的时候，你们会发现房地产又会作为一个非常重要的市场存在着。其实很简单，从我的角度来讲房地产可以算作大类资产，无非就是有些人能做，有些人不能做，有的资金属性可以配，有的资金属性不能配，仅此而已。但是这些手段原则上来讲大家应该了解，因为它对于整个体系的影响还是很大的。 债券方面，主要的利率债有美国、欧洲各国、日本、中国、澳洲的债券，工具我们选择ETF和衍生产品。 权益方面，大家会发现我很少选择个股，我很少去讨论股票，我跟很多人说过我是从一级市场做到二级市场的，我的原则是只做那些我很熟悉的上市公司，熟悉是要加引号的，我要熟悉到非常熟悉。否则的话，像美国证券市场一样，与其这样主动的去选择，不如进行被动的投资，选择ETF就好了，或者说选择特定的一些产品作为我的配置就好了，我不会特别的去涉足某个特定的公司，这其实已经非常微观了。 做权益的人其实会有一种困惑，有的时候不需要去在乎宏观经济到底发生了什么，更多的需要关注这家上市公司的经营情况，这其实是比较偏微观的，原则上来讲这不是大类资产框架擅长的，怎么办呢？配合就好了，所以只看一些特定的龙头类的权益就可以了。涉及的市场，主要是美国、欧洲、日本、香港、中国，这些其实都是全球化进程的一部分。 其次会关注多一点的是澳洲市场，但是仅限于极个别的、跟我们后面讲到全球经济一体化相关的这些行业龙头。新兴市场属于关注类，比如说我们经常会讨论土耳其的市场怎么样了、巴西的市场怎么样了，但我要告诉大家的是它们都属于关注类，只有很少部分的对冲基金会涉及这类资产。 大部分的时间我们更多的会去寻找一种替代关系，就是说逻辑关系很清晰的时候我可能对于对标资产会做一些替代，并不会直接涉足这一类。所以说土耳其也好，俄罗斯也好，巴西也好，真正能够参与这些新兴市场的人其实是很少的，华尔街的投资机构还可以，像我们国内或者华人圈子里真正能参与进去的比例还是很小的，它属于关注序列，并不属于真正意义上我们马上可以参与的。 汇率部分，大家都在参与的，主要是G7汇率，但是研究和关注类我这里列举了韩元、台币、南非的兰特、墨西哥的比索、巴西的雷亚尔等，这其实跟刚才我们讲新兴市场的配置道理是一样的。它的交易成本、交易的通道、交易的可选择的类别，实际上比较受限，流动性也受影响，所以原则上来讲不建议真的去交易，你要关注它，在整个反馈过程中寻找替代即可。 商品中最重要的是原油，但是我之前也跟大家分享过，原则上我们把原油更多的当成一个利率性的影响变量在看，虽然它具有商品属性，但是跟利率高度相关。其他的基本金属，主要看铜，当然，剩下的比如说作为对冲手段的一些跨品种的交易，可以选择铝、锌等等。 贵金属里面，其实黄金就是一个债券，我之前跟大家讲过，它虽然放在商品里，但是更多的是按照债券的逻辑去考虑。白银是一定要按照商品去考虑的，这里就会产生一个偏差，也导致了后面我们会讲到的一些案例，2011年、2012年中资在白银上犯了巨大的错误，其实本质上来讲就是错在把白银当成了跟黄金一样，完全忽略了它的基本的商品属性，所以最后被华尔街给逮住了。 铂、钯这类品种不在交易范围之内，但是我们会研究它，为什么呢？它具有很多小众商品的特点。这几年大热的钴、锂、锗、锌这种小众的基本金属，大家已经陆陆续续发现它们的玩法和套路了，其实这些事情在当年的华尔街市场上都出现过。 小众的资产是会有人惦记的，比如说大家最早从业的时候应该都接触过白银的亨特兄弟的案子，再比如说当年的钯金的案例很多人并不知道，也就是通过我写的日记大家才知道19972000年前后的钯金价格操纵案，最后让福特这种下游的汽车公司掏了钱埋了单等等。其实越小众的商品，套路越相似，无非就是有的时候它的供应和需求并不像很多人理解的那样，越小越容易改变。 大家看美国的商品市场那么庞大，但你们什么时候听说过一个纯交易者去交易橙汁、去交易活牛、交易活猪的？我接触的不少的中国交易者其实挺奇怪的，这个基本的原理他们都不太明白。 我经常会看到我们的群里讨论，哎呀美国的猪肉又暴涨了，炒！我觉得好像在他们眼中，所有东西的价格都是一样的，比特币、狗狗币，各种币没有区别，管它叫什么名字，他们只是在看单纯的价格。我觉得这从原则上来讲是一个大忌讳，单纯看价格的话可能更多的考验的是你盘面交易的能力，但是资金量稍微一大，这个游戏你就没法玩了。 所以在讨论大类资产的时候我们必须注意纵深的维度。 农产品属于研究序列，它的交易思维跟大类资产的逻辑框架不一样，所以农产品是比较倾向于纯商品的框架，跟宏观也好，跟我们说的大类资产框架也好，关系不是特别的大，它属于观察序列。 铁矿石、煤炭、乳制品也都属于观察和研究序列。当然了，你要么就干脆让纯交易者去交易，你也可以理解成金融属性比重重的我们拿过来放在大类资产框架里，自身属性比较重的，越重的越偏向于对它自身的研究，这个道理其实原则上是对的。 这就是我们原则上来讲大部分的大类资产的路径。 1.2 打通宏观经济学家和交易者之间的秘诀在开篇的部分我们并不是说直接就开始分享，因为很多的问题其实不是在我们的框架中就可以解决的。在一开始，我想跟大家分享的其实是我的世界观的形成，这会影响到我们对于现有的很多问题的探索。 之前戴老板问我说，宏观经济学家和交易者之间似乎是很难打通的。我说没错。他说这里面的秘诀在哪？我说这里面的秘诀很简单，记住一点，宏观经济学家讨论的永远是没有对错的问题，他们讨论的是产生的原因、可能产生的结果以及可能产生的方法但是对于交易者来讲，我们并不需要去参与这样的讨论，因为有时候这样的讨论是没有任何意义的。 比如说很多人喜欢讨论中国是否存在崩溃的可能性，反对者会说你这样的想法是错的，但这种讨论有意义吗？这种问题写成泛财经的文章可能点击率很高，但是实际上对于很多金融市场的直接参与者来讲，我们没必要陷入这样的纠结当中，我们需要搞清楚的是怎么去做，这个体系怎么传导。 所以说有的时候交易者去看宏观，更多的是要看其中的矛盾和逻辑关系，由此推测经济的走势，然后才能知道在下面的体系里自己该干什么。这实际上才是宏观和交易者之间所谓的脉络，如果没有理解这个脉络会犯很多错误。 比如说过去的10年间，许多大家认为很好的宏观经济学家可能会讲一大段中东的故事，讲一大段中东的战略问题、美国能源战略问题，讲完了以后直接得出结论一油价要涨。这在以前投资者结构不成熟的情况下，非常容易抓住投资人，为什么呢？你左边讲的我能听懂，右边的结论我也能听懂，好，就按照你的结论去做。但是这中间缺失了很多。 这两年我通过跟华尔街见闻做的《付鹏说》的节目，其实跟大家分享的更多的不是结论，我很少跟大家直接说结论，我觉得那样做没有任何意义，我更多的是把中间缺失的这一块讲给大家。 比如说这两天大家看到原油价格在涨，不理解的人会说因为伊朗的问题油价在涨，现货溢价在往上推，但是为什么付总非常紧张油价可能会出现较大幅度的调整？我会跟他解释，现在发生的宏观事件，比如说沙特承诺的增产，其实已经作用在了远端价格上，但是在近端这个事情只影响情绪，并不影响实际的供应和需求，因此就会出现高位的现货溢价。 你会发现我把中间的传导路径讲出来，后面的结果就很好推了。但是很多做纯宏观的人会犯这样一个错误，前面讲完了直接给出结果，但其实中间这一段要比前面更重要。我认识的几个朋友就吃了这样的亏，他们说你没讲这些东西之前我们觉得这样的推导没问题，比如说黄金保值、黄金通胀，经济学家先讲一大段黄金的历史，然后直接得出的结论说黄金必涨无疑，买吧。 这实际上就是从纯泛财经直接到结论，并不能形成一个完整的交易体系，中间缺失了一块。但是这不等于说左边的宏观研究没有用。 我前几天写了一篇日记，主题是宏观真的无用吗？因为有人写了一篇文章说宏观是无用的，这是另一种极端主义，他认为宏观没用，直接看左边的交易手段、交易方法就好了，他认识到了纯宏观的弊端，他认识到其实很多的宏观经济问题讨论半天却没有一个实质性的结果，对交易者没有什么帮助，于是他得出的结论可能就是宏观无用。 我认为这两种观点都走向了极端：宏观完全有用，它可以替代中微观的研究，我可以告诉你错了；宏观完全没用，直接就抓中微观、抓纯交易的手段，我可以告诉你也错了。 原则上来讲我们要尽量保证这个链条的完整性，但是你要明确在每个点上到底要去聊什么。比如说大家坐在一起侃大山，我可以说政策不应该这么去做，应该怎么去做，这叫侃大山、聊天，但是在具体执行的时候，我不会依靠这个东西去做交易决策，但是必须得了解正在发生的是什么。 所以我们第一篇是一个非常泛的宏观的东西，但它很重要。 1.3 经济世界观的三大核心问题大家如果有经济学基础的话，经济世界的三大问题其实很简单。这三大问题可以从经济学的课本里，从最早的《国富论》里找到，我把它们总结为分工&amp;分配债务&amp;杠杆和收入&amp;贫富。这里面涉及的问题不一样，我们这种金融从业者，其实更多的是在中观层面关注债务和杠杆。但如果我们是真正的政策制定者，或者宏观战略的思考者，其实还要涉及一个人文社科的问题，就是收入和贫富的问题，否则就会被有些问题迷惑。比如说很多人认为经济就是一个货币现象，大水漫灌，一切太平，挺好的，为什么不能这么做？当你把这三个问题合到一起的时候会发现，它产生的矛盾会跳出经济学领域，变成一个人文社科的问题，也就是最后一个问题-收入和贫富的问题。 其实很早以前，我们的这些前辈、大师们就看得很明白了。所以说经济周期的循环，原则上来讲就是在释放它的利的过程中积攒了大量的弊，所以它需要利用这种萧条、衰退的过程去进行再平衡，平衡社会的问题、平衡财富分配的问题。所以说西方的整个经济周期，我们看到的一轮又一轮的繁荣、衰退、萧条，其实准确的说都是在这个过程中处理它的矛盾。 事实上来讲，我现在对于2008年金融危机实际上是比较忧心忡忡的，虽然说大家看到资产价格涨也好跌也好，有波动，但是如果单纯的从世界观的角度来讲，我一直认为2008年金融危机到现在为止还在延续，而且它延续到了一个非常危险的境地，就是它已经在影响我们最后也是最害怕的问题一收入和贫富的矛盾。事实上来讲，如果大家观察到一些社会现象，不管是我们内部的社会现象还是全球的动荡格局，或多或少都会理解我要讲的这个问题。 这三个问题之间是怎么样一个关系？《国富论》告诉我们，有了分工、分配，有了激励的方式，才有收入的增长，才有经济的增长。这话是对的，其实最原始的财富就来自收入的分工和分配。这个东西几百年前《国富论》就跟大家讲得很清楚，它讲到的是一个单一社会里的分工和分配，但是由它进一步延伸出来，就是大家非常熟知的全球经济一体化。全球经济一体化无非就是国家和国家之间的分工和分配关系。但是任何的分工和分配本质上来讲，都有利和弊，尤其是加上债务和杠杆以后，它的利弊就会产生得非常明显。 为什么大家都喜欢从事金融业？很简单，因为金融行业或者叫金融服务业的从业者，要么是创造债务和杠杆的人，要么是利用债务和杠杆的人，我们掌握着财富扩张的命脉，财富的扩张究竟来自什么？其实就来自债务和杠杆的运用。如果说没有了金融，世界会不会好呢？我可以告诉你没有金融世界不一定会差。很多人会有一个错误的认知，认为做大做强金融行业是为了服务实体经济，这其实是我们给自己披上的一层圣衣。原则上来讲金融行业一半天使一半恶魔，我们创造财富的同时也带来灾难，灾难是什么？巨大的贫富差距。所以说很早大家就开始认知到，债务和杠杆的运用会拉大收入和贫富的差距，社会的阶层会错开，然后你会发现富者恒富、穷者恒穷，劳动的价值在减弱。这是一种非常泛宏观的认知，但是把它糅合在一起就会生成一个通用的模型，不仅可以用于解释我们的宏观问题，还可以用于解释我们的微观资产。单一的资产也是一样的道理，都是财富的创造、财富的扩张和财富的分配问题，实际上任何资产的路径都可以用这个模型解释。 下面我要讲的这两个人是真正的大师，我们只能算师者，我想跟大家分享一下他们认知中的精华部分。第一个人是索罗斯，我记得最早的时候，二三十年前很多人去解读索罗斯先生的《金融炼金术》，很多人的解释就是，哎呀，好像看不懂前面那段偏理科的系统性东西在讲什么，好，我们直接给它的反身性理论冠上一个哲学的名义，哲学这东西好讲，也好理解。但大家别忘了，索罗斯是一个标准的理科生。《金融炼金术》中大量的内容，其实是标准的全球经济一体化的反馈路径的一个组合，可不是简单的哲学人生心灵鸡汤。我们只能说当时的大部分读者对这个理解并不深刻，可能一些学者很容易看明白前面他在讲什么，但是我仍然要推荐这本书。我认为索罗斯最荣光的地方，就是他对于国际分工、分配的理解，他1997年狙击香港，就是利用了他在国际分工和资本流动中间造成的中微观的矛盾，但是他的世界观更多的是基于对分工、分配，以及收入分配的极值的理解。 第二位是达利欧先生，他的书其实大家也都看了，更多的是对于债务问题，债务的生成、债务的毁灭、债务的处理、债务的解决方案的讨论，他对于债务和杠杆的理解应该说是非常深刻的。 最后关于收入和贫富，我想金融圈里没有人对这个问题探讨过多，因为它不属于我们的范畴，我们唯一在乎的重点是赚钱。当然了，当你的钱赚到一定程度，开始思考改变社会的时候，你就成功进入到第三层级，开始考虑关于收入和贫富的问题，你可以把自己的财富捐出去，可以去做慈善，去改变这个世界，这是第三层级的问题，但是基本上不会有人去写书讨论它。但是我们的社会现在需要我们这么做。 1.4 三大核心问题解读模型（1）我们可以做一个简单的模型，虽然说是模型，但我们没办法用纯数学的方式去解释，所以说这里做的模型非常简单。从我的角度理解，经济的增长和效率的提升，原则上来讲来自两部分，分工、分配，就是收入，我们把它放在分母部分，分子部分是债务和杠杆，换句话说，财富的创造和财富的扩张加在一起，形成了整个经济的增长和效率。 所有人都知道技术创新是提升效率的唯一方法，这点没错，就是在分工、分配的前提下，我们去创造一个增速，去创造一个斜率，技术的斜率。 但是劳动到一定程度，并不决定你能够分享经济增长带来的红利，这个时候就会有一个偏值，这个偏值就会开始受到其他因素，就是债务和杠杆的影响，我们把它对应到这两个函数上，然后就会生成这样两张图。其实很多人对此并不陌生，只是很少有人把这三个东西放到一起思考。 先看右侧这张图，它反映的其实就是经济世界的这三大问题。大家会发现图中有两条斜线，这两条斜线斜率不同，这个斜率不同就是因为刚才我讲的生产效率的提升，技术的提升会改变产出的效率，于是斜率就会发生变化。 简单讲，随着人类文明的进步，随着技术的提升，我们的整个收入水平，在单位时间内获得的财富的量也会增加，这是自然法则。但是大家会发现图中还有一条叫金融化程度的黑色曲线，这条曲线里面就蕴含了我们现在面临的很多问题在第一阶段，大家会发现黑色曲线跟斜线基本上是吻合的，这就是劳动价值。简单讲，所有的年轻人只要辛勤的努力劳动、不放弃，原则上来讲你们一辈子能够获得的就是这条斜线上面正常的增长。 举个最简单的例子，你18岁，你的师傅比如说是厨师，你的师傅可能月收入已经是两三万块钱，甚至更高，但你只有两千块，没关系，这中间只是一个时间价值的问题。换句话说，只要你付出了努力，只要你认真学习，只要你跟着你的师傅兢兢业业，随着时间的推移，你的收入是会按照这个比例增长的，等你到师傅那个年龄的时候你也会获得同样的财富。假设所有人的寿命都是60岁，加权起来你会发现大家的斜率几乎是一样的，也就是说劳动创造的价值在这一辈子里几乎是一致的。当然了，不是说所有人都一致，这中间会有一些差异，比如说家庭背景、社会资源、教育程度等会导致每个人的斜率不一样，虽然它造成贫富差距，但是不造成最严重的贫富差距问题。 第二阶段大家会发现这个曲线偏离了，偏离得非常大。换句话说，哪怕你已经进入到中产阶级，你已经在公司里努力的工作了，但是你会发现有的人可能就比你赚的多得多得多。这部分在我的框架中叫债务价值，就是说到此为止的第二阶段中，一部分人开始明白一个道理，只有收入是不够的，能不能看到一个赚钱的生意以后我去借钱？负债产生更高的收入这个结论开始产生，这个时候负债者跟储蓄者的财富差距就会拉开，简单讲，纯储蓄的人，到老了就哭了，越借钱的开始变得越富裕，债务价值在这个阶段中体现在大家的收入分配上。 再往后，最高的这个阶段，也就是人人都愿意干的金融行业。为什么大家愿意从事金融行业不愿意下工厂呢？道理其实很简单，杠杆。 债务价值阶段过了以后，我们要想的是怎么能够借更多的钱才能够在短时间内获得更高的收益，杠杆的原理就出现了。现在大家在做的任何金融交易也好，金融设计也好，金融产品也好，它的基本原理就是在一个资产负债表中如何拿到债务的问题，如何增加杠杆的问题，所有的设计都是这么来的。当进入到高杠杆年代，大家会发现财富是会在极短时间内累积起来的，这个曲线的斜率会更高。这部分在我的框架中叫金融化程度，什么意思呢？简单讲，金融化程度越高，大家就越有机会在短期内实现改变人生的暴富。这三个阶段，劳动价值部分、债务价值部分杠杆价值部分，合在一起就生成这样的一条曲线，中间的这个差值部分就是贫富差距。 如果我们把它放到宏观经济里面是什么？这三部分分别对应实体经济、房地产为首的债务、金融为首的杠杆。所以说大家会有一种困惑，叫干房地产比干实体好，干金融比干房地产好。当然了，金融也不能纯虚，所以说拉个实体部分，加上杠杆形成金融，所以我们都希望自己的孩子去学金融。虽然说你从事一个技术性的工种，可能一个月能拿到两三万块钱的工资，但是大家觉得不够，财富分配就此拉开。 所有的国家都一样，大家不要认为我在说中国，不是这样的，这个模型适用于所有的国家。 它带来的问题也很简单，贫富差距。其实这个道理可以解释现在大家看到的一些问题，就是债务和杠杆的急速累积会使收入部分发生偏移，这个时候其实所谓的泡沫也就随之出现了，无非就是这个债务和杠杆体现在什么领域，是居民部门、政府部门，还是企业部门，但早晚有一天它是会回来的。 所以说一般来讲，把它反过来就是去杠杆、去负债的一个过程。其实在足够长的经济周期中，我们一直在经历复苏、繁荣、衰退、萧条，循环往复，无非就是我们在哪个部门完成债务和杠杆的累积，完成去债务、去杠杆的过程，完成效率部分的回归。 一个简单的模型加上它的反向运转，然后叠加，就形成了大家看到的经济的路径。 1.5 三大核心问题解读模型（2）大家可以想一想2008年的美国次贷危机，英国的情况也差不多。我说自己比较幸运，是因为到这个年龄我已经经历了两轮这样的完整过程。一般来讲，这样的一个周期差不多在20一30年，正常人经历两年基本上就可以退休了，幸运点的人经历一轮就够了。所以有的时候说人生七十就是一两次机会，这话其实没错，但是有的人比较幸运，比如我，在东西方各经历了一轮。 大概到2002年、2003年，英国的劳动价值这部分，也就是大家称之为实体的部分已经结束了。2002年左右英国的房地产市场开始繁荣，加债务、加杠杆开始启动。那个时候很简单，如果你还是工人你就完蛋了，这20年你的收入不会有明显的增长；但是如果你开始加杠杆，开始买房子，你的人生就会改变。这波房地产的繁荣一直持续到2006年左右，当时英国的ITV、Channel5，最好的节目都在教你如何拍卖一个破房子，先去银行做抵押，拿到钱后把它重新装修一下，然后放到市场中去卖。 经历了托尼·布莱尔政府的金融改革和第二次金融大爆炸之后，伦敦金融城重新复苏。金融的加杠杆实际上不是我们想加就加的，它不是自然生成的，一定是在制度的监管下实现的，也就是一小部分人决定什么时候可以加，什么时候可以减。无论是在欧美还是在中国，都一样。很多人认为它是一个自然的周期，我可以告诉你不是，都是人为的。为什么很多时候我们会去盯政策，盯政策到底在盯什么？看新闻联播到底在看什么？那个时候看英国的报纸，就是要看它的大选，看谁会上台，看是不是安倍晋三会赢，有人会说这些东西跟你的这个宏观框架有什么关系？很简单，这部分人将决定你后面的路。 2009年为什么要回到国内？如果没有2009年两会提出做大做强金融，国家开始逆周期加杠杆，如果没有2009年3月31日证监会第61号令开始放开中小板！创业板和前端的股权投融资，回来干嘛？金融从业者，很简单，说俗点我们追逐钱，但是说得更专业点，我们追逐负债和杠杆，哪里有负债哪里有杠杆就去哪，哪里去负债哪里去杠杆当然不能在那。大家可以想想，如果过去十几年待在英国从事金融行业，是很悲惨的。很多人并不明白我为什么要回国，是因为2008年金融危机吗？不，是因为杠杆从西方迁移到了东方，从伦敦、纽约迁移到了上海、北京，金融从业者自然而然也要随之迁移，但如果，举个例子，未来的10年或者20年中国开始收紧了，金融从业者理论上就应该是走的。所以可以说金融从业者的所在地也是由金字塔尖的一小部分人的政策决定的，这就是观察政策的目的。 伦敦金融城复苏之后，居民债务大量增加，伦敦金融城赚得盆满钵满，大家其实并不在乎收入到底能不能还上债务，这造成了居民债务和收入之间巨大的差值，也就是贫富差距。这个东西积累到一定程度就该有人埋单了，实际上这就是次贷危机，无非就是债务在哪个部门爆掉、由谁埋单的问题，简单讲就是这么一个情况。这就是经济的一个周期，但是真正的长期增长靠的一定是创新和生产效率，也就是斜率。这个框架理解了，大家也就明白不会有永远的加杠杆、加负债的过程，不会说偏离程度那么大还可以维持，终究是要有人埋单的。 这张图同样适用于中国，2002年以前，很简单，干实体经济。那个时候我们斜率的提升并不是来自生产效率的提升，原则上来讲当时斜率的提升更多的是因为全球经济一体化对于我们的影响，所以那个时候就是干实体。2002年之后，正常来讲你应该明白，要干房地产，2008年之后干金融，这就是人生的三大阶段。为什么我们说总有一代人是倒霉的？很简单，干实体的是这一代人的父辈，或者父辈的父辈，干房地产的是他们的长辈，干金融的是他们的前辈，等他们毕业的时候发现只能去扛负债。这就是我们说有的时候年轻人的命运是天生注定的，改变不了的。每个时代都有这样的例子，比如20世纪80年代英国的那一代、1997年香港的那一代，本质上来讲他们都是赶上了所谓的资产泡沫的顶峰期，对不对？所谓的资产泡沫的顶峰期就是左图中的红色圆点，也就是债务、杠杆和收入偏离最大的那个点，那时的收入已经不足以填补债务。 这个时候其实又衍生出另外一个小的函数——债务可以等于收入的函数，这其实跟股票的道理是一样的。最简单的股票定价是什么？把未来的现金流折现回来。其实这跟借贷人的人生是一样的，我给你的债务越来越多，我折现你未来的时间就越来越多。我现在折现你20年，你拿青春还我。后来发现房价还在涨，资产价格还在涨，但是你的收入不涨，也很简单，总量在增加，你的单一收入没有增加，乘以时间函数就行了，20年变成40年，40年变成80年，如果干80年还不够还我怎么办呢？儿子还，孙子还。但是如果你没有儿子没有孙子，那负债就不可持续了。 当然也有人说债务最后的问题是人口问题，这句话是对的。现在欧美日韩存在的情况是什么呢？说到底就是所有这些负债坍塌之后没有人能够去承担，没有人口时间函数去承担它，债务不可持续，资产价值就会保持长期的低迷。货币政策在这里面会犯一个巨大的错误，大家对货币政策的理解就是放水、宽松，从放量到放信用，大家认为只要这个东西一放，就一定能够让资产价格复苏起来。对不起，日本证明过，欧洲正在证明，不一定会这样。 有人会问为什么？很简单，放水只是在稀释债务，但是如果长期收入提不上去，债务再怎么稀释，只要不让它崩，都会集中在某一部分的富人身上，这个时候大家会发现货币政策会导致一个现象叫富者恒富、穷者恒穷，并不解决债务问题。所以说简单的说货币一漫水，所有债务等于被稀释掉了，这就是不对的。这个漫水的过程会造成富者，或者说掌握着资产、掌握着债务和杠杆的人是最大的受益者，受益得越来越多，而下面的人并不受益，他们要承担更大的负债，但是总收入并不增长。紧接着我们就会看到同样的问题，债务仍然无法可持续。所以说不是简单的说任何经济问题都可以用放水去解决，那样的话还讨论结构性矛盾干什么？其实原则上来讲，结构性的矛盾要远比货币政策重要得多。结构问题是什么？在我们这张图上结构问题就是收入、贫富、人口、债务的可持续性。它在微观层面也可以应用，大家会发现，这么大的一个宏观框架，降维到微观层面它照样可以用。 举一个最简单的例子——股票，我们可以把股票价格想象成一个社会，其中同样涉及价值的创造、价值的扩张和价值的分配。我在这里和大家分享的关于股票内容，其实和大部分讲股票的人讲的东西是一样的，只是理解和认知不一样。我们之前构建的经济增长和效率模型也可以用来股票价格，换句话说，股票价格的上涨对应的就是经济增长和效率的提升，原则上来讲只要企业是不断盈利的，就应该有一个均值的斜率。 大家会发现股票价格的两个影响变量是杠杆和投机性波动。我在和惠特尼蒂尔森讨论时说，其实有的时候你也必须得承认投机也是一种价值。大家经常讲价值投资，其实讨论的更多的是企业能不能给我创造回报，讨论的是那个斜率，但投机也是一种价值，无非就是这个价值怎么看怎么用的问题，所以不能把这块完全忽略掉。跟之前对于经济增长和效率模型的讨论一样，股票价格理解起来也很简单，当债务、杠杆推升的股价已经大幅度的偏离了长期增长收入的时候，也就是所谓的高估。 1.6 债务、杠杆与收入模型的应用股票市场处在不同阶段的差异性这样一个简单的应用之后，我们来看下面这两张图，左边这张图是成熟阶段市场的一个简单模型，大家其实也都看到了，之前我们只是把经济周期的不同阶段拆分了，现在我们把它组合在一起。 成熟阶段市场的长期增长价值部分的斜率比较高，能够给予股东足够的尊重、股息、分红、盈利，在此基础上还有一点投机性的波动。这样的市场原则上来讲，只要斜率不改变，就是一个长期增长的过程，但是大家注意这是成熟阶段市场。右边这张图是发展阶段市场，价值部分的斜率偏低，股价的波动大部分是由投机性波动造成的。 之前和大家聊过，在2014年、2015年股灾中后段的时候，如果有）明保进中国的资本市场600（点钚是梦，一万点刚起步，长期的大牛市开始了，未来的目标是一万、一万二、一万三、一万五。你马上就知道，他没想明白。 在过去的100年中，美国的证券市场大概只有两次进入了长达10年左右的停滞阶段，但停滞阶段也只是横着，类似于右图这样的状态，其余大部分时间都是长期增长。比如说这一轮美国的牛市大概是从1993年开始，大家不要以为是从2008年金融危机开始的，真正意义上的长周期的增长的启动大概是在1993年。 我之前跟大家分享过，从1980年里根的改革开始，1980-1993年其实美国更多的进行的是一个结构性的改革。在1993年完成了这样一个改革之后，长期增长的基底开始出现，中间虽然经历了两次投机性的波动、扰动，当然原因不一样，一次是1997一2000年的互联网泡沫，另外一次是2008年的金融危机，但是基本上没有偏离长期增长，投资回报率很高。 所以说在美国做权益，尤其像我这种做大类资产的人，其实是很懒的，被动性投资的回报率就已经是最好的了。在美国证券市场长期增长斜率非常高的情况下，只要被动性的买一堆ETF一直持有，10年后，20年后，你的投资回报率会非常好。不需要去挑股票、挑公司，除非你要追求极致。什么叫极致呢？想要跑赢所有的人，那你付出的努力和你的回报一定是成正比的，但是其实没有必要。 有些人说巴菲特这10年连持续性的跑输大盘，没错，因为从1993年开始的长期增长斜率的改变，也就是效率的改变，他老人家确实有点看不懂。我记得我讲过一句话，不是巴菲特成就了美国证券市场，是美国证券市场成就了长期价值投资，市场进入到成熟阶段以后，它的管理、制度、监管、市场成熟度、参与者程度所有这些市场发展要素决定了投资者在这个市场里应该怎么做。 大家为什么迷信长期价值投资？就是因为在这个市场里可以实现。所以原则上来讲美国证券市场被动性的跟踪就可以，也不用去纠结究竟是微软好还是苹果好，一个ETF持有五六年，从原则上来讲就是最好的。 在中国能不能这么干？我相信有人这么干，但应该积累了比较惨痛的经验。因为原则上来讲，大概筛选一不我们的权益市场，最多只有150只企业的股票具备这个属性，大部分的公司还是处在发展阶段市场环境下。所以在中国，可能更重视的是交易，而不是长期配置。你可以做长期价值投资，但是我相信你锁定的标的物不会超过那150只，这就是我们说的市场处在不同阶段的差异性。 中国股市的波动更多的来自投机性波动，所以我们的证券市场很有意思，每一次暴涨的时候一定是放量高换手。其实我也特别明白两位大师的对话，一边说我们要尊重价值，另一边说这么做没有用。其实两边都对，只是讨论的情况不一样。 中国股市就是发展阶段市场，它的特点就是我不关心它是真的假的，我只关心对手盘相不相信。投机性波动要考虑的问题并不是真和假，而是你的对手信不信它，你有没有对手盘，你能不能完成换手。很多人比较喜欢的交易性手法，其实讨论的更多的就是这个问题，但是长期资产配置考虑的更多的是成熟阶段市场的特点。 所以在中国证券市场上，我的原则就是从来不去讨论股票，但可以根据特点对它们进行分类。而且每一波牛市的末端大家更多关注的是什么？很简单，从右边这张图可以延伸出来，大家更关注的是能不能换手，杠杆率是不是已经到达了极值，这些东西都不够的时候市场还能够持续多久？ 当然了，一般到了那个时候就要靠理想让投资者进来了，什么理想呢？中国会开启大牛市。但是大家冷静的思考一下，想要具备这样的条件，答案并不在什么经济上，而是在市场成熟度上。只有中国证券市场建立完善的市场制度以后、大部分公司都开始转向这个方向的时候，整个指数才会具备这样的条件，否则你就得从发展阶段市场的维度去思考。 美国基金从业人员的三种类型有人会问美国股市里面没有投机吗？当然有，区别只是比重的不同。所以说大家会发现美国要防御的风险其实更多的是一个估值偏离的问题，或者是流动性冲击的问题。美国证券市场的调整，更多的实际上都是因为这两个变量一估值过高了、泡沫化了，要么就是其他债务问题导致整个金融系统流动性收缩了。 其实从1993年到现在，美国股市的两次大的波动就是因为这两个变量，2008年跟估值没有任何的关系，就是流动性风险，1997-2000年就是估值泡沫，仅此而已。大家会发现看多或看空美国证券市场是没有意义的，如果拉到足够长的周期里，斜率足够高的话，任何时间都是买点，很简单，大部分时间是低波动率，小部分时间是高波动率。正是因为这个特点，美国的基金从业人员可以分成这么几类。 第一类，活得足够长的，这类从业人员可以用生命去烫平中间的这种一两年的高波动率回撤，所以他给你展示业绩的时候，不会告诉你说这一两年他的表现不好，他会说过去10年他的平均投资汇报率是多少。 第二类，在低波动率下干个三五年，拿到分红退休，然后该写书的写书，该演讲的演讲。 第三类，低波动率的那三五年让别人投资，这类投资者比较少见，但是我比较崇拜的。什么呢？既然我已经知道了证券市场的基本框架，我为什么要那么辛苦的自己去做投资呢？人生很美好，可干的事情非常多。这种事我付管理费你干，这就叫被动性投资。我不需要去挑股票、做调研、天天盯盘，没有必要，我都委托给你，你去做交易，我给你管理费。因为我知道在这种环境下，市场中大部分人的收益都是以相同的均值增长的，它是增量，创造财富。我要干什么呢？我要帮你防御风险，比如说延续了三五年、五六年的低波动率之后偶尔出现高波动率，这个时候我并不一定会撤资，没必要，因为我知道你的中长期投资年化回报率是多少，它是固定的。 我要干一件什么事情呢？我要在这个过程中烫平我的风险，我选择只关注空头信号，也就是我更关注的是风险，我并不是没有意识到这三五年是一个大牛市，但我想要实现的是对冲你可能规避不掉的风险。所以说大家会发现很多的做空者其实就是做多者，但是价值投资没法规避这部分风险，所以大家看到的只是做空者。 还有一类是比较极端的，就是观察到信号以后，比如说一只基金刚开，开到2006年，在这个时间节点上就要选择是做长期的多头，还是一战成名，类似于电影《大空头》演的那样。但是那类人一般来讲，赌对了金融危机以后就不干了，记住一点，一定要不干，如果你认为自己未来也可以保持这样的收益率，那就完了，之后会全部吐回去的，为什么呢？这个市场的特点就是这样的，那样的机会可能10年里只会出现一两次。赌对了以后应该干什么？收益率翻个几倍后马上分掉，解散公司，退休。 华尔街成功的这些人的履历，应该不会超过我分的这几类，这其实跟人家的市场特点有关系这就是对之前讲到的模型所做的一个简单的展开。 1.7 经济世界观下的债务、杠杆与科技国家与国家之间的分配我们接着这个话题往下聊。 这两个模型涉及的是不同的市场，大家要有针对性的进行考虑。对于我个人而言，参与每个市场的方法是完全不一样的。比如说国内市场，既然已经了解了它的特点，原则上来讲可以做一个分散。第一，我可以去买那种，其实我不是买，更多的是直接当一些投资公司的股东，占一个很小的比例。比如说你是一个比较固执的长期价值投资者，我知道你的特点，在中国证券市场上你能提供给我的应该就是图中的长期斜率的增长，但你不擅长交易，换句话说，你的公司适合长期投资。你的另外一个特点是不会犯大错，你不会挑那些什么都不知道、纯靠交易的公司，但是我也知道你是无法获得超额收益的。所以这就是一个配置问题，左边的那个公司，你投它15%的股份，把你的一部分自有资金交给它长期打理；右手，把剩余的资金打散，举个例子，我可能会把它打散成10份甚至20份，去投很小的交易型的产品或者交易型的基金经理，他们的特点是并不在乎有没有价值，只在乎交易对手，但是这也意味着他们的风险是极大的，有可能今年赚个两三倍，也有可能到明年净值就彻底归到0.1。我要抓住这两种特点，然后做一个搭配。 美国证券市场其实一样，持有长期价值部分的ETF，其实我就是要获得图中黄线代表的投资回报。我左手把持着流动性风险和估值风险这两个风险的时候，我会用其他衍生产品去对冲这部分的头寸，并不需要平掉它。这就是交易，其实也不是交易，因为原则上来讲，到这个维度就已经跳开交易了，更多的应该是配置的一个思考。 关于债务和杠杆的理解，我这里面就不去细讲了，因为基本上达利欧先生已经把所有内容讲得很清楚了。我在这里只是做一点点补充，就是这个债务的问题不能按照传统思路去思考，认为债务和收入达到一定的比值就一定要出问题，而且出了问题以后一定要去出清。如果这样去思考，好像就看不懂中国的情况了。不同的政府、不同的企业、不同的金融框架、不同的居民部分的属性，还有不同的制度，都将决定不同国家的债务在处理的时候会延展出不同的结果。大家可以看到欧洲、日本、美国和中国的债务问题，都是各不相同的，而且在处理方法上也是不一样的。当然，这里面比较差的应该是日本和欧洲，无论是政府部门、企业部门、居民部门，还有货币政策、财政政策，基本上都受限，行政政策也受限，所以当时我说欧洲可能会日本化。但是中国和美国，整体来讲要优于其他国家。中国和美国，目前货币政策、财政政策和行政政策这三大政策的空间，原则上来讲，都比日本和欧洲要多。 世界观的陈述很关键，因为它直接涉及我们全球资产配置的一个考量。换句话说，对于我来讲，毕竟大部分时间参与的是海外市场，所以最重要的实际上就是全球经济一体化背景下分工和分配的结构。这里展示了科技革命的过程，比如说工业革命等等，这其实就是长期增长的斜率部分。但是我认为最重要的实际上是信息技术和全球化的共进。过去30年，我们全球投资路径的主线就是全球经济一体化的正反馈和负向正反馈，以及信息技术革命带来的长期斜率的增长。简单讲，在全球投资路径中，过去几十年我们遵循的核心框架都是这个。第一，如果你长期投资美国证券市场的比如说科技类板块，实际上你获得的就是信息技术时代的红利，因为它是一个成熟市场，所以说它是一个增量，你在获得它带来的收益；第二，你在享受全球经济一体化带来的投资红利，包括中国的经济增长、中国的房地产，以及全球资本的流动，各个国家也会在这个框架中完成国家和国家之间的分配关系。 有人会说我们是悲观者，我觉得不是，我们是思考者。思考什么呢？思考这两个弊端是否都出现问题了。如果是，其实也有可能我们这一代的投资的最好的年代已经结束了。第一，信息技术革命带来的红利是否已经完全释放出来，我们现在是否很难找到下一个技术革命是什么，这是一个问题。第二，全球经济一体化带来的弊端是否在2008年金融危机以后凸显。2002年索罗斯先生写过一本书，叫《索罗斯论全球化》，在那本书中索罗斯先生把未来10年的利讲得非常清楚，中国是得利者。但是同样在那本书里，他点到了全球经济一体化的弊，这个弊就是分工和分配的弊端。当总的蛋糕不能增长的时候，各国的分配就会成为严重的问题。索罗斯先生讲得非常清晰，这个时候民粹主义会滋生。用克鲁格曼的话讲，国家主义才是真正的核心概念，就是每个国家都是为了自己的利益，民粹对峙就会产生。也就是我们说的，分配失衡以后，就会产生社会问题，道理是一样的，放到国家层面，就是国家和国家之间的分配问题。 2008年金融危机之后，全球面临的实际上是蛋糕增量不够的情况下分配失衡的问题。所以说，如果真的进行全球投资，我认为大家应该尽量避免索罗斯先生讲的民粹化的概念，就是我们在思考各大问题的时候，不要带有太强的民粹主义色彩，否则很多问题会有偏差。冷静的去看待这个世界的问题，然后找到自己下一步该干什么就好了。这是我们要关注的两个巨大的问题。 1.8 全球三级化分工框架二战后全球化的分工和分配模型 由此生成的模型，就是我之前跟大家讲得很多的全球三级化分工的框架。换句话说，我们所有的大的全球经济一体化的宏观模型，都是基于这个架构，它适用于几乎所有资产。 这个框架有三个重要的组成部分消费者、生产者、原材料输出国，在之前的《见面》中我已经跟大家解释过。全球的经济增长来自国际化分工，但是跟商品一样，商品价格想要持续上涨靠的不是供给，靠的一定是需求曲线，我们的经济增长，一定是靠生产出来的东西要有人用，要有人消费。 为什么说如果没有债务和杠杆，技术改进对经济效率的提升会非常缓慢？很简单，在效率的提升过程中，如果没有债务和杠杆，总需求曲线的扩张也是呈线性的，但是当金融介入的时候，我们的需求可以一次性释放出来。 看看现在的年轻人就知道了，赚两千块钱，没关系，该买什么买什么。他们的钱从哪来呢？这种借条，那种借条，这种信用卡，那种民间借贷。金融本质上来讲提供的就是“存贷投汇融”这五大金融服务，原则上来讲，就是提供债务和杠杆。 如里你是一个生产者，你的负债将大量的集中在生产部门，也就是企业部门。如里你是一个消费者，你的负债将大量的集中在消费部门，也就是居民部门。换句话说，中国的债务关系变成了生产部门和收入之间的关系，欧美国家的债务关系则是居民部门和收入之间的关系，金融机构在这中间加了杠杆，所以它要承担这个责任。由此大家可以看到，国际分工中的角色的不同导致债务研究的侧重点也就不一样。 原材料输出国也很有意思，比如澳大利亚，你会发现它的生产部门和居民部门都背负着债务，而且两个部门之间是相互牵连的。它既具有美国的属性，又具有中国的属性，所以大家就明白为什么澳大利亚是一个三段式，它一定是生产部门出了问题以后，马上就要牵连到它的居民部门、房地产，因为它没有储蓄去垫底。 这就是我们在整个的这个三级架构中的分工。所以说无论正反馈、负反馈，其实所有的变量都来自外部。外部债务扩张、杠杆扩张的过程中，生成我们的生产、加工、制造，生成我们的对内投资，生成我们的储蓄，生成我们外汇储备的增长，生成我们的货币投放，然后生成我们的利润，然后带动着原材料的需求，这个过程就是整个正反馈的路径。 但是，问题也会随之而来，第一，外部的债务扩张存在着周期性，它加杠杆、收杠杆，对于全球影响非常大。为什么我说2008年到现在，原则上来讲问题还没结束呢？因为2008年之后作为消费者的欧美国家在调结构，所以我们马上面临的就是产能过剩、利润不足、总需求不足，那个时候我们率先根到的办法是说周期调控下保证总需求，启动4万亿计划，由政府部门来扩杠杆，用内部需求抵住外部需求的下滑。 所以说正是因为逆周期调整，才有了那几年中国经济的高速发展。 当然了，澳大利亚或者新西兰那种原材料输出的国家，它们是被动的随着我们走的。这几年大家会发现，对于澳大利亚或新西兰这种处于我们产业链上游的国家，中国的逆周期政策调整对于它的边际效应越来越弱。 所以不难理解很多人会问，我们供给侧改革了，钢铁行业利润恢复了，铁矿石价格也上涨了，为什么澳洲的经济还在变差？很简单，我们进行的调整，第一，不是总需求的调整，如果是类似于2009年、2010年，澳洲是跟着我们一起繁荣的。 但现在并不是，我们不再采用总需求的手段，开始采用供给的手段，开始采用结构性的手段，开始注重结构性的比重，这时候你会发现，外部这些国家就没法得到我们的红利了。这就是这几年我们看到的一个分化的现象，其实都是从全球经济一体化中衍生出来的。 中国不是第一个生产部门的得利者，“二战”之后早期的得利者是德国、日本，然后是亚洲四小龙，然后是中国。现在实际上是有小部分拆分的，举个例子，如果现在越南是国际分工中的生产者，当然越南也有自己的特点，你就应该知道过去的五六年你应该到越南干嘛。当然是实体，不是炒房子。对方的收入还没增长上来，储蓄还没增长上来，你跑去炒房子，拉高房价，负债转给谁？负债的转移一定是基于收入的增长的，大家什么时候见过一个国家，总收入还没有增长起来、总储蓄没有增长起来的情况下就炒房的？ 我记得之前见过一个温州的老板跑到非洲去搞房地产开发，当时我就说你怎么根得那么不明它呢，当地的收入没有增长上来，储蓄没有增长上来，房子卖谁啊。所以，第一步一定是让它收入增长起来，再拿走它的未来时间价值。所以说第一步一定是生产加工制造，对于任何国家都是这样，先做生产加工制造，再做产业链投资，储蓄增厚了以后再做房地产，然后再干金融，最后撤出去。当年的亚洲四小龙基本上就是这样的路径。 在这个框架下，就形成了我们的反馈机制，一个中长期的资产配置和投资路径也就在这个基础上产生了。早在我写《十年大宗背后那些不为人知的故事》的时候，我就提到了一个非常重要的因素一-欧美金融监管的放松，包括英国在内，我都会讲到它的金融政策和金融监管，因为没有这个口子，就不存在债务扩张的基础。 所以大家就知道，全世界说到底，还是一小部分制定政策的人决定了我们这个机器的引擎能否运转起来。 1.9 分工与分配的最大问题分蛋糕游戏 很多国内的学者，包括社科院的余永定，余老都研究过全球经济一体化下的分工、分配问题。生产国和消费国之间存在着严重的问题，首先，在初期的时候，消费国依赖于过度的消费拉动全球的经济增长，简单讲，就是经济增长越高，内部的消费就会越过度，而且还会造成一个现象一内部的收入和贫富差距会拉大。 全球经济一体化的弊端就是产业迁移带来的失衡，非常有意思。一个社会是分层的，所以并不像教科书上讲的，全球化分工、分配，你干高端的，把低端的扔给别人干就行了，这仅仅停留在理论上。在现实世界中，任何一个国家都存在着高、中、低的分工，所以当发达国家把所有的低端产业全部迁移到中国的时候，它会面临一个巨大的问题：原来承担低端生产加工制造的这部分人怎么办？有人说得很简单，让他们升级。请问如果一个人干了一辈子汽修，干到三四十岁了，突然间告诉他越南的工人比他便宜，然后让他去升级换代，去写代码，大家觉得可能吗？大国内部的收入分配问题会在全球经济一体化进程中随着时间的推移越来越突出。 大家可以想想美国的铁锈区，英国的纽卡斯尔、谢菲尔德，以及长桥工厂，这些传统生产加工制造业大量迁移到中国以后，原本从事这部分工作的人的收入在过去十几年是没有增长的。但是随着债务、杠杆、金融服务性行业的扩张，华尔街开始赚得盆满钵满，伦敦金融城赚得盆满钵满大伦敦地区的富人赚得盆满钵满，贫富差距越来越大。这中间有一个最重要的资产价格会被抬高，那就是土地和房子的价格。西方虽然有社会福利保障体系，但是房地产并不包含在这个分配机制内。中国的两种分配机制，原则上来讲，都不足以满足底层人民的需求。 大家可以试想，如果我们的底层生产加工制造业被东南亚国家全部拿走，我们又没有顺利的完成产业的大幅度升级，升级到能够让这部分人都能够完成转型，我只能告诉你，你在上海是一个世界，出了上海是另外一个世界，我们也会出现类似于英国和美国的这种差异。 这个矛盾出现以后，西方的问题就暴露出来了。民选制度下是选票说了算，虽然说少部分人富裕，大部分人贫穷，但这个时候你会发现，政客就会利用这样的一个制度，只要他打着民粹的旗号，只要喊出让就业回来、让工资回来、让民众的生活好起来、被中国拿走的让它吐回来的口号，放心，选票就回来了。所以特朗普的上台、英国的退欧，包括将来欧洲内部可能会出现的分崩，一切都是意料之内的事情。 但是对于中国来讲，我们作为生产国，和消费国之间的矛盾就出现了。真正完美的分工是什么？完美的分工是没有过度的消费，也没有过度的储蓄，双方之间没有竞争。举个例子，我开一个餐厅，你开一个洗脚房，你晚上到我这来吃饭，我拿着钱又去你那洗了脚，财富只是我们中间的-个媒介。但是过度的储蓄和消费都会破坏这样一个经济体的平衡。我把父母留给我的钱都花掉了，都去你那按脚了，你自己在家做饭，这个游戏怎么玩？换句话说，你开始储蓄了，我过度消费了，财富分配就失衡了。 全球经济一体化并没有实现完美的分工，所以过去十几二十年，我们是日子越过越好，但是欧美的问题是过度的负债，压力越来越大，而随着资产价格的传导，底层人民的收入无法填补负债，这个时候大家会发现民怨开始增加，要靠另外一种方式进行全球再平衡了。所以说全球经济一体化的弊端在这个维度上就开始暴露。 第二，中国的成长。我们以这种模式高速增长的结果是什么？结果就是所有赚钱的我们都想拿过来。于是就产生了一个大问题：别人怎么办？两个国家都存在着阶层的分配，都存在着债务和收入之间的关系，如果两个国家的总收入不增长的话，你的收入增长将必然对应着对方收入的减少，对方收入的减少和它居高不下的债务一定会生成社会问题，社会问题会推着民选政府，民选政府会推着政治和政策的变动。 举个例子，芯片，从爱国主义的角度来讲，我特别希望中国能够强大，但从另外一个维度上来讲，如果整个芯片技术的瓶颈取得突破，等到我们做得越来越多、什么都能干的时候，我的交易策略就非常简单，做空台湾、做空韩国就可以了，因为你的好必然是它的差。你假设的条件是你拿走的只是它不要的，但如果你拿走的是它总收入的核心部分的话，它的负债就会成为巨大的雷，这就是我们的关系。换句话说，只有总蛋糕不停的增长，我们才具备分配的基础，否则就不是合理的、和平的分配，我们将会处在一个对峙的分配状态下，你多必然是我少，你赢必然是我输，零和博弈。这其实是现在全球经济一体化面临的最大的一个问题，它在阻断全球经济一体化的进程。 1.10 全球经济的核心矛盾三大失衡 如果把生产国和消费国的债务、收入放在一起，我们就不难看出，这两类国家的分配方式和机制是不一样的。 如果一个国家在国际分工中得到的是经常项目顺差，也就是通过生产加工制造出口的话，它的分配机制是自下而上的税赋式分配，比如老百姓获得了100块钱，国家通过税收收他20，通过卖地、盖房子收他20，通过其他途径再收他20，没关系，他仍然高兴，因为总收入在增长。 但是，对于靠资本和债务扩张的这些经济体来说，问题就大了。比如有人说，在全球经济一体化进程中，美国的华尔街也好，大公司也好，都获得了巨额的利润。没错，它们是获得了巨额的利润，但是分配就有问题了。美国的大公司，真正拿走几千亿利润的是谁？大股东、二股东、三股东、投资人，还有一少部分成为中高层管理者的员工，他们拿走了大部分的奖金、工资，跟华尔街一样。 但是底层呢？举个例子，美国麦当劳的工资增长速度是多少？麦当劳赚了那么多钱，股价涨了那么多，跟店里的员工有什么关系？但是如果他们居住的地区，房价从15万美元涨价到30万美元，工资却没有增长一倍，他们的生活压力就加大了。消费国的分配方式是自上而下的，小部分人拿走大部分钱以后，通过社会福利保障体系去支撑底层。这种分配方式最大的问题是，当底层的收入完全被拿走以后，矛头就会直接针对拿走大部分钱的那些人。这就是全球经济一体化在分配上造成的问题。 这个一讲完，其实大家在网上看很多分析的时候，马上就知道他讲的那个点为什么不对、他忽略了一些什么东西，这并不复杂，但这确实是现在影响我们的一个很大的问题。所以我们的初步判断是全球经济一体化已经结束了。 逆一体化，准确的说叫区域经济一体化，各国之间竞争关系的加剧，应该是主导全球框架的一个路径。而且由于各个国家在分工体系内的角色不同，影响要素就完全不同，如果对内的调控手段也比较薄弱，这些国家未来的发展并不会特别好。 所以日本化将蔓延到大部分的国家，像欧洲、澳大利亚、新西兰、加拿大，谁的要素越缺失，谁越依赖于外部，谁的结构矛盾就可能越突出，既然外部环境是刚才我定性的那个样子，矛盾的化解就将是一个较长周期的过程。 这是在刚才那张图的基础上稍微完善了一下，把债务、杠杆、经常项目顺差、资本项目顺差、资本流动和盈利都罗列了出来。在这个过程中很多大类资产之间的关系其实就生成了，比如说汇率关系、利率关系、通胀关系，其实都是经济一体化的结果。 生产国是处在被剥削阶层的，所以大家应该明白为什么美国以前买中国制造的东西很便宜。换句话说，生产国的经济是过热的，它的内生性循环从外部的经常项目顺差到资本项目顺差，到国内的加杠杆行为，再到国内的投资带动资产价格增长、带动储蓄增长，所以本国的利率和通胀都是高的。 所以说货币政策能够刺激经济增长，这句话我认为是伪命题。准确的说，是结构、分工、分配决定了经济增长。那个时候中国的利率水平很高，经济该增长的增长。再比如现在的越南，越南的民间借贷成本是17%、18%，很正常，大家再去看看银行的储蓄成本是多少、放贷成本是多少，经济该增长的照样增长。谁告诉你高息一定会抑制经济增长？ 如果一国的需求不来自内生，结构、分工不来自内生，都是外部力量给予的，很简单，它的经济一定是过热的。在这个过程中，大家会发现利差会推动资本项目的流动，资本会涌向生产国，生产国的实体部分投资回报率很高，所以双顺差或者单顺差就出现了。利率高，本币升值，相对来讲美元就是贬值的。 全球失衡的背后所以大家会发现，全球经济一体化分配下，美元相对来讲在好的时候一定是贬值状态。并不是说美国要贬值，而是因为生产国的利差高。分工决定了我们的利率、通胀，收入决定了我们的投资和杠杆，这就是我们整个状态的正反馈路径。 消费国靠资本项目维持债务、杠杆、收入和分配生产国靠双顺差维持，所以它就要牺牲劳动价值，所以说生产国的产品出口价格是偏低的。消费国大量讲口生产国的商品，所以消费国的通胀是偏低的，货币政策就会压在低端。 越低的利率越会刺激消费国总需求的扩张，消费国的总需求扩张又会转化成生产国的对外总需求，然后转化成生产国的生产、加工、制造、投资，生产国的经济就会过热，从生产的过热到资产价格的过热，利率水平就会更高，这个时候资本会继续涌进去套利，但是会从简单的实体投资转化成资产的投资。 这个时候，生产国对内就开始失衡，资产价格越高，实体投资回报率越低；实体投资回报率越低，本国的投资就会越倾向于虚拟性的资产，也就是包括房产在内的这些金融性资产，金融性资产的投资回报率高，本国就会跨过实体部分进入债务部分，进入杠杆部分。这张图跟前面那张图可以完整的对在一起，如果能做动画片的话，大家就会明白整个路径的传导。 生产国的债务增加、贫富差距拉大、资产价格抬升，最后会促使底层人民对总收入的要求增加，简单讲，就是我要加薪，我要更好的劳动待遇，劳动力成本的抬升会使得传统生产加工制造的实体部分外迁，这就叫经济一体化的第二次转移分工。前面几轮的生产国全部是小国，比如韩国、日本，日本产业一外迁，资产价格肯定跟不上了，没关系，技术、储备、人才，对外投资，它马上转化成了一个这样的角色。 但是中国的问题，也就是全球经济一体化现在面临的问题是，中国是一个超级生产国，我们的人口基数、对内贫富、分配，这个调整周期会非常长。面临的问题不仅仅是外迁，你不能够外迁。大家想想看，我们所有人都去干高精专，那是不可能的，大部分底层人民就会陷入我们之前提到的美国底层人民的状态，债务和收入之间不匹配，而且很难获得收入，因为你没法去跟东南亚、欧洲竞争了。你需要一代或者两代人才能够完成向中产、中高产和白领的转化。 大家有没有想过，十几亿人口全部转化成白领是个什么状态，你有多少的研发工作、服务性的工作能够去吸纳十几亿人口？没有制造业，问题就大了，唯一的方法就是低端被拿走，升级高端，而高端制造业将直接面临如果你这十几亿人口做了，德国人怎么办、英国人怎么办、欧洲人怎么办。这就是现在我们在这个框架中面临的所有问题。","link":"/2021/04/18/books/%E4%BB%98%E9%B9%8F-%E7%BB%8F%E6%B5%8E%E4%B8%96%E7%95%8C%E8%A7%82/"},{"title":"《快速阅读术》","text":"从“复制100%”到“邂逅1%”，读一本书，只为遇见一行文字。 像听音乐那样读书。 “流水式阅读”指的是这样一种读书方法：让书籍内容从心中“流过”，只要“流过”便有意义。 流水式阅读是信息大爆炸时代最合理并且可以“避免堆积”的阅读方式。 在“每天同一时间”读书。 固定“时间段以及情境”，让大脑产生“习惯的错觉” 可以快速阅读的书的特点就在于，贯穿全书的线索较少，相对独立的章节较多，无论选择从哪里开始阅读都能有所收获。 为写而读 每次推选一本书，并从中摘出令人印象深刻的一句话。 提高阅读速度的四个步骤：步骤一：仔细阅读序言和目录。 步骤二：仅读开头和结尾的5行。 步骤三：确定了关键词之后再阅读。 步骤四：使用多种阅读节奏阅读。 人类的大脑拥有不可思议的能力，能够自动补全遗漏的片断。在读到“A→C”这样的字幕序列时，我们的大脑就会自动推断“其间是B”。 一周6本，一个月25本，一年300本，进入一种“多读生活”的状态。听到“一年读300本书”的阅读目标，恐怕很多人都会感到吃惊，认为这是绝对不可能的事。 美国的人气作家迪恩·雷·孔茨在《畅销小说的写作方法》中曾经说：“要让主人公陷入绝境走投无路，最终皆大欢喜，否则难以让读者感到心满意足。”大意如此。此话一语中的。途中要起伏跌宕，扣人心弦，而最后一定要云开见日，完美收官。这种如释重负的感觉最引人入胜。 随着人生阅历的增加和年龄的增长，以及知识面的扩大，每个人最后必然都会找到自己专注执着的那一部分。 10年之后，我们还能够以13岁时的心境去读书。 如果能够保持这样的心境，那么，无论年龄或阅历如何，我们一生都能遇见令自己感动的书籍。","link":"/2021/02/13/books/%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB%E6%9C%AF/"},{"title":"《终身成长》","text":"当你有时间提升自己的时候，为什么要浪费时间一遍又一遍地去证明自己的杰出？ 即使是（或特别是）事情发展不顺利时也能拥有这种想要提升自己并坚持不懈的激情，这就是拥有成长型思维模式的人身上的标志。这种思维模式，让人们在人生遭遇重大挑战的时刻，依然可以茁壮成长。 更新鲜的是，人们对风险和努力的看法是从他们基本的思维模式中衍生出来的，并不是说，一些人碰巧认识到了挑战自我的价值以及努力的重要性。我们通过研究发现，这些想法直接来源于成长型思维模式。当我们教给人们成长型思维模式，告诉他们要重视个人发展时，他们关于挑战和努力的看法自然就会变成我们之前说的那样。同样，当我们（暂时）将人们放入固定型思维模式，告诉他们个人能力是不会改变的，他们会很快对挑战感到恐惧，并对努力感到不屑。 我思维模式的改变源于我的工作。一天，我的一个博士生玛丽·班杜拉和我想要弄明白，为什么有些学生如此专注于证明他们的能力，而有些学生却不在乎这一点，仅仅是热衷于学习。突然间，我们发现人们对能力拥有两种不同的理解：一种认为能力是固定的，需要被证明；另一种则认为能力是可以改变的，是可以通过学习来培养的。 杰出的社会学家本杰明·巴伯曾经说：“我不会将世界两分成弱和强，或者成功和失败—–我会将世界分成好学者和不好学者。” 很多成长型思维模式者甚至没有想过要攀上顶峰。他们能达到这个高度，是因为他们在做自己喜欢的事。讽刺的是：顶峰是很多固定型思维模式者渴望到达的地方，却是很多成长型思维模式者的工作激情带来的副产品。","link":"/2021/02/13/books/%E7%BB%88%E8%BA%AB%E6%88%90%E9%95%BF/"},{"title":"《经济机器是怎样运行的》","text":"桥水基金创始人 瑞·达利欧 发布的经济科普视频中所得。 视频链接 https://www.bilibili.com/video/BV1DT4y1A7Qt 短期债务周期 长期债务周期 人们因为离波动太近，无法感知波动。 央行通过调整利率控制短期债务周期内的经济运行。 长期债务周期下行时，也叫去杠杆化时期，因为利率已经为 0 不能再降，手段失效。 降低支出 削减债务 财富再分配 央行发行更多货币 经济增长率需要大于债务增长率，否则永远无法脱离下行周期。 三条经验法则： 不要让债务的增长速度超过收入，因为债务负担最终将把你压垮 不要让收入的增长速度超过生产率，因为这最终将使你失去竞争力 尽一切努力提高生产率，因为生产率在长期内起着最关键的作用","link":"/2021/03/29/books/%E7%BB%8F%E6%B5%8E%E6%9C%BA%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84/"},{"title":"《自律力》","text":"畅销书。 误区：自律不是强迫自己做事情 自由平等的灵魂才能在漫长的生命中互相欣赏，结伴同行。 你的外表是你最直观的名片。有一段话说：“以貌取人，绝对科学。性格写在唇边，幸福露在眼角。理性感性寄于声线，真诚虚伪映在瞳仁。站姿看出才华气度，步态可见自我认知。表情里有近来心境，眉宇间是过往岁月。衣着显审美，发型表个性。职业看手，修养看脚。”","link":"/2021/02/13/books/%E8%87%AA%E5%BE%8B%E5%8A%9B/"},{"title":"《苏世民：我的经验与教训》","text":"今年疫情严重，全球股市在触底之后出现了很大的反弹，各路股民见势进场。作为一个金融小白，在周围大佬们都在讨论股票的氛围下，终于开始接触理财。 前前后后读了《小狗钱钱》《富爸爸穷爸爸》《财务自由之路》，加上网上各种资料，也算是入了个门。 前些日子朋友推荐了这本《苏世民：我的经验与教训》，强推。读下来感触颇深。 理财书，也是人生之道同一本书，不同的人读下来，感悟差别会很大。 从我的角度出发，我是抱着要实现财务自由的想法读下来的。 总体感受，这本书也好，前面几本甚至说《小狗钱钱》这种理财启蒙书籍也好，没有读之前会觉得，里面会是满满的理财相关知识，读下来发现，这些书标着理财的标签，实际上大部分内容是在讲述，如何成为一个更好的自己。 讲理财，更是讲人生之道。 笔记结合感受 Stephen Schwarzman ，史蒂芬·施瓦茨曼 ，苏世民 作者是美国人，我猜 苏世民 这个中文名是 Schwarzman 的音译，shi was man，第一个音作苏，was man 作世民，没太去查是谁起的这个名字，猜测是清华前校长陈吉宁，清华苏世民学者计划。 给你敬佩的人写信或打电话，请他们提供建议或与其会面的机会。你永远不知道谁愿意跟你见面。最后你会从这些人身上学到很多重要的东西，建立你在余生都可以享用的人际关系。在生命早期结交的人，会与你缔结非同寻常的感情纽带。 这句出自 25 条工作和生活原则之三。之所以记下来，是因为我觉得这条对于我的挑战是最大的，从没有试过，但是绝对是一个很棒的做法。第一，你敬佩的人，说明你是有目标的，而且明确；第二，站的比你高的人看的一定比你要远，能交流是莫大的财富。 我相信教育是一门学科。这门学科的目标是学习如何思考。一旦掌握了这一点，就可以将其应用于学习投身一项事业、学习欣赏艺术、学习阅读书籍。教育赋予我们能力，让我们欣赏上帝之手写就的千回百折的剧情——生活本身。在我们离开教室后，教育仍在继续。与朋友联系、参加俱乐部，这些都能增加我们的知识储备。事实上，学习伴随我们的终生。我和我的干事们只是希望在座的各位能够正确认识教育的目的，并在你们的余生中遵循教育的基本原则，不断质疑，持续思考。 人生是一个不断学习的过程，现代社会更是如此。拥抱变化，持续思考，积极的面对未来。 那年夏天，我在一个夏令营担任顾问。在开车接我回家的路上，父亲告诉我，我即将进入一个他一无所知的世界。不管是在耶鲁的人，还是上过耶鲁的人，他一个都不认识。在这个新的世界里，他能给予我的唯一帮助就是爱我，让我知道我总有家可归。除此之外，我只能依靠自己。 开明的教育，没有隐瞒。我不清楚是苏世民的总结能力好，还是他的父亲原话就是这样，把我放到这个场景这个位置，我是说不出这样的话的。 “施瓦茨曼先生，我想跟你谈谈你论文的事。” “真的没什么好说的。”我说。 “为什么？” “我没什么见解，表达也不好。” “天哪，你真不傻。你比我总结的还好。所以我必须先教你如何写作，然后再教你如何思考。因为两者不能同时学习，我会给你接下来几篇文章的题目，我们先专注于写作技巧，然后我们再专注于思考方式。” 他看到我的潜力，并且着手系统地为我配置我需要的东西。我永远不会忘记他的耐心和善良。我开始相信，教学不仅仅是分享知识。为人师，就必须消除他人学习的障碍。就我而言，障碍是我所接受的教育与同班同学之间的差距。就在那一年，我入选院长嘉许名单，从一名差等生一跃成为班里的尖子生。 在海上待了三个月，再次回到单调的纽黑文，我感到非常不适应，满脑子都是弗洛伊德、港口、沙滩、酒吧，还有沿途接触的姑娘。整个夏天，在同学忙着打网球、在办公室工作时，我则在发动机房汗如雨下，在哥伦比亚的酒吧与人大打出手。我的暑期经历十分刺激又极具挑战性，并且每次都能幸免于难、死里逃生。相比之下，纽黑文的生活越发显得单调乏味，令人倍感压抑、苦闷。在《耶鲁每日新闻》的头版，我看到一则广告，说如果感到沮丧，那么建议去大学健康系看精神科医生。我决定试一试。精神科医生的装扮中规中矩，拿着烟斗，戴着领结。我跟医生诉说了我的那个夏天，那些航线、那些姑娘、那些港口，还诉说了我有多么不想再回学校。 “你当然不想回来，”他说，“为什么想回来呢？你不需要治疗，这只是戒断症状。坚持一下，把心收一收，过几个月就没事了。” 事实证明，他说的对，时间是最好的解药，渐渐地，我的心归于平静，我准备以自己独特的方式度过在耶鲁的时光。 愉悦之后的平淡也能算作戒断反应么。 做大事和做小事的难度是一样的。两者都会消耗你的时间和精力，所以如果决心做事，就要做大事，要确保你的梦想值得追求，未来的收获可以配得上你的努力。 时间和精力是有限的，首先要保证的就是不要浪费时间精力，接着是做应该做的事，下一步是做大事。 我从第一次孤独无助地在大食堂吃饭，一路走到现在，这真是一段值得回忆的充满喜剧色彩的旅程。 这段上下文是，苏世民第一天到耶鲁大学，一个人在食堂吃饭，没有认识的同伴很孤独。 接着几年的学习，期间学习、加入骷髅会、组织芭蕾演出等等，到毕业时，已经是明星学生了。 从他家离开以后，我跑去公共电话亭给爸妈打电话。我告诉他们，我去找哈里曼了，他给了我一些人生建议。他告诉我，我可以做任何我想到的事情。他说，在人生的某些阶段，我们必须弄清楚自己是谁。越早认清自我越好，只有这样，我们才能找到适合自己的机会，而不是活在他人创造的梦幻中。但如果我要把自己有价值的理想变为现实，成为一个有信息大量流入的如电话交换机一般的人，那么我需要去赚钱。 认清自己，认清自己的欲望，知道自己的目标，活的要有方向。 在面试了上千人以后，我已经形成了自己的面试风格。我会捕捉一系列语言和非语言的线索，我会尝试与候选人深入交流，然后观察他们的反应。我没有什么固定的套路，但在每次面试的时候，我的目标都是调动我的洞察力直入候选人的大脑，以评判他们的思维模式，了解他们真实的自我，判断他们是否适合黑石。 深入理解人的思想，评判他们的思维模式，了解他们真实的自我。 我们每天最好的 8 小时是在工作时间，工作和生活，是真实的我们。 对待工作和生活都应该认真积极。 至少，这个人得通过机场测试：如果我么能乘坐的航班延误，我是否愿意跟这个人一期在机场等候？ 当杰克开始跟我学习金融知识时，我只花了一分钟时间，就发现雷金纳德·琼斯的判断完全正确：杰克正是最佳人选。和杰克·韦尔奇一起工作，大脑就好像被接上了一个吸尘器，他会吸走你知道的一切。我再也没有见过像他这样的人，他对学习充满渴望，孜孜以求，总是无休无止地提出这样那样的问题；他善于思考，思维敏捷，能立刻理解一个想法与另一个想法之间的联系，即使这两个想法对他来说都是全新的知识。他就像人猿泰山似的以极快的速度抓着藤蔓穿梭于树木之间，从不失手，学的比我教的还快。 通过了解杰克，观察他的行动，我更为确信，商业中最重要的资产就是信息。你知道得越多，你拥有的视角越多，可以建立的连接就越多，进行预测的能力就越强。 杰克于1981年成为通用电气的首席执行官，开始主持公司的运营，成为美国历史上最伟大的首席执行官之一。由于彼得的引荐，我和杰克也建立了长久的友谊。几十年后，杰克依然令我惊讶不已。我在职业生涯早期就加入了一家大公司，遇到杰克是这一决策最大的收获之一。华尔街和商业都是很小的世界。如果你以一所优秀的学校或一家大公司为起点，与你们这一代最优秀的人交往，你将来就会不断地再次遇到他们。我在耶鲁大学、哈佛商学院、陆军预备队和华尔街早期结识的许多朋友现在都还是我的朋友。我在生命早期交到的朋友，用他们的信任和理解，以我无法预测的方式极大丰富了我的生活。 刚进入金融行业时，我对工作压力没有足够的思想准备。其实，每次谈判中的每一节点都是一场战斗，有人赢，也有人输。这个行业的人对瓜分蛋糕、给每人都分一点儿不感兴趣，他们想要的是整个蛋糕。我留意到，当周围人的音量飙升、脾气爆发，而此时又需要我做决策时，我就会心跳变快，呼吸变浅，工作效率变缓，自我认知能力和应变能力的把控也随之下降。 我找到的缓解压力的方法是专注于自己的呼吸，减缓呼吸速度，放松自己的肩膀，直到呼吸变得深长。这一做法效果惊人，我的思路渐渐变得清晰，对眼前形势的认识变得更为客观和理性，也更加清楚自己如何才能获得胜利。 面对压力，调整状态，专注呼吸，冥想 冥想真的是一个调整的好办法。躺在床上，随着呼吸放松每一块肌肉，包括眼睛。 休息也是技能。 这篇文章准确地描述了当时的我。对我而言，倾听他人的看法是理所应当的做法，这却让我在华尔街独树一帜。在与他人交往过程中，我从不急于表达自己的观点，极力推销自己手里的东西，而总是选择倾听。我会静静等待，关注对方要什么、想什么，然后着手满足对方的需求。我很少在会议上做笔记。我只是非常关注对方说话的内容和表达的方式。如果可以的话，我会尝试找到一些可以与对方产生联系的触点，一些一致之处，或一些共同的兴趣或经历，让公对公的交流变得更富有人情味。这种做法听上去是常识，但在实践中，显然很少有人能够做到。我会全神贯注地倾听对方，由此带来的一个结果就是，我可以回想起事件和对话的细节，好像这些细节已经印在了我的大脑里。许多人失败是因为他们从自身利益的立场出发，只选择性地听取与自己有关的话题，至于其他的话题他们总觉得“这对我有什么用”，他们永远无法从事最有意思和最有价值的工作。仔细聆听对方谈话的内容、认真观察别人表达的方式，这种做法能极为有效地帮我找到“我能提供什么帮助”这一问题的答案，这也是我一直以来在问自己的一个问题。如果我可以帮助别人，并成为解决其问题的朋友，那么其他的一切都会随之而来。 我能为别人提供什么帮助。此为合作之道。 人们最感兴趣的话题永远是”自己的问题“。如果你能发现对方的问题所在，并提出解决方案，那么他们一定愿意跟你沟通，无论他们的等级或地位如何。问题越困难，解决方案越少，你的建议就越有价值。为人人避之不及的问题提供解决方案，才是竞争最小、机会最大的领域。 重点，这段绝了 解决别人的问题，是机会；为人人避之不及的问题提供解决方案，是竞争最小、机会最大的领域。 那时，我已经非常了解自己了。从高中到耶鲁大学、哈佛商学院，以及在雷曼兄弟一次又一次的经历，事实证明，几乎任何困难都压不倒我。我可以构思出有价值的伟大设想，并把设想变为现实。阿姆斯特朗教练让我理解了坚持的价值，他教导我，额外的付出一定会换来意外的收获，每次都要让我多跑几英里，让我付出额外的努力。日久天长，日积月累，这些付出逐渐变成了一种志在必得的信念，一种锲而不舍的精神。这就是我无形的资产，当我需要的时候它就会在那里供我撷取，取之不尽，用之不竭。此时此刻，我已经想好利用这些无形的资产进行怎样的投资，以此推进我的职业生涯。 纯果乐的交易让我了解到，在压力面前，我的能力远远超过我的想象。彼得·彼得森向我展示了伟大导师和合伙人的价值。我与一些优秀人才建立了宝贵的关系，包括公司的同事和像杰克·韦尔奇这样的高管（杰克·韦尔奇后来不断出现在我的职业生涯里）。我曾经历过最好的华尔街，享有过执行复杂交易的巅峰，体验过处于宇宙中心的感觉，也有幸与世界上一些最有趣的人交流信息，沟通思想。 追求卓越的人往往对学习充满热情，孜孜以求，他们善于提问、勤于思考，能够敏锐地捕捉到想法之间的联系，从不失手。 创业6个月以来，我们已经拜访了每一个愿意见我们的潜在客户，但除了纽约人寿和大都会人寿最初的投资承诺外，我们还没有募集到1美元。在拜访保诚的时候，我们几乎跑遍了选择的18家目标公司。保诚是杠杆收购的头号金融家，是金本位。在这家公司里我们没有熟人，所以我们选择最后拜访这家公司，而且那个时候，我们的推介材料应该已经完善得差不多了。保诚集团副董事长兼首席执行官加内特·基思邀请我们在新泽西州纽瓦克共进午餐。 加内特吃的是金枪鱼白面包三明治，他把三明治切成了4块。我开始介绍的时候，加内特咬了第一口。在我说话的时候，他会咬掉一些面包，咀嚼，吞咽，一言不发。他的下巴会动，喉结也上下移动。在他吃了3/4的时候，我的推介做完了。加内特把最后一块三明治放下，嘴巴不嚼了。他说：“这很有意思，我出1个亿。” 他的语调如此随意，完全出乎我的意料。为了这1亿美元，我愿意在法律允许的范围内做任何事。这是一个伟大的范例，如果保诚认为在我们公司投资是个好主意，那么其他公司也会纷纷效仿。我想伸手抓住最后一块三明治，以确保加内特不会噎到。 吃三明治的细节记忆的如此清晰，可见这件事对其影响之大 另说，此人长期记忆力极好 人生中重要的一点是始终对新体验持开放态度，及时这些体验并非完全在自己的规划内。 拥抱变化，拥抱变化，拥抱变化 当第一次想到增加黑石的业务线时，我们的宗旨就是要有选择性地进入新领域。新业务不仅本身要表现出色，还能让整个公司获得更多信息、知识和技能。我们相信，我们从不同的业务领域学到的东西越多，公司的发展就会越好。这是哈佛商学院传授的一个理念：在商界，一切都是相互联系的。与竞争对手相比，我们寻求机会、分析市场的角度和方法会有所不同。我们的视角会更加多样、分析会更为深入。我们公司的信息来源越多，我们知道的就越多。知道的越多，我们就越聪明，想要与我们合作的人就越多。 我可以从他人的音调中听出细微差别，通过他们的肢体语言进行判断，这些信息跟他们汇报的内容本身一样重要。如果我们与分布在全球各地的办公室只是通过电话交流，那么我想我们很难保持公司投资流程所需的严谨性。视频会议技术的发展改变了我的想法。2001年，你可以实时与千里之外的人进行互动。那一年，我们在伦敦开设了办事处。 从他人的音调中听出细微差别，通过他们的肢体语言进行判断，这些信息跟他们汇报的内容本身一样重要。 他告诉这些新人，他们非常幸运，在职业生涯开始时，就能从这场历史性的经济危机中得到磨砺，如果他们够聪明，就会从中学到很多经验教训，并把学到的东西应用于自己的整个职业生涯。他说，成功会令人骄傲自满，不思进取。你只能从失败中学习，在逆境中成长。 成功会令人骄傲自满，不思进取。你只能从失败中学习，在逆境中成长。 我现在很确定中国不再是子孙后代的选修课程，相反，这将是一门核心课程，而我们设计的苏世民学者项目就是学习这一核心课程的最好课堂。 李光耀——新加坡国父 世界领袖与其他任何人都没有什么不同。如果你谈论困扰他们的问题，并提出一些有用的建议，他们就会倾听，无论这个人是民主党人还是共和党人、王子还是总理。 解决别人的问题，不仅能获得收益，还能获得友谊 最后，我提醒凯瑟琳：“你之所以晋升，是因为你的工作完成得极为出色。你拥有成功的天赋，无论是个人资质，还是专业技能，都能取得长足的进步，我对你有百分之百的信心。”下属需要知道你非常欣赏他们，你也需要让他们自我感觉良好，这一点非常重要，因为自信是出色表现的基础。 无论你的职业生涯如何开启，都要知道，你的生活不一定会直线前进，这一点非常重要。你必须认识到，这个世界是不可预测的。有时，甚至像你们这样有天赋的人也会遇到意料之外的磨难。在人的一生中，会难以避免地出现诸多困难和艰辛。面临挫折时，你必须要想方设法继续前进。能够定义你个人品质的，永远是你在逆境中展现的百折不回的精神和永不言弃的态度，而不是逆境本身。 把时间和精力投入自己热爱的事物上。热情所至，卓越必成，单纯为了他人的敬仰和尊重而做事，则很少能带来成功。如果你对追求梦想充满热情，如果你能勇往直前，如果你以帮助他人为己任，你的人生就会充实而有意义，你也永远有机会建功立业、成就不凡。你为他人付出的善意和努力，最终会给你自己、你所爱的人以及整个社会带来福报。 这两段是 苏世民在 清华苏世民书院 毕业典礼上的讲话","link":"/2020/08/30/books/%E8%8B%8F%E4%B8%96%E6%B0%91-%E6%88%91%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B8%8E%E6%95%99%E8%AE%AD/"},{"title":"《财务自由之路》","text":"美国佐治亚大学的托马斯·史丹利博士历时12年之久，致力于研究富人的生活。他得出了这样一个结论：这些人都属于世界上自身满意度最高的人，因为他们的梦想、目标、价值观和策略是协调一致的。 只有当你清晰地确定知道自己的价值观之后，你才能掌控自己的生活。 成功意味着得到你想要的东西，而幸福意味着热爱你所拥有的一切。 承担责任，拓宽你的可控领域。 从舒适的环境中脱离出来 解决问题 正确的提问方式 扩大你的个人范畴 我们充分利用自己的潜能时，会获得最大的满足感。我所理解的成功就是成为最好的自己。我全力以赴时，会感受到前所未有的活力。 持续不断地学习和成长 成长就是生命。持续不断地学习和成长意味着，感受到自身源源不断的活力，也意味着你能成为最好的自己。 你阅读的第一本书，应该是一本关于快速阅读的书，因为时间是无价的，只需要花3个小时来进行练习，你的阅读速度就会不断得到提升。 如果有机会结识有趣的人，一定要好好利用，不要将时间浪费在“闲聊”上。让Ta给你推荐两到三本Ta都铎的最好的书。接下来，问Ta为什么觉得这些书好，这样你就免费获得了一位优秀读者做出的总结。你在短短几分钟内就会知道，自己是否也应该读一读这本书。在这种方式的帮助下，我最终以书籍的形势接触到了许多宝藏。 同成功相比，我们更轻易地记住错误和失败，它们在我们大脑中留存的时间是成功的11倍。 将自己看作一个足够重要的人物，开始记录关于自己的日记。 大目标提升我们对机会的感知能力。许多人在某种程度上都倾向于对于自己有益的事物予以关注，而大目标对我们而言就是有益处的，让我们对更多的事物感兴趣，去发现更多的机会，结识更多新的朋友。 比赛是消极防御还是主动进攻，两者之间有着天壤之别 针对一项非必要的金钱支出，最愚蠢的辩解便是：“我需要它。我一定要买下它。”我们真正需要的东西其实是少之又少的。我们只是为了对自己的消费行为进行辩解，所以这样声称而已。 你应该付钱给自己，而且应该首先付钱给自己！我的建议是：自己给自己发薪水。将每月收入的10％存入一个独立账户中。这10％会让你变得安乐富足。余下的90％用于支付其他开支。 月初首先支付自己，自己比其他人更重要。 孩子应该在什么时候开始储蓄？从第一笔零花钱开始。你应该尽早将“支付自己”的理念告诉孩子。请让孩子接受有关储蓄和富裕的有用的信仰。我的一个朋友决定给他8岁的女儿10欧元零花钱，并让她在车上坐好。他对她说，他现在必须向她解释一些非常重要的事。他开车带着她去了城市中的贫民区。那里的一切，看起来黯淡无光。没有绿色，只有脏脏的泥土和混凝土。他问她，想住在这里，还是想住在他们那环境宜人的独栋宅院。他向她解释，她在未来10～15年还会和父母住在一起，但是之后就由她自己负责了。那时，她要么居住在这样一个可怕的环境中，要么住在一栋像他们家那样漂亮的房子里。并且，他告诉女儿，她现在就可以自己决定。他花了半天的时间来向他的女儿解释储蓄和“支付自己”的概念。他和她一起下车，穿过贫民区。他们一起在一家邋遢的饭馆里吃了午饭。当孩子感觉不舒服时，他说：“这里住的就是那些有10欧元就花10欧元的人。”回家以后，他们一起做了一个储蓄计划：女儿想将10欧元中的5欧元存下来。因为她每存1欧元，她的爸爸就会为她存50欧元，也就是说每月能存下250欧元。假设，我这位朋友和他的女儿坚持7年，然后他停止每月存250欧元的投资。即便如此，他的女儿在32岁之前也会获得超过200000欧元的金额。而我的朋友只需要投入21000欧元。更为重要的是：我朋友的女儿在很小的时候就轻松地学会了金钱的概念。也许她再也不需要从她父亲手上拿钱了。 我们真正需要的东西其实少之又少。我们只是为了对自己的消费行为进行辩解，所以这样声称而已。 影响复利的，只有三个重要因素：时间、利润率和投入 用72除以利率，你就能得到投入资本翻倍的年限。 我们的制度在很多方面就是使强者更强，弱者更弱。这看起来就是人类进化中的固有规律。 金钱只留给哪些了解并遵守资本法则的人。 一般情况下，只有当一个人有了一笔存款之后，他才会开始对高利润率感兴趣。在这之前，复利的力量只能与你擦肩而过。 资本主义使富人更加强大，会拿走那些无视其法则的人手上现有的东西。 想把某件事物变成必需品，我们就需要应用杠杆作用。这意味着我们要像使用杠杆那样施压。杠杆作用往往产生于：如果你不去做某件事情，你就会感受到巨大的痛苦；但是如果你做了，你就会感受到极大的快乐。 要使你的愿望变成绝对必需品，你的需求便是绝佳的理由。你为什么想要做，必须做某件事的理由。在需要做出决定的场合下，你应该经常使用”为什么“而不是”怎么做“来自我叩问。每一个达成过远大目标的人，都是将90%的精力放在”为什么“上，只将10%的精力放在”怎么做“上。 我们想要的东西（此处需要理解为消费品）并不等同于我们需要的东西； 消费债根本没有优点。更确切地说：消费债是愚蠢的行为，对人产生破坏性的效果，打击人的积极性，消磨人的精力，使人最终陷入一种恶性循环。 我们的大脑是如何运作的：我们可以为了避免痛苦、感受快乐去做任何事情。 对每一笔支出，都要问自己：这笔支出真的有必要吗？我必须花这笔钱吗？ 帮助并不会主动来到那些需要帮助的人面前，而是会来到那些值得获得帮助的人面前。 你的努力要以能够激发你动力的目标为导向：你在积累财富的同时也清除了你的债务。 以前我将自由定义为：能够去做自己想做的事情。而现在，我对自由的新定义是：自由意味着，自律地去执行我计划好的事情。 一天，我和我的教练一起去厨房取咖啡。他拿起一壶咖啡，直接就把咖啡往地上倒。我跳到一边，深怕咖啡溅到自己身上，同时喊道：“等等，等等，您还没拿杯子呢！”他无动于衷地继续倒咖啡。在我不知所措地望着地面的一摊咖啡时，我的教练缓慢而又有力地对我说道：“你看到了吗，舍费尔先生？咖啡就好像是你的才能，它们一文不值地躺在地上。没有倒进杯子的咖啡一文不值，再多也无用。没有自律，你的才能也是一文不值。”我的教练的做法有没有引起你的注意？他极为深刻地改变了我关于自律的信仰。在擦拭厨房地面的咖啡时，我第一次将自律看作我的才能的杠杆。自律就是力量，它决定了我们体内无尽的潜力的发挥程度。没有自律，任何一种才能都只能白白浪费。 知足常乐的人也是主动放弃的人。 专业人士是就算自己不认为自己是专业人士，也能够做到最好的人。 整天工作的人，没有时间来挣钱。 永远不要将你对自己的怀疑告知任何人，要展示自己的强项。人们不会追随一个自我怀疑的人，只会追随那些坚强不屈的、对目标坚定不移的人。 长时间用小火煮饭的人，他的火最终会完全熄灭。 刻不容缓的去处理事情 所有值得你去做的事情都值得你好好地去做。 一位投资者会在买入的时候获得利润，而非在卖出的时候。 投资应该使金钱流入你的口袋，而债务是金钱流出你的口袋。资金流动的方向就表明了这是一笔投资还是一笔债务。 我们所有人做的事情。往往并不正确。 如果每个人都集中全力做自己擅长的事情，就能使自己的生活质量得到巨大提升，一直以来都是如此。别的领域则委托其他擅长的人来做。在我认识到这一点之后，我便为自己找了一位优秀的值得信任的顾问。这是一个十分正确的决定。 他说：“有疑虑是很正常的，其实这就是对未来存在的消极想法。有两件事很重要：第一，除了我之外，你不能告诉任何人你对未来的疑虑；第二，每当你内心产生怀疑时，最好马上给我打电话。这样我们就可以马上谈论一些关于未来的美好愿景。” 你必须为自己创造出一种能促使你成功的环境。 你站上桌子，然后请一位比你瘦弱的朋友站到桌子前面，和你一起进行力量较量。你试着将他拽上桌子，而他试着将你拉下桌子。谁会赢呢？物理学原理是：将某人向下拉比将他往上拽会更容易。长时间比下去，你肯定赢不了。对手只需要“保持不动”，一直等到你筋疲力尽，他就赢了。与此同理的是：如果你身边都是比你贫穷的人，那么你就会停滞不前。如果你身边都是比你富有的人，那么你也会变得富有。 那些没有亲身经历过的人没有权利给建议，你也绝对没有理由去听从他们的建议。","link":"/2021/02/13/books/%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"},{"title":"《超级快速阅读》","text":"在调用信息的阶段，大脑的任务就是按照实际需要重新整理已保存的信息，然后将其输出，用来解决具体的问题。 比如，如果我们在学习的时候压力过大，或是感觉到竞争威胁，我们的脑干就会本能地活跃起来。我们的大脑一旦切换到这种应激状态，血液会从大脑外部的其他分区流出，逐渐向内部聚集，最终集中于脑干部分。这时，这个毫无学习功能的脑部分区就会成为主导，我们会感到自己无法思考，也学不进新的东西，轻则学习效率下降，重则根本无法进入工作或学习状态。对于现代人来说，这种情况大多出现在考试前或是在工作上遇到新挑战时。 每当人脑接收到一条新信息时，缘脑就会首先被激活。如前文所述，这部分主要负责人体的生理及心理平衡，而人脑所有分区从本质上来说只有一个功能，那就是确保生命安全。 因此，缘脑必须充当信息过滤器，将新的信息与既有经验进行分析比较。如果得出的结论是正面的，也就是说同类的信息曾经给我们带来积极的影响，那么缘脑就会开绿灯，允许这条信息传递到大脑皮层，等待进一步深度处理，我们也会从主观上感到愉悦，产生处理这条信息的动力。 人脑在预先知道时间有限的情况下会自动提高工作效率，以便更好地利用有限的时间。 逐字阅读仍然不失为一种毫无副作用的健康催眠法。 女人的视线要比男人宽得多。女人整天待在家里，负责保护族群居住的山洞免受野兽的侵袭。她们必须时刻留意洞穴入口以及外围区域的大小动静，视线范围就得到了很好的锻炼。在采集野果和照看孩子时，较高的视野拓展能力也是不可忽视的优势之一。人类进化至今，这种能力依然深深地扎根在每个女人的基因里。 与女人相反，男人总是外出狩猎。 他们必须把视线聚焦在距离较远、范围较小的区域内才能找到猎物，并且还要一直紧紧地盯住目标不放。 长此以往，男人的视线就一直处于紧张的远距离聚焦状态。不难想象，如果一个猎人老是因为路边草丛里的野果分心，那全家人迟早都得饿死。 思维导图就是大脑的工作模式 只要个人的能力符合客观挑战的程度，任何一个人在从事任何一项活动时都有可能进入理想的心流状态。 一直以来，肾上腺素这种人体自然分泌的激索都有另外一个十分贴切的名称——应激荷尔蒙，因为这种激素能够加速心跳，加快血液循环，提高肌肉的反应速度。此外，肾上腺素还能加快分解体内的脂肪和糖类，在紧急情况下为身体提供更多的能量。 从生物遗传学的角度来看，肾上腺素绝对是人类生存繁衍的一大功臣。想象一个原始人正在森林里采集野果，突然树丛中跳出来一只剑齿虎。这个可怜人肯定会觉得不知所措。可就在他还没来得及开始理性思考之前，人体就已经像我们上面描述的那样，在几秒钟的时间里分泌出了大量的肾上腺素，为下一步的打斗或者逃跑做好了准备。 只可惜，现代人的压力来源远远不止一只剑齿虎那么简单。考试压力，工作压力，家庭责任，今天被上司批评了，明又要交论文……根本数都数不清。然而我们的身体可分不清哪些压力是老虎惹的祸，哪些压力是因为考试不及格，不管三七二十一都会释放出大量的肾上腺素。 这些荷尔蒙会麻痹脑神经之间的神经树突，阻碍大脑中的信息传递，某些负责促进思维的神经递质也会立即停止分泌。 也就是说，人体内的肾上腺素水平越高，人的思维能力和接受新信息的能力就越低。 此外，我们还得了解肾上腺素的另外一种表现。 在压力越来越大的情况下，我们对自身情况的主观感受往往会越来越偏离客观事实我们越是坐在那里胡思乱想，越会觉得时间不够，要学的东西太多，要看的书看不懂……这种现象其实也是人体生存机制的表现。 一个人遇到的情况越紧急，他的大脑越会刻意屏蔽相关的信息。举个例子来看容易理解**这种逃避现实的效应**了。大家肯定都有过类似的经历：我们读到课本的某个段落，觉得这部分内容简直如天书一般、于是就在潜意识里试图说服自己，这部分内容太多啦，我就算能看玩也肯定看不懂。 可是一觉醒来，等我们清醒了，重新回过头来阅读这篇文章，就会恍然大悟，发现一切问题都迎刃而解了。与此同时，我们也会觉得昨天的自己那么紧张，简直太可笑了。 运动减压，足够运动量的人的肾上腺素一般都会处于稳定的较低水平。运动不但是一种预防压力的有效措施，还可以让你的心态更加平和，情绪更加稳定。 越是无知的人，就越喜欢对那些自己一无所知的事情评头论足。 呼吸放松法 吸气和呼气的节奏越慢，你就会越放松。请你连续练习2~3分钟。在练习的同时，你也可以想象自己正躺在一片宁静的沙滩上，海浪和自己的呼吸同步，正在缓慢的拍打着沙滩。 这里我有必要解释一下α波。在脑电图上，人脑会产生四种不同的脑电波。其中振动频率最高的一种叫做β波，代表人在清醒状态下较为紧张的脑部活动状况。当我们处于较为放忪的状态时，脑电波就会进人α波的区间。如果振动频率更为缓慢，脑电波就变成θ波，人会感觉睡意朦胧。最后一种δ波代表大脑已经进入深沉睡眠或无意识的状态了。 当脑电波振动领率处干α波区间时，我们的大脑能轻松地接受新知识 。 音乐放松：几乎所有巴洛克时期的慢板或柔板乐曲的速度和节奏都至少能够在一段时间里引导我们的大脑进入α波状态。图 2-10：科雷利：12首大协作曲(作品编号6)中的所有慢节奏乐章。 亨德尔：D大调第三好吉他协奏曲，柔板乐章《皇家烟火》。 泰勒曼：g小调第十七号大键琴幻想曲，柔板乐章；G大调中提琴，柔板乐章。 巴赫：《哥德堡变奏曲》，咏叹调；f小调第五号钢琴协奏曲，柔板乐章；F大调大键琴协奏曲，柔板乐章；D大调第三号管弦了组曲。 维瓦尔第：小提琴协奏曲《四季。冬》，柔板乐章； D大调吉他协奏曲，柔板乐章；e小调长笛协奏曲（作品编号44），柔板乐章。 兴趣减压法：除了听音乐，还有一种舒适的减压方法，就是借助人体自然分泌的一种促进神经传导的物质——内啡肽。这种激素堪称“人体的天然鸦片”，能够有效中和血液中的肾上腺素，从而起到减压的效果。 科学证明，每个人在做自己喜欢做的事情时，体内都会自动分泌内啡肽，所以不要一遇到困难就只会做在那里干着急，不妨先放下手头的工作，做些让自己高兴的事情。不管是动手给自己做上一顿美餐，跟朋友聚会谈心，还是去看一场有趣的话剧，只要是你自己打心底里喜欢的活动，都可以起到相同的作用。 阅读高手在阅读的时候会尽觉少地移动自己的视觉聚焦中心。 正确、深刻理解文章内容是长期记忆的基础。 在关干记忆技巧的书里，我们经常会读到这样的内容： 通过阅读得来的信息，大脑大约能记住10% ； 听来的信息，大约能记往20% ； 从图片或表格中获取的信息，大约能记住30% ； 边听边看的话，大约能记住50% ； 如果在被动接收以后，又向其他人主动讲述过一遍，大约可以记住70% ； 如果经过实际应用，大约能记住90% 。 可是如果这位营销员察觉到了你的心不在焉，他就可以有意地作出一些抬手的动作。正如我们在前文提到的那样，人的视线总是会跟随着移动的物体。那么，只要他随意地抬一抬手，就能将你的眼球引导到左上方或右上方这两个与视觉渠道相连的方向上去，这样一來，你会不知不觉地进入视觉模式，跟随他的描述去想象那辆汽车的各种画面。 尽管我们在接受或表达信息时总会用到这几种不同的感官渠道，但每个人或多或少总会表现出一定的倾向。 所谓自律，就是一种反复完成同一任务的能力。 自律分成三部分：明确目标、坚持不懈和自我控制。 根据波迪安的理论，所谓自制力是指一个人的精神或心理有足够强大的力量，不会被自己的任何一种冲动或肤浅的愿望牵着鼻子走。 他的惊人记忆力主要源于他在阅读和交谈的过程中会自然而然地在脑海里生成相应的图像。 而且，这些图像都极为清晰细致，就像一张张高清照片，他还会给这些照片加上其他的感官刺激，例如周围环境中的声响、自己当时的心理感受、鼻子闻到的气味、嘴巴尝到的味道等。 此外，鲁利亚还发现，谢雷谢夫斯基这种处理信息的方式完全是在潜意识下进行的。他并没有接受过任何系统的训练，只是小时候意外发现了这种做法能让自己记得更淸楚一些，从此便养成了习惯，只要接触到外界信息，他就会自然而然地使用这种方式来处理并且记忆信息。 如果你感觉疲惫不堪，甚至出现腰酸背痛或是头痛的症状，那就说明你的学习方式确实出了问题，你的身体已经不堪重负，表示抗议了。长此以往，你很可能再也找不回那种正常的健康的学习状态了。 请大家想象自己正在热带的某个岛屿上度假，你身穿鲜艳的比基尼，浸在清凉的湖水中，现在，请你朝着湖边的小瀑布游去。—-瀑布练习 其实，我们可以随时随地训练自己的视觉渠道，尤其是在等车或是等人的时候，我们更应该充分利用这些零散的时间，仔细观察一下周围的事物。车站的大幅海报、街对面的某栋大厦都是很好的练习素材。 你可以给自己限定一两分钟的观察时间，看后闭上眼睛，在脑海里尽可能细致地回忆刚才看到的毎一个细节。然后睁开眼睛，稍微比较一下，再闭上眼睛，补充第一次回忆时遗漏的细节，循环往复，直到几分钟后真实的图像与自己的想象完全一致。当脑海中头一次出现一幅清晰的画面时，你一定会感觉到由衷的快乐和满足。 针对阅读时的默念，也是同样的道理，我们既不能完全压抑下意识的默念，也不能从头到尾在心里絮叨个不停。我们可以把默念当成一支无形的荧光笔，只在遇到关键词和重点内容的时候拿出来画上几笔，这样才能在不影响速度的前提下，起到辅助理解和加深记忆的积极作用。 可以说，超短时记忆既负责接收有用的信息，也负责有意识、有目的地将其转化记忆。 完成这个步骤以后，我们的大脑中就形成了一份原始电脉冲的备份，这种临时储存的物质叫做RNA基质蛋白，是短时记忆的物质基础。 由此看来，短时记忆实际上是将信息变为大脑事件储存的内容的一个转化步骤。在这个步骤，信息被第一次过滤，只有有意义的一部分信息才能够通过筛选，变成短时记忆。 这说明，真正的学习理解并非与阅读同步，而是在我们休息的时候完成的。在阅读的同时，我们的大脑不断地接收新的信息，这些信息在脑子里打转，却没有机会与既有的知识网络结合在一起。因此在接收了一定量的信息以后稍作休息，反而能够给大脑留出处理信息的足够时间。 一般来说，连续学习45分钟以后应该站起身来，休息一下。每次休息的时间不必太长，5分钟左右就足够了。 这种劳逸结合的学习节奏还能帮助我们调整自己的心态和精神状态，有效地避免过度疲劳。此外，大家完全不必担心这么频繁的休息会影响注意力，因为如果你没有及时休息，你的大脑也会在潜意识里给自己放假，你的注意力反而集中不起来。 因此，我建议大家在遇到上述情况时不要急着拿起话筒，先稍微回想一下自己手头的工作做到哪一步了，然后再开始处理电话里的事情。 硏究指出，毫无计划的人最多只能完成30%—40%的工作。尤其是那些成天坐在图书馆里的学生，往往一天只有两三个小时的高效学习时间。尽管他们看上去十分勤奋，每天的学习时间高达8个小时，但其中不知道有多少时间是在做白日梦、处理零碎的小事、无所事事地乱看网页和玩电脑。 所谓的时间管理，并不是要一分一秒地计划好你的全部生活，剥夺你的所有自由。时间管理的真正目的在于规划好用于学习和工作的时间，好让你有更多的空闲时间来陪伴家人，享受人生。 那么，现在就让我们一起来看一下设定目标时需要注意的原则： SMART原则： 这5个字母分別代表以下这5个德语单词： Spezifisch（具体specific），Messbar（可衡量Measurable），Anspornend（积极），Realistisch（现实）和Terminierbar（有时间限制）。 而在时间管理这个领域，我们会发现在投入的所有时间中，仅有20%的时间能够带來80%的效益，这是因为我们把80%的时间花在鸡毛蒜皮的小事和无关紧要的问题上。 如果你同时接到许多任务，需要在短时间内整理出头绪，找到工作的切入点，那就先把所有任务都列出来，一一分析其重要性和紧急程度。这个法则被后人统称为“艾森豪威尔法则” 。 A 任务——既重要又紧急的任务；B 任务——重要但不紧急的任务；C任务——紧急但不重要的任务；垃圾任务——既不重要又不紧急的任务。 其实，我们的大脑最擅长根据预先的指令来充分利用时间。 要知道，越是这种一门心思扑在工作上的人，往往越没有工作效率，整个人的情绪也会变得消极，近年来常见的“身心耗竭综合症”（Burn-Out Syndrom）就是过于偏重工作而忽咯了其他两个方面的平衡导致的。 人的睡眠过程是十分奇妙的，尽管我们的身体已经进入休息状态，但潜意识仍然能够继续保存存我们睡觉前接收的信息，自动加以处理，从而在我们不知不觉中加深了对信息的理解和记忆，大大提高了复习效率。 休息质量的关键是睡眠的深浅，而不是具体时间的长短。 当涉及某个具体的学科领域时，由于其中的知识点间存在严密的逻辑关系，所以就不能单纯地死记硬背知识点出现的先后顺序了。但在浏览其他关于学习技巧的书籍时，我发现了作者混淆了这两种信息类型，试图将这种记忆方法应用到学习当中，这是绝对不可取的。—-是这样的。 结果发现，我们在学习知识事的记忆始终建立在两个基本原则之上： 其一是将新信息与既有的知识网络联系在一起，这种思维过程我们称为“联想”； 其二是我们必须充分调动五大感官，完成共感这一步骤。","link":"/2021/02/13/books/%E8%B6%85%E7%BA%A7%E5%BF%AB%E9%80%9F%E9%98%85%E8%AF%BB/"},{"title":"《超级记忆-宫殿记忆法》","text":"学会记忆术、思维导图、快速阅读。 无意识无能，有意识无能，有意识有能，无意识有能 纯声音记忆，即我们常说的机械记忆模式。《大悲咒》《楞严咒》 我们人类的大脑一共有三种记忆模式，其中最根本也是最基础的就是声音记忆。我们平常管这种记忆方法叫死记硬背。我们之所以拿这种完全听不懂的咒语来测试，就是为了排除其他记忆方法对记忆效果的影响。在记忆这些咒语的时候，没法理解，没有文字，而且只能靠耳朵来听，所以是纯粹的声音记忆模式。 有13个外表一模一样的小球产品，其中有一个是次品，其质量与其他12个略有差别，但不知道是重还是轻。假定这13个球上都有标号，现在给你一架天秤，只能使用三次，把这个次品小球找出来。注：必须要考虑到所有的可能。 这是一个利用催眠技术进行的简单的意向对话的过程。公路上出现的石头就是自己前进道路上的困难。如果总是试图绕过或者躲避困难，困难就还会以不同的方式来阻碍自己前进。只有彻底地把困难解决掉，才能让自己行进得更顺畅。房子里的箱子实际就是自己的目标，也可以理解为自己想要的东西。我们在定位目标的时候，会有很多很多的诱惑来干扰自己，让自己迷失方向。只有坚定自己的目标，让它更清晰、更明确，才有可能通过自己的努力去实现这个目标。 图像记忆 在记忆的时候多加细节描述词。 串联联想：所谓串联联想，就是把需要记忆的单词逐个转换成图像，然后通过一定的相互关系串联在一起。 下面的几条口诀希望你能牢记在心。 每一个词语必须有完全独立的清晰图像。 每个图像只能而且必须与前后的图像发生关系。 尽量不要出现没有关系的图像。 想象要夸张甚至脱离现实。 最好加入一些感觉。 “这种快速阅读又叫潜意识阅读，就是你在看书的时候大脑都可以神游出去，只要眼睛能看到书本上的东西就可以。” 波动阅读术 三遍阅读法：影像速读、波动速读、结构化速读 快速记忆法1：联想编故事。对于顺序记忆的词模式，可以使用。例如黄河流经的省份： 青海 四川 甘肃 宁夏 内蒙古 陕西 山西 河南 山东。技巧：1.串联联想的图像越具体，图像就会越牢固； 2.串联联想的时候，不相邻的词语不要有图像上的联结； 3.不要出现没有关系的图像；4.调动全身的视、听、味、触、体等多个感觉器官参与联想； 5.想象的世界不存在不合理，什么事情都可以发生。 快速记忆法 2：打桩链接。适合顺序记忆 人体桩 虚拟桩 实景桩 数字桩","link":"/2021/02/13/books/%E8%B6%85%E7%BA%A7%E8%AE%B0%E5%BF%86-%E5%AE%AB%E6%AE%BF%E8%AE%B0%E5%BF%86%E6%B3%95/"},{"title":"《陆奇-数字化未来-摘录》","text":"陆奇身上的亮点一、不断学习二、搭建系统： 身体系统 设计一个“马拉松快步跑”的时间管理方法和心态。 第一：要意识到这是一场马拉松，不是一场短跑。 第二：这场马拉松的速度需要很快，因为现实世界中，任何高价值的东西——创业公司、大企业的好岗位等——都会有非常激烈的竞争，你需要保持速度并持续领先。 设计这样一个工作节奏和时间管理方式，很类似在高速公路开车。 陆奇说：“你需要保持一个均匀的高速，然后时不时的加速一下，再回到之前均匀的高速。你要避免过度频繁的加速、减速。就像一辆车，如果一直都是高速前进，只是偶尔减速一下，这对与一辆车的损耗是很低的。但如果一辆车过度频繁的突然加速、减速，会对这辆车带来巨大损耗，不用多久车就可能垮掉。 因此，你需要设计属于你自己的一个工作和生活节奏，这种节奏是你可以保持住的高速，而这个高速可以给你带来最大的效率。同时，你也需要设计这个日程节奏，让它可以应对突发变化，可以时不时的冲刺一下，比如偶尔过度加班让工作在截止日期前完成，然后迅速回归之前的速度。必须避免经常性的透支，经常性的拼命追赶截止日期，经常性的处于疲累状态。身体和精神上偶尔透支可以补回，不可长期透支。” 跑一个高效率、可持续、并且可以应对临时突发状况的马拉松才是关键。 我理解就是做好身体的可持续发展。 家庭系统 找到对的人，互相支持。 人脉系统 双赢思维。双赢是最好的选择 文章摘录陆奇：在未来，究竟哪种职业创造财富的机会最大？ 美国物理学家理查德·费曼说：“如果我没能把某件事建立起来，我就没法理解。”这句话十分重要，它揭示了一种认识世界、观察研究对象的方法：针对任何一个复杂的问题，可以把它进一步拆解为子问题，针对每一个子问题，又继续拆解为子问题的子问题，如此穷尽问题到不能再拆解为止。然后，针对每一个子问题的答案都想好方法测试验证，直至把所有子问题的答案都验证清楚正确了，才能说真正弄明白、搞清楚了最初的问题。这是一种线性思考的方法，可以帮助你把所有问题都探究到本质。这种思考方法已成为我的一种习惯。研究数字化，我也采用这种方法。 数字化是什么？其本质到底是什么？我认为数字化包括六个核心步骤，缺一不可。 第一，获取（Capture）信息。搜集获取某现象的相关信息是数字化的第一步。 第二，表达（Represent）信息。搜集信息后必须把特定信息表达出来，可以用各种形式表达，比如二进制、符号和向量等。 第三，存储（Store）信息。必须把现有信息存储在某个有效的媒体上，纸就是存储信息的一种媒体。 第四，传送（Transmit）信息。在使用信息时，需要对信息进行传递。 第五，处理（Process）信息。这是数字化过程中最为核心的部分，对信息进行处理，通常是利用数学知识或模型通过计算对信息进行处理。 第六，递送（Deliver）信息。这是把处理好的信息传送给某个特定终端，该终端能够达到我们人类所需的目标。 我的这一思考角度深受大卫·克里斯蒂安教授的影响，其实盖茨很早就给我推荐大卫的书籍以及40多个小时的视频，他对盖茨也有很大影响，可惜我一直没有看。他提出了一个简单却视角独特的概念——“大历史”，他认为如果不从物理世界的宇宙起源开始是无法研究人类历史的，我对此深表赞同。他认为，历史的起点在物理世界、化学世界、生物世界。在物理世界里，只有两样东西恒久不变：能量和信息。能量比较容易理解，而信息可以转化为知识。一种有效的可以解决多种任务的表达方法，就是知识，而知识是一种潜在的能量。 举例来说知识为什么是潜在的能量。假定有两个人，他们的任务是搬动一块很大的石头，一个人懂杠杆原理，另一个人不懂。懂得杠杆原理的人用一根木棒很快就可以搬动石头，不懂杠杆原理的这个人就永远搬不动，所以说知识是潜在的能量，这是很重要的一个概念。 宇宙起源理论认为，复杂系统是智能的，它能针对环境的变化而做调整。其智能之处就在于，用能量加信息来减熵。人类是一个复杂系统，人类所做的一切都是减熵行为，基于这一宏大的理论背景，不变的不变就是能源加信息。人类社会就是一个超级复杂的系统，而人类社会的长期驱动力，第一是追求权力，第二是追求财富，第三是追求知识。人类的历史证明，人类永远在追求这三样东西，无论是个人、组织还是国家。 人类社会是由通用技术的发展推进经济的发展，基本上可以划分为三个阶段：农业时代、工业时代，以及我们现在进入的信息和知识经济时代。 农业时代基本上由太阳能驱动，太阳能是人类可以使用的免费能量，基本上只要用劳力就可以，不需要大规模的其他技能。因此，农业时代这条曲线很扁。 工业时代持续发展了300多年，最大的核心驱动其实是化石能源，一开始是煤、汽油，后来变成电，可以输送到任何需要的地方。工业社会主要是化石能源加上人的技能（技能也是一种知识），工业社会有大学，大规模训练培养厨师、裁缝、工程师、律师等具有各种专业技能的人员。因此，工业时代这条曲线开始上扬。 接着人类进入了这条增长最快、最陡峭的曲线，它是由大规模的信息、数字化来驱动的。计算机的发明，使得获取信息、处理信息的能力以惊人的速度高速发展。第三条曲线仍然是以化石能源为主。人们已经知道，化石能源是有时限的，我认为假以时日新的能源结构必然会出现。 可见，当前的数字化大浪潮之所以来势凶猛，会对人类社会产生重大影响，原因正在于此。从宇宙起源开始的大历史发展演化说明，当前的数字化浪潮是历史的必然，势不可当，不可逆转。 过去60多年的历史上，数字化进程一直是由计算平台来驱动的。由于高科技一次又一次突破，平均12年左右会产生出新一代的计算平台。图10.2就充分展现了计算平台演化的发展路径。 第一代是IBM（国际商业机器公司）单板的个人电脑；第二代是微软、苹果的个人电脑，这时的个人电脑有了显示器，同时有局域网；第三代是PC互联网；第四代是移动和云；而我们刚刚进入第五代AI/5G +边缘计算的早期。 在技术方面，“Mobile/Cloud”计算平台也有很多提高。 一方面，硅晶片不一样了，原来是英特尔主导的硅晶片X86，但在移动时代它彻底丧失了机会，现在是ARM（处理器）+ SOC（芯片），加以深度学习为主的计算，相应的操作系统也变了，在此再不赘述，可以参见表10.3。 在此，我想重申构建一个全新聚合信息体系的重要性。纵览欧洲历史，在印刷术发明之前，是教廷掌控一切，信息传送只在教堂之间，也只有教堂才能获得信息。印刷术发明之后，除了教堂，国王、贵族和精英也加入传输信息和获取信息的行业中，信息被贵族控制。从某种意义上说，现代美国依然与此相差不远，信息被精英控制。随着数字化的深入与扩展，精英对信息的控制被彻底打破了，搜索引擎是打破精英控制信息的第一步，随之而来的社交平台比搜索引擎走得更远。 在这个信息聚合体系底层的是“数字化基底”（Digital Substrate），这是一个集成的数据系统，无论是某个搜索引擎，还是某个社交平台，其信息架构都是这样的。重点在于这是一个公开的信息架构，它清楚地勾勒出某个社会现象的数字化流程和闭环结构。只有形成闭环的社会现象，才能具备自动自我迭代、进化演变的智能能力。其内在一定有以下几个子系统。 第一个子系统是观察系统，观察世界或人的行为，获得信息。第二个子系统是智能系统，把获取的数据进行表达、存储、做模型计算（处理），最后进行传输。第三个子系统是动作系统，负责与用户或环境（物理世界）进行互动。第四个子系统是运营系统，由人，也就是这个系统的作者通过运营系统来维护、更新这样一个数字化的生态体系。 图10.3是对这一信息体系结构的形象化的展现，勾勒出数字世界与物理世界的系统性融合，彼此交织，密不可分。其中有四个子系统，第一是动作系统，用户在体验终端上使用App获得信息，用户行为被数字化了，这些数字化行为信息到系统后，进行数据处理，传送到智能子系统，在这个智能子系统中，这些接收到的信息被表达出来，接着用机器学习的算法来建模，同时记忆和存储。有了这些模型（就是知识）之后，再把这些知识传送给客户，与此同时，用户也可以跟其所处的世界进行互动。最终还有一个运营系统，以搜索引擎为例，这个系统就是谷歌，谷歌里面有开发人员、销售人员、市场人员、客服人员，谷歌持续不断地去更改搜索引擎的代码。 图10.3中的虚线矩阵框围住的上半部分是物理世界，实线矩阵框围住的下半部分是数字世界，数字世界和物理世界越来越重叠，无法完全分开。特别要强调的是，“流入”是把原子变成二进制的数字，也就是把物理世界变成数字，“流出”是把数字变成物理世界的看得到、摸得到的原子，建立了一个反馈闭环来产出数字世界里关于该社会现象的知识，进而帮助到物理世界里的人。 最重要的是，这是一个通用的结构，任何一个社会现象的大规模数字化都永远适用于这个信息聚合体系，它是物理世界和数字化世界融为一体的核心界面和核心信息架构。有了这样的架构之后，人类可以更好地理解并管理数字化的进程，让数字化真正服务于人类。 在此，简单分析几个案例，说明这一信息架构是如何运转的。 第一个案例是互联网与搜索引擎。 搜索引擎的世界就是万维网，通过爬虫抓取很多关键信息，用户输入关键词、点击搜索页面结果，这些行为被数字化。在智能系统部分，核心是要做搜索结果的排序、一系列的建模等，形成一个反馈的闭环。图10.4是搜索引擎的数字基底结构图。 重点讲解搜索引擎的几个核心计算。第一，要核心计算信息主题性。它要计算出每个网页是关于什么内容的。第二，要计算信息的质量。第三，要计算信息的可信度。信息有文字、图片甚至视频等多种类别，需要不同的计算模型。 除了对信息（搜索对象）进行计算，还要对用户意图进行计算。用户输入某个关键词究竟代表的需求是什么，想要做什么？那搜索引擎知道什么呢？它知道的东西太多了，知道世界上人的需求、兴趣，知道信息的供给、信息的获取。我曾经是一名搜索引擎工程师，当时就觉得世界上无数的人，每天在向你倾诉他想要什么、需要什么。其实，每个人在生活里都有一些所谓不可说的秘密，不会跟任何人说，即使对最亲密的妻子、爱人、亲人也都不会说，但是你会跟搜索引擎讲，因为你想找信息。搜索引擎开启了一个非常神奇的数字化世界，它无所不知，它所累积的大数据，可以说描绘了社会的全貌。 第二个案例是以优步、滴滴、Grab5（租车服务供应商）和Lyft6（来福车）为代表的城市交通。 这也是典型的数字世界和物理世界融合的案例，其核心要做的是获取乘客、司机的位置，然后计算每段行程需要多长时间，再用经济学和计算机科学综合测算定价，当然现在也把评判行程安全系数纳入计算范围，总之这些都是通过数字化的方法来进行预估的。个中细节我不再赘述，详情可以参考图10.5。 特别想指出的是，从长期来看，这样打通数字世界和物理世界的公司十分有前景。原因何在？优步和滴滴这样的企业拥有太多信息数据，知道什么时候、什么日期有这样的人会从这里到这些商店、那些医院，全面掌握了非常多的社会经济行为信息，据此可以做很多推理，衍生出很多业务，它们完全可以做大生态的生意。 之所以会提出这个构想，也与我自己在微软的工作经历分不开，我曾花了几年时间主导设计了微软的Office 365（办公软件），它的核心后端其实就是这样一个体系。在评判任何一个企业前景的时候，都要洞悉其本质数字化了什么，了解其核心是如何把物理世界和数字世界连接融合在一起的。 正如此前所说，这是一个通用的结构，诸如信息推荐、社交平台、零售、教育、医疗、人的身体，抑或微生物世界里的客体，微小到纳米级，或是更大的物体，都可以被数字化，每个城市、每个国家、天气甚至整个地球也都可以被数字化，用上述的体系来数字化。 数字化未来谈到数字化未来，我有以下几点看法。 第一，人工智能早期和近期主要落地的应用是在工业垂直领域。其数字化的趋势是往下沉的，通过传感器可以把纺织业、农业、鱼塘、医院、工厂都数字化，高概率都是往垂直的方向发展的。而人工智能贯通多个行业领域的横向应用则还需要时间。无人驾驶有望建立一个新的社会基础，是人工智能横向发展的典型应用。另一个横向发展的机会，则是把每个空间、每个场所都智能化（数字化）。 第二，前端数字化也还有一些机会，诸如AR（增强现实）和VR（虚拟现实）。从长期看，脑机接口是一个比较重要的机会。如果可以通过植入的方法在人脑的皮层后植入观察体系，那数据的获取和交互会完全不一样，所以从数字化的能力角度来讲，这也很有机会。 第三，计算的基石是算法。人类历史上所有的科学，包括传统的物理学或狭义相对论，基本上都有商业的应用。只有量子是尚未被商用的科学，前面提到的理查德·费曼教授在50多年前提出的理论，奠定了量子计算的基础。在算法领域，量子计算有很大的突破机会。而Crypto（加密模块）是一种不同的计算方法，把信任用数字化的形式表达出来。同时还有生物形态的算法，用DNA的方法或者用合成生物学的方法来测算。 第四，我个人非常关注的是能源。一如最初讲到人类社会发展的核心驱动力就是能源和信息，如果能源结构发生改变，其引发的变革效果也必将是划时代的。在能源领域，也有不少机会。 第五，空间的探索与扩展，仅仅在地球上远远不够，要走得远一些。YC（美国著名创业孵化器）就投资了不少致力于拓展地球之外空间的企业。 从信息化的角度来看，一位人人可得的数字化个人助理会逐步被创建，微软特别有可能实现这一点。这很重要，世界将因此变得更公平。现在只有富人、有钱人才可以有助理，将来每个人都可以有一个万能的助理，这也意味着有很多前景。 采访问答Q：对人工智能，这个世界上有两大阵营在争论。一方认为现在的人工智能是专用人工智能，如果它走向通用人工智能，会有一个奇点，一旦走到奇点的话机器会超过人，人变成什么就不知道了。而另一方认为世界上没有通用人工智能，而奇点不会出现，是因为到现在为止，人工智能只能做关联分析推理，还不能做因果推理，也就是说，目前的人工智能只是模拟人的右脑，还不能够模拟左脑。 A：人工智能目前以深度学习为主，而通用人工智能发展的难点主要指的就是推理。 Q：如果没有推理，怎样能够让机器比人厉害？您觉得这是有可能的吗？ A：我觉得从技术开发上来讲，有一个蛮长的过程，但我认为机器超越人类是有可能的。今天的深度学习基本上是向量，向量是表达人的大脑神经元激活的最简单的数据化方式，人的思想就是大脑神经元不断激活的结果，数学上就是用向量来表达。但人脑是可以处理符号的（有实验证据证明），但在这些向量上无法直接做符号处理，因此机器不能做逻辑推理。 在离开微软之前，我花了不少精力为微软从约翰·霍普金斯大学挖了一个人叫Paul Smolensky（保罗·斯莫伦斯基），他花了30年时间研究发声学。这与发声学有什么关系呢？“发声”很核心的一点就是把思想讲给对方听，其实思想是一大堆神经在激活，但表达出来的是符号，只不过是用声音振荡的频率将符号传送给对方。 所以，思想从向量变成符号的过程可以在“发声”过程中被观察到。他做了一整套数学理论，基本上是张量的乘积，真正要工程化非常难，但数学上已经可以成立了。 Q：这从根本上就是看我们对人脑认识的深刻程度，实现通用人工智能显然差距还很远，但是您讲到了一系列有趣的概念，您看好脑机接口，那脑机接口之后是机器管人，还是人管机器，人变成了什么？ A：首先人还是人。 Q：人还是人的定义是什么，是因为他有智慧，有人的道德、善良，还是什么？比如机器在哪些方面可以超过人，人还是人这句话怎么讲？请您定义一下人是什么？ A：我尝试回答一下。“人”这个命题，可以从哲学角度讨论，从人为学的角度讨论，我可能是纯粹从认知科学、系统角度定义的，这样的话，人是“生物表达形态的一个系统”，人的系统里有三个组成部分［感知体系、思考体系、行动体系（如手臂和腿）］。 人有一个信息框架，这是认知科学要做的，就是人是如何处理信息的，基于这样的定义，脑机接口比较简单，就是增加一个交互接口。今天的脑机接口第一个应用是让彻底瘫痪的人，虽然手和脚都不能用了，但可以用思想来控制指挥。 还有一个应用就是做广告预测，今天脑机接口有两种（植入方法、戴的设备）。 戴的设备也可以测试到不少信号，比如你要做一个电视广告，其实很难衡量看了这个电视广告后用户有什么样的反应，于是让20个人戴上脑机接口的设备，然后再给他们看广告，就会很方便地获得他们对这个广告的真实反应。这些感受，甚至观众本人都未必能讲清楚。所以，穿戴的脑机接口早期应用已经找到了，比如广告的选择与优化。因为植入的脑机接口还不成熟，有许多问题需要解决，所以需要在老鼠身上进一步做实验。 Q：所以还不是改变人，而是能更好地理解人，或帮助人。 A：帮助人来做更多的事。 Q：这个有意义，您说把原子转化成数字，但是原子本身没有变化，只是观察到了这样一个数字。您能不能确保我观察到转成的这个数字真的是原子，就是事情的真相呢？ A：我估计您问的可能是量子力学方面的。 Q：包括测不准定律。 A：量子力学系统确实有物理试验证明，观察和被观察是分不开的，我这里是假设在量子力学之上，观察和被观察是可以分开的，对于今天大部分的科学我们都可以客观地观察一个被观察的东西。 Q：都是在量子之上的。 A：量子之内，我觉得这套结构不适合。 Q：您说最后是能源变了，现在都说数据是新能源，我们其实把物质和能源看成了两个不同的概念，能源是个驱动力。 A：我想进一步讲一下。计算机科学对世界的描述其实不够完整，要真正做好必须是计算机科学加上经济学家。比如，今天的广告体系，一般开发团队里一定有一位优秀的经济学家。 回到能源和信息，这里很重要的一个底层逻辑是世界只有能源和信息，没有别的东西了，但信息可以变成知识，知识就是潜在的能源。比如有两个人，一个人懂杠杆原理，一个人不懂，他需要搬一个大石头，不懂杠杆原理的人就没办法，知识就是能源，懂的人能量就大。 核心在于，人类社会是一个复杂体系，用能源和信息不断减熵。信息是潜在的能源。在农业时代，太阳能是免费能源，所以人基本上不需要做太多东西，就是种种地。在工业时代，使用了化石能源，产生了电，这就需要人的技能了，有裁缝、厨师、律师等各个领域的人。到智能数字化时代后，计算技术的发明使人类获取信息以及从信息当中抽取知识的能力大大提高，所以图10.1中的第三条曲线是高速发展即最为陡峭的。今天市值最大的上市公司都在这条曲线上，如果创业，也一定要在这条最陡峭的曲线上。 今天，确实历史上很少有的各种因素都聚在一起，是挑战也是机会。众所周知，化石能源有时间限制，不久以后将被消耗殆尽，所以必须要用新能源来替代，至于究竟是氢能还是核能，这还有赖于将来的探索。总之，对于整个人类社会，信息和能源是最重要的两大驱动力。","link":"/2021/05/12/books/%E9%99%86%E5%A5%87-%E6%95%B0%E5%AD%97%E5%8C%96%E6%9C%AA%E6%9D%A5-%E6%91%98%E5%BD%95/"},{"title":"《高效能人士的七个习惯》","text":"积极主动、以终为始、要事第一、双赢思维、知彼解己、统合综效、不断更新 变化的世界，不变的原则。————因为人还是人。 我对生命的一种最深刻的感悟就是：要完成最渴望的目标，战胜最艰巨的挑战，你必须发掘并应用一些原则或自然法则，因为它们恰好左右着你苦苦期待的成功。 《高效能认识的七个习惯》最重要的方面是强调“塑造性格”而不是“实现成功”，因此本书不仅实用而且深刻。 现代社会，太多的人饱受恐惧感的折磨。他们恐惧将来，恐惧失业，恐惧无力养家。这种弱点，常常助长了一种倾向：无论在工作时，还是回到家中，都倾向于零风险的生活，并逃避与他人互相依赖和合作。面对这种问题，我们的文化通常会教导人们要独立、独立、再独立。“我要专注于‘我和我的’，我要工作，要好好工作，要通过工作获得真正的快乐。”独立是一种重要的，甚至带有决定性的价值观和成就观，而我们生活在一个互赖的社会中，最辉煌的成就要靠互赖和合作才能成就，远远不是个人能力可企及的。 谴责周围人和事的必然结果是变成犬儒主义，绝望无助。当我们最后向命运低头，认为自己是环境的牺牲品，屈服于宿命论带来的厄运时，我们就丢弃了希望，抛却了理想，习惯了听天由命，选择了停滞不前。 现代社会，资讯发展一日千里，生活日益复杂多元，对人要求更为苛刻，让人感觉更加紧迫和心力交瘁。尽管我们付出良多，尽量有效地利用时间，努力工作，积极进取，并利用现代科技不断提高效率，然而让人不解的是，我们越来越陷在一些鸡毛蒜皮的小事上不能自拔，而把健康、家庭、品德以及许多重要的事情放在了工作之后，舍本逐末。我们不能把问题归咎于工作，或社会的复杂和变迁，而在于我们的流行文化提倡：“早来，晚走，高效，从现在起就要懂得牺牲”——可事实上，心灵的平和宁静远非这些技巧所能带来的，而是取决于人们是否明白什么是最重要的事情，是否懂得轻重缓急，并能抓住生活的重点，客观地面对现实。 在知识时代，千载难逢的机遇和卓越的成就，通常是留给那些深谙什么是“我们”————团队精神————的人们。真正的大视野，通常只会由思维开阔、内涵丰富的头脑，经由忘我的合作精神————互敬和双赢————取得。 谁也无法说服他人改变，因为我们每个人都守着一扇只能从内开启的改变之门，不论动之以情或说之以理，我们都不能替别人开门。 凡是秉持自己的信念而活，就能产生自尊自重与自制力，并且内心平和。你会以内在的价值标准，而不是旁人的好恶或与别人比较的结果，来衡量自己。 不论你的现况如何，都请相信你与你的习惯是两码事，你有能力改变不良旧习，代之以意味着高效、幸福和互信的人际关系的新习惯。 当我们舍弃回答心，改以了解心去聆听别人，便能开启真正的沟通，增进彼此关系。对方获得了解后，会觉得受到尊重与认可，进而卸下心防，坦然而谈，双方对彼此的了解也就更流畅自然。知彼需要仁慈心；解己需要勇气，能平衡两者，则可大幅提升沟通的效率。 每个人的思维定式都是那么根深蒂固，仅仅研究世界是不够的，还要研究我们看世界时所戴的“透镜”，因为这透镜（即思维定式）往往走有着我们对世界的看法。 我们决定从自身下功夫，不再研究技巧，而是着重调整内心的真正动机和对孩子的看法。我们不再设法改变他，转而从客观的角度去发现和了解他的特色、个性与价值。另一方面，我们也自觉地改变了自己的动机，培育了内在的安全感，不再用孩子的表现来判断自己的价值。 从教育儿子的经验、对人们认知过程的研究以及成功论著的阅读中，我顿悟了品德的强大影响力，也认清了自己从小所学并且深植于心的价值观，其实与现在流行的追求捷径的速成哲学相去甚远，而这种差异经常被有意地忽略。 归根到底，我们的本质要比言行更具说服力，这个道理人人都懂。有些人是我们绝对信任的，因为我们了解他的品德，不论他是否能说会道、擅长交际，我们就是信任他们，而且能够与之合作顺畅。William George Jordan 曾说：人性可善可恶，冥冥中影响着我们的一生，而且总是如实反映出真正的自我，那是伪装不来的。 我们每个人脑中都有很多地图，可以分成两大类：一类是依据世界本来面目绘制的地图，反映现实情况；另一类是依据思维定式绘制的地图，反映个人价值观。我们用这些地图诠释所有的经验，从来都不怀疑地图的正确性，甚至意识不到它们的存在。我们理所应当地假定自己的所见所闻就是真实的世界。 以前我们总以为只有自己清楚而客观地看到了事物的本质，但这个实验却让我们开始认识到，别人的观点虽然有异，但也是清楚而客观的。 我们越是认识到思维定式、地图或者假定以及经验在我们身上的影响力，就越是能够对自己的思维定式负责，懂得审视它，在现实中检测它，并乐于聆听和接受别人的看法，从而获得更广阔的视野和更客观的看法。————换位思考的能力 看清事实是我们的日常生活中是极其关键的一环。 一个人的思维定式或者地图越符合这些原则或者自然法则（道的层次），就越多能正确而高效的生活。比起为改变态度和行为所做出的努力，正确的地图对于个人和人际关系效能的影响要大得多。 个人魅力论————他们了解的只是别人期望中的自己。 与配偶、子女、朋友或同事相处一定要学会聆听，这需要情感力量的支撑。聆听需要耐心、坦诚和理解对方的愿望，属于品德的高级范畴。相较之下，以低投入的情感给出“高高在上”的建议要容易得多。 一旦孩子体会到了真正拥有的感觉，自然会乐于与他人分享。 教导孩子也要因时制宜，在关系和气氛紧张的时候，教导会被视为一种评判与否定；关系融洽的时候，在私下里对孩子循循善诱效果会加倍。 或许只有真正经历过拥有，才会真正懂得分享。许多人在家庭或婚姻中只知机械式地付出，或者拒绝付出和分享，可能正是由于他们从未体验过拥有，而且缺乏自我认同和自尊。所以教育孩子应该要有充分的耐心让他们体会拥有的感觉，同时用足够的智慧告诉他们付出的价值，另外还要以身作则。 以原则为中心，以品德为基础，要求“由内而外”地实现个人效能和人际效能。 如果你想拥有美满的婚姻，那么就做一个能产生助力而非阻力的人，不要一味强求对方。 我们必不可停止探索，而一切探索的尽头，就是重回起点，并对起点有首次般的了解。 为人和观念的改变是螺旋式向上的过程——为人改变观念，观念反过来改变为人，如此反复循环，螺旋式向上成长。通过在知识、技巧与意愿三方面的努力，我们可以突破多年思维定式的伪保护，使个人和人际关系效能都更上一层楼。 由依赖到独立，再到互赖。 生理上独立的人可以自食其力；智力上独立的人可以有自己的思想，兼具想象、思考、创造、分析、组织与表达的能力；情感上独立的人信心十足，能自我管理，不因他人好恶而影响自我价值评价。 互赖是一个更为成熟和高级的概念。生理上互赖的人，可以自力更生，但也明白合作会比单干更有成效；情感上互赖的人，能充分认识自己的价值，但也知道爱心、关怀以及付出的必要性；智力上互赖的人懂得取人之长，补己之短。 一个能做到互赖的人，既能与人深入交流自己的想法，也能看到他人的智慧和潜力。 但只有独立的人才能选择互赖，尚未摆脱依赖性的人则无此条件，因为他们无论在品德还是在自我把握方面都尚有欠缺。 唯有在金蛋（产出）与鹅的健康和幸福（产能）之间取得平衡，才能实现真正的效能。虽然你常会因此面临两难选择，但这正是效能原则的精髓所在。它是短期利益与长期目标之间的平衡，是好分数与刻苦努力之间的平衡，是清洁的房间与良好的亲子关系之间的平衡。 在刺激与回应之间，人有选择的自由。 选择的自由包括人类特有的四种天赋。除自我意识外，我们还拥有“想象力（Imagination）”，即超越当前现实而在头脑中进行创造的能力；“良知（Conscience）”，即明辨是非，坚持行为原则，判断思想、言行正确与否的能力；“独立意志（Independent Will）”，即基于自我意识、不受外力影响而自行其是的能力。 积极主动是人类的天性，即使生活受到了外界条件的制约，那也是因为我们有意或无意地选择了被外界条件控制，这种选择成为消极被动。这样的人很容易被自然天气做影响，比如风和日丽的时候就兴高采烈；阴云密布的时候就无精打采。而积极主动的人则心中自有一片天地，无论天气是阴雨绵绵还是晴空万里，都不会对他们产生影响，只有自己的价值观才是关键因素，如果认定了工作第一，那么即使天气再坏，敬业精神依旧不改。 消极被动的人还会受到“社会天气”的影响。别人以礼相待，他们就笑脸相迎，反之则摆出一副自我守护的姿态。心情好坏全都取决于他人的言行，任由别人的弱点控制自己。 积极主动的人理智胜于冲动，他们能够慎重思考，选定价值观并将其作为自己行为的内在动力；而消极被动的人则截然相反，他们感情用事，易受环境或条件作用的驱使。但这并不意味着积极主动的人对外界刺激毫无感应，只不过他们会有意无意地根据自己的价值观来选择对外界物质、心理与社会刺激的回应方式。 伤害我们的并非悲惨遭遇本身，而是我们对于悲惨遭遇的回应。 采取主动是实现人生产能与产出平衡的必要条件，对于培养七个习惯来说也不例外。本书的其余六个习惯，都以积极主动为根基，而每个习惯又都会激励你采取主动，但是如果你甘于被动，就会受制于人，面临截然不同的发展与机遇。 我们有能力以积极态度应对现状和未来。 在所有进步的社会中，爱都是代表动作，但消极被动的人却把爱当做一种感觉。好莱坞式的电影就常灌输这种不必为爱负责的观念————因为爱只是感觉，没有感觉，便没有爱。事实上，任由感觉左右行为是不负责任的做法。积极主动的人则以实际行动来表现爱。就像母亲忍受痛苦，把新生命带至人世，爱是牺牲奉献，不求回报。又好像父母爱护子女，无微不至，爱必须通过行动来实现，爱的感觉由此而生。 把外在环境视作问题症结的想法本身就成问题，应该说是我们给了外部环境控制自己的权力，这种“由外而内”求变的思维定式就是以外在环境改变作为个人改变的先决条件。 积极的做法应该是“由内而外”地改变，即先改变个人行为，让自己变得更充实，更具创造力，然后再去施加影响，改变环境。 满意源自内心，那些对人性一无所知的人总是妄图在维持自我的前提下追求幸福，结果必是徒劳无功，而本来想摆脱的痛苦却会与日俱增。 和内在力量相比，身外之物显得微不足道。 虽然以始为终适用于不同的环境和生活层面，但最基本的应用，还是应该从现在开始，以你的人生目标作为衡量一切的标准，你的一言一行，一举一动，无论发生在何时，都必须遵循这一原则，即由个人最重视的期许或价值观来决定一切。牢记自己的目标或者使命，就能确信日常的所作所为是否与之南辕北辙，而且每天都向着这个目标努力，不敢懈怠。 “以终为始”的一个原则基础是“任何事都是两次创造而成”。我们做任何事都是先在头脑中构思，即智力上的或第一次的创造（Mental/First Creation），然后付诸实践，即体力上的或第二次的创造（Physical/Second Creation）。 管理是正确地做事，领导则是做正确的事。管理是有效地顺着成功的梯子往上爬，领导则判断这个梯子是否搭在正确的墙上。 再成功的管理也无法弥补领导的失败，而领导难就难在常常陷于管理的思维定式而难以自拔。 休太长的假，看太多的电影或电视，打太多的电子游戏，长期无所事事，都等于浪费生命，无益于增长智慧，激发潜能，增进安全感或指引人生，只不过制造更多的空虚而已。 首先，这是主动的选择，没有受到环境或他人的影响，是通盘考虑后选择的最佳方案，是有意识的明智选择。 最后，对自己的选择胸有成竹，无论结果怎样，都能专注于此，并且心安理得，无所牵挂。 以原则为生活中心的人总是见解不凡，思想与行为也独具一格，而坚实、稳定的内在核心赐予他们高度安全感、人生方向、智慧与力量，会让他们度过积极而充实的一生。 其实不是你询问生命的意义何在，而是生命正提出质疑，要求你回答存在的意义为何。换言之，人必须对自己的生命负责。 事实上，有效的个人领导、心灵演练和确认方法都源于对人生目标和原则的深思熟虑，并在改写人生剧本，深入理解人生目标和基本原则方面有无穷力量。我相信所有久经考验的宗教的核心也是这些原则和实践，只是名称稍有出入，比如静坐、祈祷、圣餐礼、神圣十月、经文研究等，都与良知和想象力有关。尽管心灵演练威力无穷，但也必须以品德和原则，而不是以性格魅力为基础才行，否则就会被误用或滥用，尤其容易被用来谋取个人名利。 有效管理是掌握重点式的管理，它把最重要的事放在第一位。由领导（人生目标、原则）决定什么是重点后，再靠自制力来掌握重点，时刻把它们放在第一位，以免被感觉、情绪或冲动所左右。 要牢记管理与领导迥然不同。从本质上说，领导是一种高效率的右脑型活动，常被人们成为一门艺术，其基础是一种哲学理念。如果你需要解决一些个人领导方面的问题，通常都要先自问一些人生最本质的问题。一旦确定了人生方向，你就应该对自己进行有效的管理，让生活与设想一致。相对于自我领导来说，有效的自我管理所涉及的大都是左脑所擅长的能力：分解、分析、排序，具体运用以及在规定时间内完成任务等。关于提高个人效能的方法，我总结出一句话：左脑进行管理，右脑进行领导。 除了自我意识、想象力和良知之外，想要真正实现成功的自我管理，就必须发挥人类的第四大天赋————独立意志。独立意志指的是做出决定和主动选择，并根据这些决定和选择采取具体行动的能力。有了独立意志，我们就可以主动作为，而不是被动听命，而且在发挥其他三大天赋拟定出计划之后，就能够积极实施这些计划。 因为重要，才会使生活大为改观，却因为不够紧迫，所以受到忽略。但是只要我们立即着手进行，效能变回大为增进。 以配偶或金钱、朋友、享乐等为重心，容易受第一与第三类事务羁绊。至于自我中心者难免被情绪冲动所误导，陷溺于能博人好感的第三类活动，以及可逃避现实的第四类事务。这些诱惑往往不是独立意志所能客服，只有发乎志诚的信念与目标，才能够产生坚定说“不”的勇气。 以第二类事物为生活中心的时间管理方法只有一个目标，那就是有效地管理生活。这需要我们有完善的原则，对个人使命有明确的认识，能兼顾重要的和紧迫的事情，能平衡产出和产能的关系。 让第二类事务成为生活中心的有效工具必须满足以下六个重要标准： 和谐一致 个人的理想与使命、角色与目标、工作重点与计划、欲望与自制之间，应和谐一致。 平衡功能 管理方法应有助于生活平衡发展，提醒我们扮演不同的角色，以免忽略了健康、家庭、个人发展等重要的人生层面。有人以为某方面的成功可补偿他方面的遗憾，但那终非长久之计。难道成功的事业可以弥补破碎的婚姻、孱弱的身体或性格上的缺失？ 围绕中心 理想的管理方法会鼓励并协助你，着重虽不紧迫却极重要的事。我认为，最有效的方法是以一星期为单位制订计划。一周7天中，每天各有不同的优先目标，但基本上7天一体，相互呼应。如此安排人生，秘诀在于不要就日程表订立优先顺序，应就事件本身的重要性来安排行事历。 以人为本 个人管理的重点在人，不在事。行事固然要讲求效率，但以原则为中心的人更重视人际关系的得失。因此有效的个人管理偶尔须牺牲效率，迁就人的因素。毕竟日程表的目的在于协助工作推行，并不是要让我们为进度落后而产生内疚感。 灵活变通 管理方法并非一成不变，视个人作风与需要而调整。 便于携带 管理工具必须便于携带，随时可供参考修正。 充分认可他人的自我意识、想象力、良知以及独立意志。 所谓情感账户，储存的是增进人际关系不可或缺的“信赖”，也就是他人与你相处时的一分“安全感”。能够增加情感账户存款的，是礼貌、诚实、仁慈与信用。反之，粗鲁、轻蔑、威逼与失信等等，会降低情感账户的余额，到最后甚至透支，人际关系就要拉警报了。 维系人与人之间的情谊，最要紧的不在于言语或行为，而在于本性。言不由衷、虚伪造作的表面功夫很快就会被识破，何以建立圆满的互赖关系？由此可见，修身是公众成功的基础，完成修身的功夫后，再向前看，面前又是一片崭新的领域。良好的互赖关系可以使人享有深厚丰富的情感交流，不断跃进的成长以及为社会服务奉献的机会。 越是持久的关系，越需要不断的储蓄。由于彼此都有所期待，原有的信赖很容易枯竭。 速战速决是不切实际的，建立和维护关系都需要时间。如果因为他反应冷淡或者不以为然就不耐烦起来，那就是前功尽弃。 建立并维持人际关系是一种长期的投资行为。 如果你重视一个人，那么必须同样重视他所重视的事情。 很多人都倾向于主观臆断他人的想法和需要，觉得在自己身上适用的感情投资，一定也适用于他人。一旦发现结果并不如自己所期望的那样，就会觉得自己一片好意成了空，变得心灰意冷起来。 如果你希望别人了解你的实际需要，首先要了解他们每一个人的实际需要，然后据此给与帮助和支持。 人的内心都是极其柔弱和敏感的，不分年龄和资历。哪怕是咋最坚强和冷漠的外表下，也往往隐藏着一颗脆弱的心。 很多期望都是含蓄的，从来没有明白地说出来过，但是人们却想当然地认为这些事是心照不宣的。实际情况并非如此。如果没有明确的期望，人们就会变得感情用事，原本简单的小误会也会变得很复杂，原本很小的事情也会导致严重的冲突和人身攻击，最终不欢而散。 绝不在背后攻击他人。 弱者才会残忍，只有强者懂得温柔。 在互赖关系中，问题就代表机会————增加情感账户存款的机会。 双赢者把生活看作一个合作的舞台，而不是一个角斗场。一般人看事情多用二分法：非强即弱，非胜即败。实际上这种想法是站不住脚的，它以力量和地位，而非原则为准绳。其实世界之大，人人都有足够的立足空间，他人之得不必就视为自己之失。 一旦爱被附加条件，孩子们就会认为自我价值只有通过比较和竞争才能实现。 成熟就是在表达自己的情感和信念的同时又能体谅他人的想法和感受的能力。 敢作敢为和善解人意是双赢的必备条件，其间的平衡点是成熟的重要标志。如果我足够成熟，我就会乐于聆听，善于沟通并勇于面对。 一般人都会担心有所匮乏，认为世界如同一块大饼，并非人人得而食之。假如别人多抢走一块，自己就会吃亏，人生仿佛一场零和游戏。难怪俗语说：“共患难易，共富贵难。”见不得别人好，甚至对至亲好友的成就也会眼红，这都是“匮乏心态”（Scarcity Mentality）作祟。 抱持这种心态的人，甚至希望与自己有利害关系的人小灾小难不断，疲于应付，无法安心竞争。他们时时不忘与人比较，认定别人的成功等于自身的失败。纵使表面上虚情假意地赞许，内心却妒恨不已，惟独占有能够使他们肯定自己。他们又希望四周环境的都是唯命是从的人，不同的意见则被视为叛逆、异端。 相形之下，富足的心态源自厚实的个人价值观与安全感。 公众领域的成功的意思不是压倒旁人，而是通过成功的有效交往让所有参与者获利，大家一起工作，一起探讨，一起实现单枪匹马无法完成的理想，这种成功要以知足心态为基础。 双赢的精髓就是信用，即情感账户。 首先寻求去了解对方，然后再争取让对方了解自己。 大部分人在聆听时并不是想理解对方，而是为了做出回应。这种人要么说话，要么准备说话，不断地用自己的模式过滤一切，用自己的经历理解别人的生活。 移情聆听是指以理解为目的的聆听，要求听者站在说话者的角度理解他们的思维模式和感受。移情聆听的本质不是要你赞同对方，而是要在情感和理智上充分而深入地理解对方。聆听是为了理解，是心和心得深刻交流。移情聆听本身就是巨额的感情投资，它能够给人提供一种“心理空气”，极具治疗作用。 除了物质，人类最大的生存需求源自心理，即被人理解、肯定、认可和欣赏。你的移情聆听等于是给了对方“心理空气”，满足了对方这个基本需求后，你就可以着重于施加影响力和解决问题了。 当你学习认真倾听时，你会发现自己对别人的感知有了天壤之别。人们在互相依靠的环境中时，这种差别将带来极大影响。你看到的画像可能是少妇，我看到的是老妇，但是我们都没错。你可能以配偶为中心，我则以金钱为中心。你的精神世界丰富多彩，我的则是一片荒芜。你看待问题的角度也许高度形象、有整体性和感情色彩，是典型的右脑思维；而我则是逻辑性强、善于分析和表达的左脑思维。我们感知会非常不同，而且从小便有自己的思维方式，理所当然地认定某些事实，当别人不这么认为时，就会质疑他人的性格或者精神状态。 读了这本书才发现，我从未真正聆听你说话，但今后会尽力而为，可能起初不能做得很好，希望你助我一臂之力。 在了解别人的过程中，你也会产生新的见解。 你越深入了解别人，就会越欣赏和尊敬他们。触及对方的灵魂是一件很神圣的事情。 我们还模拟家中可能发生的摩擦，通过设身处地的倾听技巧，预设有效的处理方式。通常我扮演儿子或女儿，桑德拉则扮演母亲。通过着这样的交流方式，我们不但能够发现事情的真相，还学到很多东西，让我们能够继续作为榜样，向孩子们传授正确的原则。对于曾经处理不当的问题和事件，我们也会用这种方式重演，结果让我们受益匪浅。 先理解别人。在问题出现之前，在评估和判断之前，在你表达个人观点之前，先理解别人，这是有效的相互依赖关系中最有用的习惯。 综合综效的基本心态是：如果一位具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会的奥妙，值得加以了解。与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。与所见略同的人沟通，益处不大，要有分歧才有收获。 缺乏安全感的人认为所有的人和事都应该依照他们的模式。他们总想利用克隆技术，以自己的思想改造别人。他们不知道人际关系最可贵的地方就是能接触到不同的模式。相同不是统一，一致也不等于团结，统一和团结意味着互补，而不是相同。相同毫无创造性可言，而且沉闷乏味。综合综效的精髓就是尊重差异。 一个偏重于语言和逻辑的惯用左脑思维的人会发现自己在面对要求极高创造力的问题时常常无能为力，于是开始醒悟，并调动右脑来接受新的模式。我并不是说他们原来没有右脑，而是说那时候右脑正在休眠，尽管细胞还在，但可能已经萎缩，因为从他们小时候起，接受的所有学校教育和社会教育就只偏重左脑的发展。 右脑主管直觉、创造和印象，左脑主管分析、逻辑和语言，只有左右贯通，整个大脑才能发挥作用。 人生最值得的投资就是磨炼自己，因为生活与服务人群都得靠自己，这是最珍贵的工具。工作本身并不能带来经济上的安全感，具备良好的思考、学习、创造与适应能力，才能立于不败之地。拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠。 身体层面：健康饮食，充足休息以及定期锻炼 耐力：源于有氧运动————快走、跑步、骑车、游泳、越野、滑雪 韧性：源于伸展运动———— 跑前拉伸、慢慢停止、跑后拉伸 力量：源于持久的肌肉运动————需要柔软体操，即拉伸 锻炼的所有好处几乎都产生于最后阶段。想增强力量，就必须等到肌肉纤维断裂，神经纤维感到疼痛才行，因为这时候自然机制才会予以过渡补偿，纤维在 48 小时后会变得更加坚韧。 精神层面是人的本质、核心和对价值体系的坚持，是生活中非常私人而又至关重要的领域。它能够调用人体内具有激励和鼓舞作用的资源，把你同所有人类的永恒真理紧紧联系在一起。 动机不正，则诸事不顺。 每天人生最重大的战争都在灵魂深处的密室中进行。如果你能够在这些战争中获胜，将内心的矛盾和冲突平息下来，就会感到一片祥和，并领悟到生命的真谛。自然而然地，你会取得公众领域的成功，即秉持着合作精神，为他人造福，由衷地为他们的成功感到快乐。 智力层面的更新主要靠教育，借此不断学习知识，磨砺心志，开阔视野。积极处世的人有能力摸索出无数种自我教育的方法。 养成定期阅读优秀文学作品的习惯是拓展思维的最佳方式，这是第二类事务，人们可以借此接触到当前或历史上最伟大的思想家。 磨砺心智的另一种有效方式是写作。通过不断记录自己的想法、经历、深刻见解和学习心得，我们的思路就会更加明晰、准确和连贯。如果能够在写信的时候与他人深入交流思想、感受和理念，而不是肤浅地停留在事物表面，也有助于我们提高思考、推理和获取他人理解的能力。 至于增进内在安全感的方式，包括：坚守原则，肯定自我；与人为善，相信人生不止输赢两种抉择，还有双方都是赢家的第三种可能性； 每个人都是社会的一面小镜子，反映出身边人的想法、判断和模式，每个人都从镜中获知自己在周围人眼中的形象，而社会之镜是由周围人的舆论、认知和思维决定的。作为相互依赖关系的一分子，我们都有这样一种潜意识，即自己是社会的大镜子的一部分。 犹如生命少不了食物，但人绝非为吃而活。 越是积极主动（习惯一），就越能在生活中有效地实施自我领导（习惯二）和管理（习惯三）；越是有效管理自己的生活（习惯三），就能从事越多的第二类事务的更新活动（习惯七）；越能先理解别人（习惯五），就越能找到统合综效的双赢解决方案（习惯四和习惯六）；越是改善培养独立性的习惯（习惯一、二、三），就越能在相互依赖的环境下提高效能（习惯四、五、六）；而自我更新则是强化所有这些习惯的过程（习惯七）。 稳定的经济基础并非来自工作，而是来自个人的产能（思考、学习、创造、调整）。真正的经济独立指的不是家财万贯，而是拥有创造财富的能力，这是内在的。 良知的声音如此微弱，可以被轻而易举地淹没；但又如此清晰，不可能被错误地解释。 那次谈话让我们热泪盈眶，不只是因为这些新发现，还因为我们更加尊重彼此了。我们发现，看似琐碎的小事，往往也源自刻骨铭心的情感经历，如果只看表面，而没有挖掘深层的敏感问题，无异于在践踏对方心中的圣土。","link":"/2021/02/13/books/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF/"},{"title":"Linux 基础总结","text":"原文：https://github.com/CyC2018/CS-Notes/blob/master/notes/Linux.md 一、常用操作以及概念快捷键 Tab：命令和文件名补全； Ctrl+C：中断正在运行的程序； Ctrl+D：结束键盘输入（End Of File，EOF） 求助1. –help指令的基本用法与选项介绍。 2. manman 是 manual 的缩写，将指令的具体信息显示出来。 当执行 man date 时，有 DATE(1) 出现，其中的数字代表指令的类型，常用的数字及其类型如下： 代号 类型 1 用户在 shell 环境中可以操作的指令或者可执行文件 5 配置文件 8 系统管理员可以使用的管理指令 3. infoinfo 与 man 类似，但是 info 将文档分成一个个页面，每个页面可以跳转。 4. doc/usr/share/doc 存放着软件的一整套说明文件。 关机1. who在关机前需要先使用 who 命令查看有没有其它用户在线。 2. sync为了加快对磁盘文件的读写速度，位于内存中的文件数据不会立即同步到磁盘，因此关机之前需要先进行 sync 同步操作。 3. shutdown12345## shutdown [-krhc] 时间 [信息]-k ： 不会关机，只是发送警告信息，通知所有在线的用户-r ： 将系统的服务停掉后就重新启动-h ： 将系统的服务停掉后就立即关机-c ： 取消已经在进行的 shutdown PATH可以在环境变量 PATH 中声明可执行文件的路径，路径之间用 : 分隔。 1/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/dmtsai/.local/bin:/home/dmtsai/bin sudosudo 允许一般用户使用 root 可执行的命令，不过只有在 /etc/sudoers 配置文件中添加的用户才能使用该指令。 包管理工具RPM 和 DPKG 为最常见的两类软件包管理工具： RPM 全称为 Redhat Package Manager，最早由 Red Hat 公司制定实施，随后被 GNU 开源操作系统接受并成为许多 Linux 系统的既定软件标准。YUM 基于 RPM，具有依赖管理和软件升级功能。 与 RPM 竞争的是基于 Debian 操作系统的 DEB 软件包管理工具 DPKG，全称为 Debian Package，功能方面与 RPM 相似。 发行版Linux 发行版是 Linux 内核及各种应用软件的集成版本。 基于的包管理工具 商业发行版 社区发行版 RPM Red Hat Fedora / CentOS DPKG Ubuntu Debian VIM 三个模式 一般指令模式（Command mode）：VIM 的默认模式，可以用于移动游标查看内容； 编辑模式（Insert mode）：按下 “i” 等按键之后进入，可以对文本进行编辑； 指令列模式（Bottom-line mode）：按下 “:” 按键之后进入，用于保存退出等操作。 在指令列模式下，有以下命令用于离开或者保存文件。 命令 作用 :w 写入磁盘 :w! 当文件为只读时，强制写入磁盘。到底能不能写入，与用户对该文件的权限有关 :q 离开 :q! 强制离开不保存 :wq 写入磁盘后离开 :wq! 强制写入磁盘后离开 GNUGNU 计划，它的目标是创建一套完全自由的操作系统，称为 GNU，其内容软件完全以 GPL 方式发布。其中 GPL 全称为 GNU 通用公共许可协议（GNU General Public License），包含了以下内容： 以任何目的运行此程序的自由； 再复制的自由； 改进此程序，并公开发布改进的自由。 开源协议 Choose an open source license 如何选择开源许可证？ 二、磁盘磁盘接口1. IDEIDE（ATA）全称 Advanced Technology Attachment，接口速度最大为 133MB/s，因为并口线的抗干扰性太差，且排线占用空间较大，不利电脑内部散热，已逐渐被 SATA 所取代。 2. SATASATA 全称 Serial ATA，也就是使用串口的 ATA 接口，抗干扰性强，且对数据线的长度要求比 ATA 低很多，支持热插拔等功能。SATA-II 的接口速度为 300MB/s，而 SATA-III 标准可达到 600MB/s 的传输速度。SATA 的数据线也比 ATA 的细得多，有利于机箱内的空气流通，整理线材也比较方便。 3. SCSISCSI 全称是 Small Computer System Interface（小型机系统接口），SCSI 硬盘广为工作站以及个人电脑以及服务器所使用，因此会使用较为先进的技术，如碟片转速 15000rpm 的高转速，且传输时 CPU 占用率较低，但是单价也比相同容量的 ATA 及 SATA 硬盘更加昂贵。 4. SASSAS（Serial Attached SCSI）是新一代的 SCSI 技术，和 SATA 硬盘相同，都是采取序列式技术以获得更高的传输速度，可达到 6Gb/s。此外也通过缩小连接线改善系统内部空间等。 磁盘的文件名Linux 中每个硬件都被当做一个文件，包括磁盘。磁盘以磁盘接口类型进行命名，常见磁盘的文件名如下： IDE 磁盘：/dev/hd[a-d] SATA/SCSI/SAS 磁盘：/dev/sd[a-p] 其中文件名后面的序号的确定与系统检测到磁盘的顺序有关，而与磁盘所插入的插槽位置无关。 三、分区分区表磁盘分区表主要有两种格式，一种是限制较多的 MBR 分区表，一种是较新且限制较少的 GPT 分区表。 1. MBRMBR 中，第一个扇区最重要，里面有主要开机记录（Master boot record, MBR）及分区表（partition table），其中主要开机记录占 446 bytes，分区表占 64 bytes。 分区表只有 64 bytes，最多只能存储 4 个分区，这 4 个分区为主分区（Primary）和扩展分区（Extended）。其中扩展分区只有一个，它使用其它扇区来记录额外的分区表，因此通过扩展分区可以分出更多分区，这些分区称为逻辑分区。 Linux 也把分区当成文件，分区文件的命名方式为：磁盘文件名 + 编号，例如 /dev/sda1。注意，逻辑分区的编号从 5 开始。 2. GPT扇区是磁盘的最小存储单位，旧磁盘的扇区大小通常为 512 bytes，而最新的磁盘支持 4 k。GPT 为了兼容所有磁盘，在定义扇区上使用逻辑区块地址（Logical Block Address, LBA），LBA 默认大小为 512 bytes。 GPT 第 1 个区块记录了主要开机记录（MBR），紧接着是 33 个区块记录分区信息，并把最后的 33 个区块用于对分区信息进行备份。这 33 个区块第一个为 GPT 表头纪录，这个部份纪录了分区表本身的位置与大小和备份分区的位置，同时放置了分区表的校验码 (CRC32)，操作系统可以根据这个校验码来判断 GPT 是否正确。若有错误，可以使用备份分区进行恢复。 GPT 没有扩展分区概念，都是主分区，每个 LBA 可以分 4 个分区，因此总共可以分 4 * 32 = 128 个分区。 MBR 不支持 2.2 TB 以上的硬盘，GPT 则最多支持到 233 TB = 8 ZB。 开机检测程序1. BIOSBIOS（Basic Input/Output System，基本输入输出系统），它是一个固件（嵌入在硬件中的软件），BIOS 程序存放在断电后内容不会丢失的只读内存中。 BIOS 是开机的时候计算机执行的第一个程序，这个程序知道可以开机的磁盘，并读取磁盘第一个扇区的主要开机记录（MBR），由主要开机记录（MBR）执行其中的开机管理程序，这个开机管理程序会加载操作系统的核心文件。 主要开机记录（MBR）中的开机管理程序提供以下功能：选单、载入核心文件以及转交其它开机管理程序。转交这个功能可以用来实现多重引导，只需要将另一个操作系统的开机管理程序安装在其它分区的启动扇区上，在启动开机管理程序时，就可以通过选单选择启动当前的操作系统或者转交给其它开机管理程序从而启动另一个操作系统。 下图中，第一扇区的主要开机记录（MBR）中的开机管理程序提供了两个选单：M1、M2，M1 指向了 Windows 操作系统，而 M2 指向其它分区的启动扇区，里面包含了另外一个开机管理程序，提供了一个指向 Linux 的选单。 安装多重引导，最好先安装 Windows 再安装 Linux。因为安装 Windows 时会覆盖掉主要开机记录（MBR），而 Linux 可以选择将开机管理程序安装在主要开机记录（MBR）或者其它分区的启动扇区，并且可以设置开机管理程序的选单。 2. UEFIBIOS 不可以读取 GPT 分区表，而 UEFI 可以。 四、文件系统分区与文件系统对分区进行格式化是为了在分区上建立文件系统。一个分区通常只能格式化为一个文件系统，但是磁盘阵列等技术可以将一个分区格式化为多个文件系统。 组成最主要的几个组成部分如下： inode：一个文件占用一个 inode，记录文件的属性，同时记录此文件的内容所在的 block 编号； block：记录文件的内容，文件太大时，会占用多个 block。 除此之外还包括： superblock：记录文件系统的整体信息，包括 inode 和 block 的总量、使用量、剩余量，以及文件系统的格式与相关信息等； block bitmap：记录 block 是否被使用的位图。 文件读取对于 Ext2 文件系统，当要读取一个文件的内容时，先在 inode 中查找文件内容所在的所有 block，然后把所有 block 的内容读出来。 而对于 FAT 文件系统，它没有 inode，每个 block 中存储着下一个 block 的编号。 磁盘碎片指一个文件内容所在的 block 过于分散，导致磁盘磁头移动距离过大，从而降低磁盘读写性能。 block在 Ext2 文件系统中所支持的 block 大小有 1K，2K 及 4K 三种，不同的大小限制了单个文件和文件系统的最大大小。 大小 1KB 2KB 4KB 最大单一文件 16GB 256GB 2TB 最大文件系统 2TB 8TB 16TB 一个 block 只能被一个文件所使用，未使用的部分直接浪费了。因此如果需要存储大量的小文件，那么最好选用比较小的 block。 inodeinode 具体包含以下信息： 权限 (read/write/excute)； 拥有者与群组 (owner/group)； 容量； 建立或状态改变的时间 (ctime)； 最近读取时间 (atime)； 最近修改时间 (mtime)； 定义文件特性的旗标 (flag)，如 SetUID…； 该文件真正内容的指向 (pointer)。 inode 具有以下特点： 每个 inode 大小均固定为 128 bytes (新的 ext4 与 xfs 可设定到 256 bytes)； 每个文件都仅会占用一个 inode。 inode 中记录了文件内容所在的 block 编号，但是每个 block 非常小，一个大文件随便都需要几十万的 block。而一个 inode 大小有限，无法直接引用这么多 block 编号。因此引入了间接、双间接、三间接引用。间接引用让 inode 记录的引用 block 块记录引用信息。 目录建立一个目录时，会分配一个 inode 与至少一个 block。block 记录的内容是目录下所有文件的 inode 编号以及文件名。 可以看到文件的 inode 本身不记录文件名，文件名记录在目录中，因此新增文件、删除文件、更改文件名这些操作与目录的写权限有关。 日志如果突然断电，那么文件系统会发生错误，例如断电前只修改了 block bitmap，而还没有将数据真正写入 block 中。 ext3/ext4 文件系统引入了日志功能，可以利用日志来修复文件系统。 挂载挂载利用目录作为文件系统的进入点，也就是说，进入目录之后就可以读取文件系统的数据。 目录配置为了使不同 Linux 发行版本的目录结构保持一致性，Filesystem Hierarchy Standard (FHS) 规定了 Linux 的目录结构。最基础的三个目录如下： / (root, 根目录) /usr (unix software resource)：所有系统默认软件都会安装到这个目录； /var (variable)：存放系统或程序运行过程中的数据文件。 /bin：bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。 /boot：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。 /dev ：dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。 /etc：etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。 /home：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。 /lib：lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /media：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。 /mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。 /opt：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /proc：proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器： 1echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all /root：该目录为系统管理员，也称作超级权限者的用户主目录。 /sbin：s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。 /selinux： 这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。 /srv： 该目录存放一些服务启动之后需要提取的数据。 /sys： 这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。 sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。 该文件系统是内核设备树的一个直观反映。 当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。 /tmp：tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。 /usr： usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。 /usr/bin：系统用户使用的应用程序。 /usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。 /usr/src：内核源代码默认的放置目录。 /var：var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。 /run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。 在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。 /etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。 /bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在 /bin/ls 目录下的。 值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。 /var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。 五、文件文件属性用户分为三种：文件拥有者、群组以及其它人，对不同的用户有不同的文件权限。 使用 ls 查看一个文件时，会显示一个文件的信息，例如 drwxr-xr-x 3 root root 17 May 6 00:14 .config，对这个信息的解释如下： drwxr-xr-x：文件类型以及权限，第 1 位为文件类型字段，后 9 位为文件权限字段 3：链接数 root：文件拥有者 root：所属群组 17：文件大小 May 6 00:14：文件最后被修改的时间 .config：文件名 常见的文件类型及其含义有： d：目录 -：文件 l：链接文件 9 位的文件权限字段中，每 3 个为一组，共 3 组，每一组分别代表对文件拥有者、所属群组以及其它人的文件权限。一组权限中的 3 位分别为 r、w、x 权限，表示可读、可写、可执行。 文件时间有以下三种： modification time (mtime)：文件的内容更新就会更新； status time (ctime)：文件的状态（权限、属性）更新就会更新； access time (atime)：读取文件时就会更新。 文件与目录的基本操作1. ls列出文件或者目录的信息，目录的信息就是其中包含的文件。 1234## ls [-aAdfFhilnrRSt] file|dir-a ：列出全部的文件-d ：仅列出目录本身-l ：以长数据串行列出，包含文件的属性与权限等等数据 2. cd更换当前目录。 1cd [相对路径或绝对路径] 3. mkdir创建目录。 123## mkdir [-mp] 目录名称-m ：配置目录权限-p ：递归创建目录 4. rmdir删除目录，目录必须为空。 12rmdir [-p] 目录名称-p ：递归删除目录 5. touch更新文件时间或者建立新文件。 123456## touch [-acdmt] filename-a ： 更新 atime-c ： 更新 ctime，若该文件不存在则不建立新文件-m ： 更新 mtime-d ： 后面可以接更新日期而不使用当前日期，也可以使用 --date=&quot;日期或时间&quot;-t ： 后面可以接更新时间而不使用当前时间，格式为[YYYYMMDDhhmm] 6. cp复制文件。如果源文件有两个以上，则目的文件一定要是目录才行。 12345678cp [-adfilprsu] source destination-a ：相当于 -dr --preserve=all-d ：若来源文件为链接文件，则复制链接文件属性而非文件本身-i ：若目标文件已经存在时，在覆盖前会先询问-p ：连同文件的属性一起复制过去-r ：递归复制-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了 7. rm删除文件。 12## rm [-fir] 文件或目录-r ：递归删除 8. mv移动文件。 123## mv [-fiu] source destination## mv [options] source1 source2 source3 .... directory-f ： force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖 修改权限可以将一组权限用数字来表示，此时一组权限的 3 个位当做二进制数字的位，从左到右每个位的权值为 4、2、1，即每个权限对应的数字权值为 r : 4、w : 2、x : 1。 1## chmod [-R] xyz dirname/filename 示例：将 .bashrc 文件的权限修改为 -rwxr-xr–。 1## chmod 754 .bashrc 也可以使用符号来设定权限。 12345678## chmod [ugoa] [+-=] [rwx] dirname/filename- u：拥有者- g：所属群组- o：其他人- a：所有人- +：添加权限- -：移除权限- =：设定权限 示例：为 .bashrc 文件的所有用户添加写权限。 1## chmod a+w .bashrc 默认权限 文件默认权限：文件默认没有可执行权限，因此为 666，也就是 -rw-rw-rw- 。 目录默认权限：目录必须要能够进入，也就是必须拥有可执行权限，因此为 777 ，也就是 drwxrwxrwx。 可以通过 umask 设置或者查看默认权限，通常以掩码的形式来表示，例如 002 表示其它用户的权限去除了一个 2 的权限，也就是写权限，因此建立新文件时默认的权限为 -rw-rw-r–。 目录的权限文件名不是存储在一个文件的内容中，而是存储在一个文件所在的目录中。因此，拥有文件的 w 权限并不能对文件名进行修改。 目录存储文件列表，一个目录的权限也就是对其文件列表的权限。因此，目录的 r 权限表示可以读取文件列表；w 权限表示可以修改文件列表，具体来说，就是添加删除文件，对文件名进行修改；x 权限可以让该目录成为工作目录，x 权限是 r 和 w 权限的基础，如果不能使一个目录成为工作目录，也就没办法读取文件列表以及对文件列表进行修改了。 链接 123## ln [-sf] source_filename dist_filename-s ：默认是实体链接，加 -s 为符号链接-f ：如果目标文件存在时，先删除目标文件 1. 实体链接在目录下创建一个条目，记录着文件名与 inode 编号，这个 inode 就是源文件的 inode。 删除任意一个条目，文件还是存在，只要引用数量不为 0。 有以下限制：不能跨越文件系统、不能对目录进行链接。 1234## ln /etc/crontab .## ll -i /etc/crontab crontab34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 crontab34474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab 2. 符号链接符号链接文件保存着源文件所在的绝对路径，在读取时会定位到源文件上，可以理解为 Windows 的快捷方式。 当源文件被删除了，链接文件就打不开了。 因为记录的是路径，所以可以为目录建立符号链接。 123## ll -i /etc/crontab /root/crontab234474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab 获取文件内容1. cat取得文件内容。 12## cat [-AbEnTv] filename-n ：打印出行号，连同空白行也会有行号，-b 不会 2. tac是 cat 的反向操作，从最后一行开始打印。 3. more和 cat 不同的是它可以一页一页查看文件内容，比较适合大文件的查看。 4. less和 more 类似，但是多了一个向前翻页的功能。 5. head取得文件前几行。 12## head [-n number] filename-n ：后面接数字，代表显示几行的意思 6. tail是 head 的反向操作，只是取得是后几行。 7. od以字符或者十六进制的形式显示二进制文件。 指令与文件搜索1. which指令搜索。 12## which [-a] command-a ：将所有指令列出，而不是只列第一个 2. whereis文件搜索。速度比较快，因为它只搜索几个特定的目录。 1## whereis [-bmsu] dirname/filename 3. locate文件搜索。可以用关键字或者正则表达式进行搜索。 locate 使用 /var/lib/mlocate/ 这个数据库来进行搜索，它存储在内存中，并且每天更新一次，所以无法用 locate 搜索新建的文件。可以使用 updatedb 来立即更新数据库。 12## locate [-ir] keyword-r：正则表达式 4. find文件搜索。可以使用文件的属性和权限进行搜索。 12## find [basedir] [option]example: find . -name &quot;shadow*&quot; ① 与时间有关的选项 1234-mtime n ：列出在 n 天前的那一天修改过内容的文件-mtime +n ：列出在 n 天之前 (不含 n 天本身) 修改过内容的文件-mtime -n ：列出在 n 天之内 (含 n 天本身) 修改过内容的文件-newer file ： 列出比 file 更新的文件 +4、4 和 -4 的指示的时间范围如下： ② 与文件拥有者和所属群组有关的选项 123456-uid n-gid n-user name-group name-nouser ：搜索拥有者不存在 /etc/passwd 的文件-nogroup：搜索所属群组不存在于 /etc/group 的文件 ③ 与文件权限和名称有关的选项 123456-name filename-size [+-]SIZE：搜寻比 SIZE 还要大 (+) 或小 (-) 的文件。这个 SIZE 的规格有：c: 代表 byte，k: 代表 1024bytes。所以，要找比 50KB 还要大的文件，就是 -size +50k-type TYPE-perm mode ：搜索权限等于 mode 的文件-perm -mode ：搜索权限包含 mode 的文件-perm /mode ：搜索权限包含任一 mode 的文件 六、压缩与打包压缩文件名Linux 底下有很多压缩文件名，常见的如下： 扩展名 压缩程序 *.Z compress *.zip zip *.gz gzip *.bz2 bzip2 *.xz xz *.tar tar 程序打包的数据，没有经过压缩 *.tar.gz tar 程序打包的文件，经过 gzip 的压缩 *.tar.bz2 tar 程序打包的文件，经过 bzip2 的压缩 *.tar.xz tar 程序打包的文件，经过 xz 的压缩 压缩指令1. gzipgzip 是 Linux 使用最广的压缩指令，可以解开 compress、zip 与 gzip 所压缩的文件。 经过 gzip 压缩过，源文件就不存在了。 有 9 个不同的压缩等级可以使用。 可以使用 zcat、zmore、zless 来读取压缩文件的内容。 123456$ gzip [-cdtv#] filename-c ：将压缩的数据输出到屏幕上-d ：解压缩-t ：检验压缩文件是否出错-v ：显示压缩比等信息-# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6 2. bzip2提供比 gzip 更高的压缩比。 查看命令：bzcat、bzmore、bzless、bzgrep。 12$ bzip2 [-cdkzv#] filename-k ：保留源文件 3. xz提供比 bzip2 更佳的压缩比。 可以看到，gzip、bzip2、xz 的压缩比不断优化。不过要注意的是，压缩比越高，压缩的时间也越长。 查看命令：xzcat、xzmore、xzless、xzgrep。 1$ xz [-dtlkc#] filename 打包压缩指令只能对一个文件进行压缩，而打包能够将多个文件打包成一个大文件。tar 不仅可以用于打包，也可以使用 gzip、bzip2、xz 将打包文件进行压缩。 123456789101112$ tar [-z|-j|-J] [cv] [-f 新建的 tar 文件] filename... ==打包压缩$ tar [-z|-j|-J] [tv] [-f 已有的 tar 文件] ==查看$ tar [-z|-j|-J] [xv] [-f 已有的 tar 文件] [-C 目录] ==解压缩-z ：使用 zip；-j ：使用 bzip2；-J ：使用 xz；-c ：新建打包文件；-t ：查看打包文件里面有哪些文件；-x ：解打包或解压缩的功能；-v ：在压缩/解压缩的过程中，显示正在处理的文件名；-f : filename：要处理的文件；-C 目录 ： 在特定目录解压缩。 使用方式 命令 打包压缩 tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称 查 看 tar -jtv -f filename.tar.bz2 解压缩 tar -jxv -f filename.tar.bz2 -C 要解压缩的目录 七、Bash可以通过 Shell 请求内核提供服务，Bash 正是 Shell 的一种。 特性 命令历史：记录使用过的命令 命令与文件补全：快捷键：tab 命名别名：例如 ll 是 ls -al 的别名 shell scripts 通配符：例如 ls -l /usr/bin/X* 列出 /usr/bin 下面所有以 X 开头的文件 变量操作对一个变量赋值直接使用 =。 对变量取用需要在变量前加上 $ ，也可以用 ${} 的形式； 输出变量使用 echo 命令。 123$ x=abc$ echo $x$ echo ${x} 变量内容如果有空格，必须使用双引号或者单引号。 双引号内的特殊字符可以保留原本特性，例如 x=”lang is $LANG”，则 x 的值为 lang is zh_TW.UTF-8； 单引号内的特殊字符就是特殊字符本身，例如 x=’lang is $LANG’，则 x 的值为 lang is $LANG。 可以使用 指令 或者 $(指令) 的方式将指令的执行结果赋值给变量。例如 version=$(uname -r)，则 version 的值为 4.15.0-22-generic。 可以使用 export 命令将自定义变量转成环境变量，环境变量可以在子程序中使用，所谓子程序就是由当前 Bash 而产生的子 Bash。 Bash 的变量可以声明为数组和整数数字。注意数字类型没有浮点数。如果不进行声明，默认是字符串类型。变量的声明使用 declare 命令： 12345$ declare [-aixr] variable-a ： 定义为数组类型-i ： 定义为整数类型-x ： 定义为环境变量-r ： 定义为 readonly 类型 使用 [ ] 来对数组进行索引操作： 123$ array[1]=a$ array[2]=b$ echo ${array[1]} 指令搜索顺序 以绝对或相对路径来执行指令，例如 /bin/ls 或者 ./ls ； 由别名找到该指令来执行； 由 Bash 内置的指令来执行； 按 $PATH 变量指定的搜索路径的顺序找到第一个指令来执行。 数据流重定向重定向指的是使用文件代替标准输入、标准输出和标准错误输出。 1 代码 运算符 标准输入 (stdin) 0 &lt; 或 &lt;&lt; 标准输出 (stdout) 1 &gt; 或 &gt;&gt; 标准错误输出 (stderr) 2 2&gt; 或 2&gt;&gt; 其中，有一个箭头的表示以覆盖的方式重定向，而有两个箭头的表示以追加的方式重定向。 可以将不需要的标准输出以及标准错误输出重定向到 /dev/null，相当于扔进垃圾箱。 如果需要将标准输出以及标准错误输出同时重定向到一个文件，需要将某个输出转换为另一个输出，例如 2&gt;&amp;1 表示将标准错误输出转换为标准输出。 1$ find /home -name .bashrc &gt; list 2&gt;&amp;1 八、管道指令管道是将一个命令的标准输出作为另一个命令的标准输入，在数据需要经过多个步骤的处理之后才能得到我们想要的内容时就可以使用管道。 在命令之间使用 | 分隔各个管道命令。 1$ ls -al /etc | less 提取指令cut 对数据进行切分，取出想要的部分。 切分过程一行一行地进行。 1234$ cut-d ：分隔符-f ：经过 -d 分隔后，使用 -f n 取出第 n 个区间-c ：以字符为单位取出区间 示例 1：last 显示登入者的信息，取出用户名。 123456$ lastroot pts/1 192.168.201.101 Sat Feb 7 12:35 still logged inroot pts/1 192.168.201.101 Fri Feb 6 12:13 - 18:46 (06:33)root pts/1 192.168.201.254 Thu Feb 5 22:37 - 23:53 (01:16)$ last | cut -d ' ' -f 1 示例 2：将 export 输出的信息，取出第 12 字符以后的所有字符串。 12345678$ exportdeclare -x HISTCONTROL=&quot;ignoredups&quot;declare -x HISTSIZE=&quot;1000&quot;declare -x HOME=&quot;/home/dmtsai&quot;declare -x HOSTNAME=&quot;study.centos.vbird&quot;.....(其他省略).....$ export | cut -c 12- 排序指令sort 用于排序。 123456789$ sort [-fbMnrtuk] [file or stdin]-f ：忽略大小写-b ：忽略最前面的空格-M ：以月份的名字来排序，例如 JAN，DEC-n ：使用数字-r ：反向排序-u ：相当于 unique，重复的内容只出现一次-t ：分隔符，默认为 tab-k ：指定排序的区间 示例：/etc/passwd 文件内容以 : 来分隔，要求以第三列进行排序。 12345$ cat /etc/passwd | sort -t ':' -k 3root:x:0:0:root:/root:/bin/bashdmtsai:x:1000:1000:dmtsai:/home/dmtsai:/bin/bashalex:x:1001:1002::/home/alex:/bin/basharod:x:1002:1003::/home/arod:/bin/bash uniq 可以将重复的数据只取一个。 123$ uniq [-ic]-i ：忽略大小写-c ：进行计数 示例：取得每个人的登录总次数 1234567$ last | cut -d ' ' -f 1 | sort | uniq -c16 (unknown47 dmtsai4 reboot7 root1 wtmp 双向输出重定向输出重定向会将输出内容重定向到文件中，而 tee 不仅能够完成这个功能，还能保留屏幕上的输出。也就是说，使用 tee 指令，一个输出会同时传送到文件和屏幕上。 1$ tee [-a] file 字符转换指令tr 用来删除一行中的字符，或者对字符进行替换。 12$ tr [-ds] SET1 ...-d ： 删除行中 SET1 这个字符串 示例，将 last 输出的信息所有小写转换为大写。 1$ last | tr '[a-z]' '[A-Z]' col 将 tab 字符转为空格字符。 12$ col [-xb]-x ： 将 tab 键转换成对等的空格键 expand 将 tab 转换一定数量的空格，默认是 8 个。 12$ expand [-t] file-t ：tab 转为空格的数量 join 将有相同数据的那一行合并在一起。 12345$ join [-ti12] file1 file2-t ：分隔符，默认为空格-i ：忽略大小写的差异-1 ：第一个文件所用的比较字段-2 ：第二个文件所用的比较字段 paste 直接将两行粘贴在一起。 12$ paste [-d] file1 file2-d ：分隔符，默认为 tab 分区指令split 将一个文件划分成多个文件。 1234$ split [-bl] file PREFIX-b ：以大小来进行分区，可加单位，例如 b, k, m 等-l ：以行数来进行分区。- PREFIX ：分区文件的前导名称 xargs(划重点)xargs 可以读入 stdin 的数据，并且以空格符或断行字符作为分辨，将 stdin 的资料分隔成为 arguments xargs命令还可以从文件读取条目，而不是从标准输入读取条目。使用-a选项，后跟文件名。 xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。 选项与参数： -0 ：如果输入的 stdin 含有特殊字符，例如 `, , 空格键等等字符时，这个 -0 参数可以将他还原成一般字符。这个参数可以用于特殊状态喔！ -e ：这个是 EOF (end of file) 的意思。后面可以接一个字符串，当 xargs 分析到这个字符串时，就会停止继续工作！ -p ：在执行每个指令的 argument 时，都会询问使用者的意思； -n ：后面接次数，每次 command 指令执行时，要使用几个参数的意思。 -t 表示先打印命令，然后再执行。 当 xargs 后面没有接任何的指令时，默认是以 echo 来进行输出喔！ 实例123456[root@VM-0-16-centos ~]# find /usr/sbin -perm /7000 | xargs ls -l-rwxr-sr-x 1 root root 11224 Apr 1 2020 /usr/sbin/netreport-rwsr-xr-x 1 root root 11232 Apr 1 2020 /usr/sbin/pam_timestamp_check-rwsr-xr-x 1 root root 36272 Apr 1 2020 /usr/sbin/unix_chkpwd-rws--x--x 1 root root 40328 Aug 9 2019 /usr/sbin/userhelper-rwsr-xr-x 1 root root 11296 Apr 1 2020 /usr/sbin/usernetctl 单行与多行的变换-n 1234567891011121314151617[root@VM-0-16-centos ~]# cat test a b c d e f gh i j k l m no p qr s tu v w x y z// xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。 单行变多行通过-n指令实现。[root@VM-0-16-centos ~]# cat test |xargsa b c d e f g h i j k l m n o p q r s t u v w x y z[root@VM-0-16-centos ~]# cat test |xargs -n4a b c de f g hi j k lm n o pq r s tu v w xy z -t 输出执行参数 12345[root@VM-0-16-centos ~]# ls |grep lsroot| xargs -t echo lsrootaa lsrootab lsrootac lsrootaa lsrootab lsrootac[root@VM-0-16-centos ~]# ls |grep lsroot| xargs -t rm -rfrm -rf lsrootaa lsrootab lsrootac -p 执行时进行询问 123456789101112131415[root@VM-0-16-centos ~]# cat test |xargs -p -n4echo a b c d ?...ya b c decho e f g h ?...ye f g hecho i j k l ?...yi j k lecho m n o p ?...ym n o pecho q r s t ?...yq r s techo u v w x ?...yu v w xecho y z ?...yy z 九、正则表达式grepg/re/p（globally search a regular expression and print)，使用正则表示式进行全局查找并打印。 123456$ grep [-acinv] [--color=auto] 搜寻字符串 filename-c ： 统计匹配到行的个数-i ： 忽略大小写-n ： 输出行号-v ： 反向选择，也就是显示出没有 搜寻字符串 内容的那一行--color=auto ：找到的关键字加颜色显示 示例：把含有 the 字符串的行提取出来（注意默认会有 –color=auto 选项，因此以下内容在 Linux 中有颜色显示 the 字符串） 123456$ grep -n 'the' regular_express.txt8:I can't finish the test.12:the symbol '*' is represented as start.15:You are the best is mean you are the no. 1.16:The world Happy is the same with &quot;glad&quot;.18:google is the best tools for search keyword 示例：正则表达式 a{m,n} 用来匹配字符 a m~n 次，这里需要将 { 和 } 进行转义，因为它们在 shell 是有特殊意义的。 1$ grep -n 'a\\{2,5\\}' regular_express.txt printf用于格式化输出。它不属于管道命令，在给 printf 传数据时需要使用 $( ) 形式。 1234$ printf '%10s %5i %5i %5i %8.2f \\n' $(cat printf.txt) DmTsai 80 60 92 77.33 VBird 75 55 80 70.00 Ken 60 90 70 73.33 awk是由 Alfred Aho，Peter Weinberger 和 Brian Kernighan 创造，awk 这个名字就是这三个创始人名字的首字母。 awk 每次处理一行，处理的最小单位是字段，每个字段的命名方式为：$n，n 为字段号，从 1 开始，$0 表示一整行。 示例：取出最近五个登录用户的用户名和 IP。首先用 last -n 5 取出用最近五个登录用户的所有信息，可以看到用户名和 IP 分别在第 1 列和第 3 列，我们用 $1 和 $3 就能取出这两个字段，然后用 print 进行打印。 123456789101112$ last -n 5dmtsai pts/0 192.168.1.100 Tue Jul 14 17:32 still logged indmtsai pts/0 192.168.1.100 Thu Jul 9 23:36 - 02:58 (03:22)dmtsai pts/0 192.168.1.100 Thu Jul 9 17:23 - 23:36 (06:12)dmtsai pts/0 192.168.1.100 Thu Jul 9 08:02 - 08:17 (00:14)dmtsai tty1 Fri May 29 11:55 - 12:11 (00:15)$ last -n 5 | awk '{print $1 &quot;\\t&quot; $3}'dmtsai 192.168.1.100dmtsai 192.168.1.100dmtsai 192.168.1.100dmtsai 192.168.1.100dmtsai Fri 可以根据字段的某些条件进行匹配，例如匹配字段小于某个值的那一行数据。 1$ awk '条件类型 1 {动作 1} 条件类型 2 {动作 2} ...' filename 示例：/etc/passwd 文件第三个字段为 UID，对 UID 小于 10 的数据进行处理。 1234$ cat /etc/passwd | awk 'BEGIN {FS=&quot;:&quot;} $3 &lt; 10 {print $1 &quot;\\t &quot; $3}'root 0bin 1daemon 2 awk 变量： 变量名称 代表意义 NF 每一行拥有的字段总数 NR 目前所处理的是第几行数据 FS 目前的分隔字符，默认是空格键 示例：显示正在处理的行号以及每一行有多少字段 123456$ last -n 5 | awk '{print $1 &quot;\\t lines: &quot; NR &quot;\\t columns: &quot; NF}'dmtsai lines: 1 columns: 10dmtsai lines: 2 columns: 10dmtsai lines: 3 columns: 10dmtsai lines: 4 columns: 10dmtsai lines: 5 columns: 9 十、进程管理查看进程1. ps查看某个时间点的进程信息。 示例：查看自己的进程 1## ps -l 示例：查看系统所有进程 1## ps aux 示例：查看特定的进程 1## ps aux | grep threadx 2. pstree查看进程树。 示例：查看所有进程树 1## pstree -A 3. top实时显示进程信息。 示例：两秒钟刷新一次 1## top -d 2 4. netstat查看占用端口的进程 示例：查看特定端口的进程 1## netstat -anp | grep port 进程状态 状态 说明 R running or runnable (on run queue) 正在执行或者可执行，此时进程位于执行队列中。 D uninterruptible sleep (usually I/O) 不可中断阻塞，通常为 IO 阻塞。 S interruptible sleep (waiting for an event to complete) 可中断阻塞，此时进程正在等待某个事件完成。 Z zombie (terminated but not reaped by its parent) 僵死，进程已经终止但是尚未被其父进程获取信息。 T stopped (either by a job control signal or because it is being traced) 结束，进程既可以被作业控制信号结束，也可能是正在被追踪。 SIGCHLD当一个子进程改变了它的状态时（停止运行，继续运行或者退出），有两件事会发生在父进程中： 得到 SIGCHLD 信号； waitpid() 或者 wait() 调用会返回。 其中子进程发送的 SIGCHLD 信号包含了子进程的信息，比如进程 ID、进程状态、进程使用 CPU 的时间等。 在子进程退出时，它的进程描述符不会立即释放，这是为了让父进程得到子进程信息，父进程通过 wait() 和 waitpid() 来获得一个已经退出的子进程的信息。 wait()1pid_t wait(int *status) 父进程调用 wait() 会一直阻塞，直到收到一个子进程退出的 SIGCHLD 信号，之后 wait() 函数会销毁子进程并返回。 如果成功，返回被收集的子进程的进程 ID；如果调用进程没有子进程，调用就会失败，此时返回 -1，同时 errno 被置为 ECHILD。 参数 status 用来保存被收集的子进程退出时的一些状态，如果对这个子进程是如何死掉的毫不在意，只想把这个子进程消灭掉，可以设置这个参数为 NULL。 waitpid()1pid_t waitpid(pid_t pid, int *status, int options) 作用和 wait() 完全相同，但是多了两个可由用户控制的参数 pid 和 options。 pid 参数指示一个子进程的 ID，表示只关心这个子进程退出的 SIGCHLD 信号。如果 pid=-1 时，那么和 wait() 作用相同，都是关心所有子进程退出的 SIGCHLD 信号。 options 参数主要有 WNOHANG 和 WUNTRACED 两个选项，WNOHANG 可以使 waitpid() 调用变成非阻塞的，也就是说它会立即返回，父进程可以继续执行其它任务。 孤儿进程一个父进程退出，而它的一个或多个子进程还在运行，那么这些子进程将成为孤儿进程。 孤儿进程将被 init 进程（进程号为 1）所收养，并由 init 进程对它们完成状态收集工作。 由于孤儿进程会被 init 进程收养，所以孤儿进程不会对系统造成危害。 僵尸进程一个子进程的进程描述符在子进程退出时不会释放，只有当父进程通过 wait() 或 waitpid() 获取了子进程信息后才会释放。如果子进程退出，而父进程并没有调用 wait() 或 waitpid()，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵尸进程。 僵尸进程通过 ps 命令显示出来的状态为 Z（zombie）。 系统所能使用的进程号是有限的，如果产生大量僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程。 要消灭系统中大量的僵尸进程，只需要将其父进程杀死，此时僵尸进程就会变成孤儿进程，从而被 init 进程所收养，这样 init 进程就会释放所有的僵尸进程所占有的资源，从而结束僵尸进程。 单引号与双引号 单引号、双引号用于用户把带有空格的字符串赋值给变量的分界符。 123456[root@VM-0-16-centos ~]# str=&quot;sdf111 sdf&quot;[root@VM-0-16-centos ~]# echo $strsdf111 sdf// 如果没有单引号或双引号，shell会把空格后的字符串解释为命令。[root@localhost sh]# str=Today is Mondaybash: is: command not found 单引号和双引号的区别。单引号告诉shell忽略所有特殊字符，而双引号忽略大多数，但不包括 $ \\ 双引号中的'$'（参数替换）和'‘（命令替换）是例外，所以，两者基本上没有什么区别，除非在内容中遇到了参数替换符$`和命令替换符```。 反引号 (```) 位于键盘的Tab键的上方，1键的左方。注意与单引号(‘)位于Enter键的左方的区别。在Linux中起着命令替换的作用。命令替换是指shell能够将一个命令的标准输出插在一个命令行中任何位置。 如，shell会执行反引号中的date命令，把结果插入到echo命令显示的内容中。 12[root@localhost sh]# echo The date is `date`The date is 2011年 03月 14日 星期一 21:15:43 CST 参考资料 鸟哥. 鸟 哥 的 Linux 私 房 菜 基 础 篇 第 三 版[J]. 2009. Linux 平台上的软件包管理 Linux 之守护进程、僵死进程与孤儿进程 What is the difference between a symbolic link and a hard link? Linux process states GUID Partition Table 详解 wait 和 waitpid 函数 IDE、SATA、SCSI、SAS、FC、SSD 硬盘类型介绍 Akai IB-301S SCSI Interface for S2800,S3000 Parallel ATA ADATA XPG SX900 256GB SATA 3 SSD Review – Expanded Capacity and SandForce Driven Speed Decoding UCS Invicta – Part 1 硬盘 Difference between SAS and SATA BIOS File system design case studies Programming Project #4 FILE SYSTEM DESIGN","link":"/2021/08/05/linux/Linux%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"},{"title":"Linux 高频命令记录","text":"原文地址：https://www.cnblogs.com/gaojun/p/3359355.html 1、ls命令就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。 常用参数搭配： 1234567ls -a 列出目录所有文件，包含以.开始的隐藏文件ls -A 列出除.及..的其它文件ls -r 反序排列ls -t 以文件修改时间排序ls -S 以文件大小排序ls -h 以易读大小显示ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 实例： (1) 按易读方式按时间反序排序，并显示文件详细信息 1ls -lhrt (2) 按大小反序显示文件详细信息 1ls -lrS (3)列出当前目录中所有以”t”开头的目录的详细内容 1ls -l t* (4) 列出文件绝对路径（不包含隐藏文件） 1ls | sed &quot;s:^:`pwd`/:&quot; (5) 列出文件绝对路径（包含隐藏文件） 1find $pwd -maxdepth 1 | xargs ls -ld 2、cd 命令cd(changeDirectory) 命令语法： 1cd [目录名] 说明：切换当前目录至 dirName。 实例： （1）进入要目录 1cd / （2）进入 “home” 目录 1cd ~ （3）进入上一次工作路径 1cd - （4）把上个命令的参数作为cd参数使用。 1cd !$ 3、pwd 命令pwd 命令用于查看当前工作目录路径。 实例： （1）查看当前路径 1pwd （2）查看软链接的实际路径 1pwd -P 4、mkdir 命令 mkdir 命令用于创建文件夹。 可用选项： -m: 对新建目录设置存取权限，也可以用 chmod 命令设置; -p: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。 实例： （1）当前工作目录下创建名为 t的文件夹 1mkdir t （2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建： 1mkdir -p /tmp/test/t1/t 5、rm 命令删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。 1rm [选项] 文件… 实例： （1）删除任何 .log 文件，删除前逐一询问确认： 1rm -i *.log （2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认： 1rm -rf test （3）删除以 -f 开头的文件 1rm -- -f* 6、rmdir 命令从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。 注意：不能删除非空目录 实例： （1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除： 1rmdir -p parent/child/child11 7、mv 命令移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。 当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。 实例： （1）将文件 test.log 重命名为 test1.txt 1mv test.log test1.txt （2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 1mv llog1.txt log2.txt log3.txt /test3 （3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 1mv -i log1.txt log2.txt （4）移动当前文件夹下的所有文件到上一级目录 1mv * ../ 8、cp 命令将源文件复制至目标文件，或将多个源文件复制至目标目录。 注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！ 123-i 提示-r 复制目录及目录内所有项目-a 复制的文件与原文件时间一样 实例： （1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。 1cp -ai a.txt test （2）为 a.txt 建立一个链接（快捷方式） 1cp -s a.txt link_a.txt 9、cat 命令cat 主要有三大功能： 1.一次显示整个文件: 1cat filename 2.从键盘创建一个文件: 1cat &gt; filename 只能创建新文件，不能编辑已有文件。 3.将几个文件合并为一个文件: 1cat file1 file2 &gt; file -b 对非空输出行号 -n 输出所有行号 实例： （1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里 1cat -n log2012.log log2013.log （2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里 1cat -b log2012.log log2013.log log.log （3）使用 here doc 生成新文件 12345678910cat &gt;log.txt &lt;&lt;EOF&gt;Hello&gt;World&gt;PWD=$(pwd)&gt;EOFls -l log.txtcat log.txtHelloWorldPWD=/opt/soft/test （4）反向列示 1234tac log.txtPWD=/opt/soft/testWorldHello 10、more 命令功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。 命令参数： 123456789+n 从笫 n 行开始显示-n 定义屏幕大小为n行+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示-d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能-l 忽略Ctrl+l（换页）字符-p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似-s 把连续的多个空行显示为一行-u 把文件内容中的下画线去掉 常用操作命令： 123456789Enter 向下 n 行，需要定义。默认为 1 行Ctrl+F 向下滚动一屏空格键 向下滚动一屏Ctrl+B 返回上一屏= 输出当前行的行号:f 输出文件名和当前行的行号V 调用vi编辑器!命令 调用Shell，并执行命令q 退出more 实例： （1）显示文件中从第3行起的内容 1more +3 text.txt （2）在所列出文件目录详细信息，借助管道使每次显示 5 行 1ls -l | more -5 按空格显示下 5 行。 11、less 命令less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。 常用命令参数： 12345678910111213141516171819-i 忽略搜索时的大小写-N 显示每行的行号-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来-s 显示连续空行为一行/字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n：重复前一个搜索（与 / 或 ? 有关）N：反向重复前一个搜索（与 / 或 ? 有关）-x &lt;数字&gt; 将“tab”键显示为规定的数字空格b 向后翻一页d 向后翻半页h 显示帮助界面Q 退出less 命令u 向前滚动半页y 向前滚动一行空格键 滚动一行回车键 滚动一页[pagedown]： 向下翻动一页[pageup]： 向上翻动一页 实例： （1）ps 查看进程信息并通过 less 分页显示 1ps -aux | less -N （2）查看多个文件 1less 1.log 2.log 可以使用 n 查看下一个，使用 p 查看前一个。 12、head 命令head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。 常用参数： 1-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数） 实例： （1）显示 1.log 文件中前 20 行 1head 1.log -n 20 （2）显示 1.log 文件前 20 字节 1head -c 20 log2014.log （3）显示 t.log最后 10 行 1head -n -10 t.log 13、tail 命令用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。 常用参数： 12-f 循环读取（常用于查看递增的日志文件）-n&lt;行数&gt; 显示行数（从后向前） （1）循环读取逐渐增加的文件内容 1ping 127.0.0.1 &gt; ping.log &amp; 后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。 1tail -f ping.log （查看日志） 14、which 命令在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索： 1234which 查看可执行文件的位置。whereis 查看文件的位置。locate 配合数据库查看文件位置。find 实际搜寻硬盘查询文件名称。 which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。 常用参数： 1-n 指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。 实例： （1）查看 ls 命令是否存在，执行哪个 1which ls （2）查看 which 1which which （3）查看 cd 1which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令） 查看当前 PATH 配置： 1echo $PATH 或使用 env 查看所有环境变量及对应值 15、whereis 命令whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。 常用参数： 1234-b 定位可执行文件。-m 定位帮助文件。-s 定位源代码文件。-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。 实例： （1）查找 locate 程序相关文件 1whereis locate （2）查找 locate 的源码文件 1whereis -s locate （3）查找 lcoate 的帮助文件 1whereis -m locate 16、locate 命令locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。 locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找 常用参数： 123-l num（要显示的行数）-f 将特定的档案系统排除在外，如将proc排除在外-r 使用正则运算式做为寻找条件 实例： （1）查找和 pwd 相关的所有文件(文件名中包含 pwd） 1locate pwd （2）搜索 etc 目录下所有以 sh 开头的文件 1locate /etc/sh （3）查找 /var 目录下，以 reason 结尾的文件 1locate -r '^/var.*reason$'（其中.表示一个字符，*表示任务多个；.*表示任意多个字符） 17、find 命令用于在文件树中查找文件，并作出相应的处理。 命令格式： 1find pathname -options [-print -exec -ok ...] 命令参数： 1234pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。-print： find命令将匹配的文件输出到标准输出。-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为'command' { } \\;，注意{ }和\\；之间的空格。-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。 命令选项： 1234567891011121314151617181920212223-name 按照文件名查找文件-perm 按文件权限查找文件-user 按文件属主查找文件-group 按照文件所属的组来查找文件。-type 查找某一类型的文件，诸如： b - 块设备文件 d - 目录 c - 字符设备文件 l - 符号链接文件 p - 管道文件 f - 普通文件-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小-amin n 查找系统中最后N分钟访问的文件-atime n 查找系统中最后n*24小时访问的文件-cmin n 查找系统中最后N分钟被改变文件状态的文件-ctime n 查找系统中最后n*24小时被改变文件状态的文件-mmin n 查找系统中最后N分钟被改变文件数据的文件-mtime n 查找系统中最后n*24小时被改变文件数据的文件(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )-maxdepth n 最大查找目录深度-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项 实例： （1）查找 48 小时内修改过的文件 1find -atime -2 （2）在当前目录查找 以 .log 结尾的文件。 . 代表当前目录 1find ./ -name '*.log' （3）查找 /opt 目录下 权限为 777 的文件 1find /opt -perm 777 （4）查找大于 1K 的文件 1find -size +1000c 查找等于 1000 字符的文件 1find -size 1000c -exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。 实例： （5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒） 1find . -type f -mtime +10 -exec rm -f {} \\; （6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除 1find . -name '*.log' mtime +5 -ok -exec rm {} \\; （7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件 1find . -f -name 'passwd*' -exec grep &quot;pkg&quot; {} \\; （8）用 exec 选项执行 cp 命令 1find . -name '*.log' -exec cp {} test3 \\; -xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。 实例： （9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型 1find . -type f -print | xargs file （10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件 12find . -type f -name &quot;*.js&quot; -exec grep -lF 'ueditor' {} \\;find -type f -name '*.js' | xargs grep -lF 'editor' （11）利用 xargs 执行 mv 命令 1find . -name &quot;*.log&quot; | xargs -i mv {} test4 （12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行： 1find . -name \\*(转义） -type f -print | xargs grep -n 'hostnames' （13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件： 1find . -name '[a-z]*[4-9].log' -print （14）在 test 目录查找不在 test4 子目录查找 1find test -path 'test/test4' -prune -o -print （15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件 1find -newer log2012.log ! -newer log2017.log 使用 depth 选项： depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。 实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找 1find / -name &quot;CON.FILE&quot; -depth -print 18、chmod 命令用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。 每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。 以文件 log2012.log 为例： 1-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log 第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。 常用参数： 12-c 当发生改变时，报告处理信息-R 处理指定目录以及其子目录下所有文件 权限范围： 1234u ：目录或者文件的当前的用户g ：目录或者文件的当前的群组o ：除了目录或者文件的当前用户或群组之外的用户或者群组a ：所有的用户及群组 权限代号： 12345r ：读权限，用数字4表示w ：写权限，用数字2表示x ：执行权限，用数字1表示- ：删除权限，用数字0表示s ：特殊权限 实例： （1）增加文件 t.log 所有用户可执行权限 1chmod a+x t.log （2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息 1chmod u=r t.log -c （3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限 1chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c) （4）将 test 目录及其子目录所有文件添加可读权限 1chmod u+r,g+r,o+r -R text/ -c 19、tar 命令 用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。 弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件 常用参数： 12345678910-c 建立新的压缩文件-f 指定压缩文件-r 添加文件到已经压缩文件包中-u 添加改了和现有的文件到压缩包中-x 从压缩包中抽取文件-t 显示压缩文件中的内容-z 支持gzip压缩-j 支持bzip2压缩-Z 支持compress解压文件-v 显示操作过程 有关 gzip 及 bzip2 压缩: 12345gzip 实例：压缩 gzip fileName .tar.gz 和.tgz 解压：gunzip filename.gz 或 gzip -d filename.gz 对应：tar zcvf filename.tar.gz tar zxvf filename.tar.gzbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2 对应：tar jcvf filename.tar.gz 解压：tar jxvf filename.tar.bz2 实例： （1）将文件全部打包成 tar 包 1tar -cvf log.tar 1.log,2.log 或tar -cvf log.* （2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩 1tar -zcvf /tmp/etc.tar.gz /etc （3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的） 1tar -ztvf /tmp/etc.tar.gz （4）要压缩打包 /home, /etc ，但不要 /home/dmtsai 1tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc 20、chown 命令chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。 12-c 显示更改的部分的信息-R 处理指定目录及子目录 实例： （1）改变拥有者和群组 并显示改变信息 1chown -c mail:mail log2012.log （2）改变文件群组 1chown -c :mail t.log （3）改变文件夹及子文件目录属主及属组为 mail 1chown -cR mail: test/ 21、df 命令显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示： 123456-a 全部文件系统列表-h 以方便阅读的方式显示信息-i 显示inode信息-k 区块为1024字节-l 只显示本地磁盘-T 列出文件系统类型 实例： （1）显示磁盘使用情况 1df -l （2）以易读方式列出所有文件系统及其类型 1df -haT 22、du 命令du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看： 命令格式： 1du [选项] [文件] 常用参数： 1234567-a 显示目录中所有文件大小-k 以KB为单位显示文件大小-m 以MB为单位显示文件大小-g 以GB为单位显示文件大小-h 以易读方式显示文件大小-s 仅显示总计-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和 实例： （1）以易读方式显示文件夹内及子文件夹大小 1du -h scf/ （2）以易读方式显示文件夹内所有文件大小 1du -ah scf/ （3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和 1du -hc test/ scf/ （4）输出当前目录下各个子目录所使用的空间 1du -hc --max-depth=1 scf/ 23、ln 命令功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。 链接分类：软件链接及硬链接 软链接： 1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式 2.软链接可以 跨文件系统 ，硬链接不可以 3.软链接可以对一个不存在的文件名进行链接 4.软链接可以对目录进行链接 硬链接: 1.硬链接，以文件副本的形式存在。但不占用实际空间。 2.不允许给目录创建硬链接 3.硬链接只有在同一个文件系统中才能创建 需要注意： 第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化； 第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。 第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。 常用参数： 123-b 删除，覆盖以前建立的链接-s 软链接（符号链接）-v 显示详细处理过程 实例： （1）给文件创建软链接，并显示操作信息 1ln -sv source.log link.log （2）给文件创建硬链接，并显示操作信息 1ln -v source.log link1.log （3）给目录创建软链接 1ln -sv /opt/soft/test/test3 /opt/soft/test/test5 24、date 命令显示或设定系统的日期与时间。 命令参数： 123456789101112131415-d&lt;字符串&gt; 显示字符串所指的日期与时间。字符串前后必须加上双引号。-s&lt;字符串&gt; 根据字符串来设置日期与时间。字符串前后必须加上双引号。-u 显示GMT。%H 小时(00-23)%I 小时(00-12)%M 分钟(以00-59来表示)%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。%S 秒(以本地的惯用法来表示)%a 星期的缩写。%A 星期的完整名称。%d 日期(以01-31来表示)。%D 日期(含年月日)。%m 月份(以01-12来表示)。%y 年份(以00-99来表示)。%Y 年份(以四位数来表示)。 实例： （1）显示下一天 1date +%Y%m%d --date=&quot;+1 day&quot; //显示下一天的日期 （2）-d参数使用 1234567date -d &quot;nov 22&quot; 今年的 11 月 22 日是星期三date -d '2 weeks' 2周后的日期date -d 'next monday' (下周一的日期)date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%ddate -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%ddate -d last-month +%Y%m(上个月是几月)date -d next-month +%Y%m(下个月是几月) 25、cal 命令可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份： 常用参数： 1234-3 显示前一月，当前月，后一月三个月的日历-m 显示星期一为第一列-j 显示在当前年第几天-y [year]显示当前年[year]份的日历 实例： （1）显示指定年月日期 1cal 9 2012 （2）显示2013年每个月日历 1cal -y 2013 （3）将星期一做为第一列,显示前中后三月 1cal -3m 26、grep 命令强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。 grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。 命令格式： 1grep [option] pattern file|dir 常用参数： 123456789-A n --after-context显示匹配字符后n行-B n --before-context显示匹配字符前n行-C n --context 显示匹配字符前后n行-c --count 计算符合样式的列数-i 忽略大小写-l 只列出文件内容符合指定的样式的文件名称-f 从文件中读取关键词-n 显示匹配内容的所在文件中行数-R 递归查找文件夹 grep 的规则表达式: 12345678910111213141516^ #锚定行的开始 如：'^grep'匹配所有以grep开头的行。 $ #锚定行的结束 如：'grep$'匹配所有以grep结尾的行。 . #匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。 * #匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。.* #一起用代表任意字符。 [] #匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。 [^] #匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。 \\(..\\) #标记匹配字符，如'\\(love\\)'，love被标记为1。 \\&lt; #锚定单词的开始，如:'\\&lt;grep'匹配包含以grep开头的单词的行。\\&gt; #锚定单词的结束，如'grep\\&gt;'匹配包含以grep结尾的单词的行。x\\{m\\} #重复字符x，m次，如：'0\\{5\\}'匹配包含5个o的行。 x\\{m,\\} #重复字符x,至少m次，如：'o\\{5,\\}'匹配至少有5个o的行。 x\\{m,n\\} #重复字符x，至少m次，不多于n次，如：'o\\{5,10\\}'匹配5--10个o的行。 \\w #匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。 \\W #\\w的反置形式，匹配一个或多个非单词字符，如点号句号等。 \\b #单词锁定符，如: '\\bgrep\\b'只匹配grep。 实例： （1）查找指定进程 1ps -ef | grep svn （2）查找指定进程个数 1ps -ef | grep svn -c （3）从文件中读取关键词 1cat test1.txt | grep -f key.log （4）从文件夹中递归查找以grep开头的行，并只列出文件 1grep -lR '^grep' /tmp （5）查找非x开关的行内容 1grep '^[^x]' test.txt （6）显示包含 ed 或者 at 字符的内容行 1grep -E 'ed|at' test.txt 27、wc 命令wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出 命令格式： 1wc [option] file.. 命令参数： 1234-c 统计字节数-l 统计行数-m 统计字符数-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串 实例： （1）查找文件的 行数 单词数 字节数 文件名 1wc text.txt 结果： 17 8 70 test.txt （2）统计输出结果的行数 1cat test.txt | wc -l 28、ps 命令ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top linux上进程有5种状态: 运行(正在运行或在运行队列中等待) 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放) 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行) ps 工具标识进程的5种状态码: 12345D 不可中断 uninterruptible sleep (usually IO)R 运行 runnable (on run queue)S 中断 sleepingT 停止 traced or stoppedZ 僵死 a defunct (”zombie”) process 命令参数： 12345678-A 显示所有进程a 显示所有进程-a 显示同一终端下所有进程c 显示进程真实名称e 显示环境变量f 显示进程间的关系r 显示当前终端运行的进程-aux 显示所有包含其它使用的进程 实例： （1）显示当前所有进程环境变量及进程间关系 1ps -ef （2）显示当前所有进程 1ps -A （3）与grep联用查找某进程 1ps -aux | grep apache （4）找出与 cron 与 syslog 这两个服务有关的 PID 号码 1ps aux | grep '(cron|syslog)' 29、top 命令 显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等 常用参数： 1234-c 显示完整的进程命令-s 保密模式-p &lt;进程号&gt; 指定进程显示-n &lt;次数&gt;循环显示次数 实例： （1） 1234567top - 14:06:23 up 70 days, 16:44, 2 users, load average: 1.25, 1.32, 1.35Tasks: 206 total, 1 running, 205 sleeping, 0 stopped, 0 zombieCpu(s): 5.9%us, 3.4%sy, 0.0%ni, 90.4%id, 0.0%wa, 0.0%hi, 0.2%si, 0.0%stMem: 32949016k total, 14411180k used, 18537836k free, 169884k buffersSwap: 32764556k total, 0k used, 32764556k free, 3612636k cachedPID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 28894 root 22 0 1501m 405m 10m S 52.2 1.3 2534:16 java 前五行是当前系统情况整体的统计信息区。 第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下： 14:06:23 — 当前系统时间 up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！） 2 users — 当前有2个用户登录系统 load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。 load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。 第二行，Tasks — 任务（进程），具体信息说明如下： 系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。 第三行，cpu状态信息，具体属性说明如下： 12345675.9%us — 用户空间占用CPU的百分比。3.4% sy — 内核空间占用CPU的百分比。0.0% ni — 改变过优先级的进程占用CPU的百分比90.4% id — 空闲CPU百分比0.0% wa — IO等待占用CPU的百分比0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比0.2% si — 软中断（Software Interrupts）占用CPU的百分比 备注：在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！ 第四行，内存状态，具体信息如下： 123432949016k total — 物理内存总量（32GB）14411180k used — 使用中的内存总量（14GB）18537836k free — 空闲内存总量（18GB）169884k buffers — 缓存的内存量 （169M） 第五行，swap交换分区信息，具体信息说明如下： 123432764556k total — 交换区总量（32GB）0k used — 使用的交换区总量（0K）32764556k free — 空闲交换区总量（32GB）3612636k cached — 缓冲的交换区总量（3.6GB） 第六行，空行。 第七行以下：各进程（任务）的状态监控，项目列信息说明如下： 123456789101112PID — 进程idUSER — 进程所有者PR — 进程优先级NI — nice值。负值表示高优先级，正值表示低优先级VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RESRES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATASHR — 共享内存大小，单位kbS — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程%CPU — 上次更新到现在的CPU时间占用百分比%MEM — 进程使用的物理内存百分比TIME+ — 进程使用的CPU时间总计，单位1/100秒COMMAND — 进程名称（命令名/命令行） top 交互命令 1234567h 显示top交互命令帮助信息c 切换显示命令名称和完整命令行m 以内存使用率排序P 根据CPU使用百分比大小进行排序T 根据时间/累计时间进行排序W 将当前设置写入~/.toprc文件中o或者O 改变显示项目的顺序 30、kill 命令发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。 常用参数： 12345-l 信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称-a 当处理当前进程时，不限制命令名和进程号的对应关系-p 指定kill 命令只打印相关进程的进程号，而不发送任何信号-s 指定发送信号-u 指定用户 实例： （1）先使用ps查找进程pro1，然后用kill杀掉 1kill -9 $(ps -ef | grep pro1) 31、free 命令显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。 命令参数： 123456-b 以Byte显示内存使用情况-k 以kb为单位显示内存使用情况-m 以mb为单位显示内存使用情况-g 以gb为单位显示内存使用情况-s&lt;间隔秒数&gt; 持续显示内存-t 显示内存使用总合 实例： （1）显示内存使用情况 123freefree -kfree -m （2）以总和的形式显示内存的使用信息 1free -t （3）周期性查询内存使用情况 1free -s 10 32、fdisk 命令fdisk 是 Linux 的磁盘分区表操作工具。 语法： 1fdisk [-l] 装置名称 选项与参数： -l ：输出后面接的装置所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。 实例 1 列出所有分区信息 12345678910111213141516171819202122[root@AY120919111755c246621 tmp]# fdisk -lDisk /dev/xvda: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 Device Boot Start End Blocks Id System/dev/xvda1 * 1 2550 20480000 83 Linux/dev/xvda2 2550 2611 490496 82 Linux swap / SolarisDisk /dev/xvdb: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x56f40944 Device Boot Start End Blocks Id System/dev/xvdb2 1 2610 20964793+ 83 Linux 实例 2 找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息 12345678910111213[root@www ~]# df / &lt;==注意：重点在找出磁盘文件名而已Filesystem 1K-blocks Used Available Use% Mounted on/dev/hdc2 9920624 3823168 5585388 41% /[root@www ~]# fdisk /dev/hdc &lt;==仔细看，不要加上数字喔！The number of cylinders for this disk is set to 5005.There is nothing wrong with that, but this is larger than 1024,and could in certain setups cause problems with:1) software that runs at boot time (e.g., old versions of LILO)2) booting and partitioning software from other OSs (e.g., DOS FDISK, OS/2 FDISK)Command (m for help): &lt;==等待你的输入！ 输入 m 后，就会看到底下这些命令介绍 123456789101112131415161718Command (m for help): m &lt;== 输入 m 后，就会看到底下这些命令介绍Command action a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition &lt;==删除一个partition l list known partition types m print this menu n add a new partition &lt;==新增一个partition o create a new empty DOS partition table p print the partition table &lt;==在屏幕上显示分割表 q quit without saving changes &lt;==不储存离开fdisk程序 s create a new empty Sun disklabel t change a partition's system id u change display/entry units v verify the partition table w write table to disk and exit &lt;==将刚刚的动作写入分割表 x extra functionality (experts only) 离开 fdisk 时按下 q，那么所有的动作都不会生效！相反的， 按下w就是动作生效的意思。 123456789101112131415Command (m for help): p &lt;== 这里可以输出目前磁盘的状态Disk /dev/hdc: 41.1 GB, 41174138880 bytes &lt;==这个磁盘的文件名与容量255 heads, 63 sectors/track, 5005 cylinders &lt;==磁头、扇区与磁柱大小Units = cylinders of 16065 * 512 = 8225280 bytes &lt;==每个磁柱的大小 Device Boot Start End Blocks Id System/dev/hdc1 * 1 13 104391 83 Linux/dev/hdc2 14 1288 10241437+ 83 Linux/dev/hdc3 1289 1925 5116702+ 83 Linux/dev/hdc4 1926 5005 24740100 5 Extended/dev/hdc5 1926 2052 1020096 82 Linux swap / Solaris# 装置文件名 启动区否 开始磁柱 结束磁柱 1K大小容量 磁盘分区槽内的系统Command (m for help): q 想要不储存离开吗？按下 q 就对了！不要随便按 w 啊！ 使用 p 可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。 33、mkfs 命令磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用 mkfs（make filesystem） 命令。 语法： 1mkfs [-t 文件系统格式] 装置文件名 选项与参数： -t ：可以接文件系统格式，例如 ext3, ext2, vfat 等(系统有支持才会生效) 实例 1 查看 mkfs 支持的文件格式 12[root@www ~]# mkfs[tab][tab]mkfs mkfs.cramfs mkfs.ext2 mkfs.ext3 mkfs.msdos mkfs.vfat 按下两个[tab]，会发现 mkfs 支持的文件格式如上所示。 实例 2 将分区 /dev/hdc6（可指定你自己的分区） 格式化为 ext3 文件系统： 1234567891011121314151617181920212223[root@www ~]# mkfs -t ext3 /dev/hdc6mke2fs 1.39 (29-May-2006)Filesystem label= &lt;==这里指的是分割槽的名称(label)OS type: LinuxBlock size=4096 (log=2) &lt;==block 的大小配置为 4K Fragment size=4096 (log=2)251392 inodes, 502023 blocks &lt;==由此配置决定的inode/block数量25101 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=51589939216 block groups32768 blocks per group, 32768 fragments per group15712 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912Writing inode tables: doneCreating journal (8192 blocks): done &lt;==有日志记录Writing superblocks and filesystem accounting information: doneThis filesystem will be automatically checked every 34 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.# 这样就创建起来我们所需要的 Ext3 文件系统了！简单明了！ 34、fsck 命令磁盘检验 fsck（file system check）用来检查和维护不一致的文件系统。 若系统掉电或磁盘发生问题，可利用fsck命令对文件系统进行检查。 语法： 1fsck [-t 文件系统] [-ACay] 装置名称 选项与参数： -t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数 -s : 依序一个一个地执行 fsck 的指令来检查 -A : 对/etc/fstab 中所有列出来的 分区（partition）做检查 -C : 显示完整的检查进度 -d : 打印出 e2fsck 的 debug 结果 -p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行 -R : 同时有 -A 条件时，省略 / 不检查 -V : 详细显示模式 -a : 如果检查有错则自动修复 -r : 如果检查有错则由使用者回答是否修复 -y : 选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可以执行 # fsck -y 全部检查修复。 实例 1 查看系统有多少文件系统支持的 fsck 命令： 12[root@www ~]# fsck[tab][tab]fsck fsck.cramfs fsck.ext2 fsck.ext3 fsck.msdos fsck.vfat 实例 2 强制检测 /dev/hdc6 分区: 123456789[root@www ~]# fsck -C -f -t ext3 /dev/hdc6 fsck 1.39 (29-May-2006)e2fsck 1.39 (29-May-2006)Pass 1: Checking inodes, blocks, and sizesPass 2: Checking directory structurePass 3: Checking directory connectivityPass 4: Checking reference countsPass 5: Checking group summary informationvbird_logical: 11/251968 files (9.1% non-contiguous), 36926/1004046 blocks 如果没有加上 -f 的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上 -f 强制检查，才会一项一项的显示过程。 35、mount 命令磁盘挂载与卸除 Linux 的磁盘挂载使用 mount 命令，卸载使用 umount 命令。 磁盘挂载语法： 1mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点 实例 1 用默认的方式，将刚刚创建的 /dev/hdc6 挂载到 /mnt/hdc6 上面！ 123456[root@www ~]# mkdir /mnt/hdc6[root@www ~]# mount /dev/hdc6 /mnt/hdc6[root@www ~]# dfFilesystem 1K-blocks Used Available Use% Mounted on.....中间省略...../dev/hdc6 1976312 42072 1833836 3% /mnt/hdc6 磁盘卸载命令 umount 语法： 1umount [-fn] 装置文件名或挂载点 选项与参数： -f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下； -n ：不升级 /etc/mtab 情况下卸除。 卸载/dev/hdc6 1[root@www ~]# umount /dev/hdc6","link":"/2021/08/05/linux/Linux%E9%AB%98%E9%A2%91%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"},{"title":"linux中的sh、dash、bash的区别","text":"一、常见shell类型1. Bourne shell (sh)UNIX 最初使用，且在每种 UNIX 上都可以使用。在 shell 编程方面相当优秀，但在处理与用户的交互方面做得不如其他几种shell。 2. C shell (csh)csh, the C shell, is a command interpreter with a syntax similar to the C programming language.一个语法上接近于C语言的shell。 3. Korn shell (ksh)完全向上兼容 Bourne shell 并包含了 C shell 的很多特性。 4. Bourne Again shell (bash)因为Linux 操作系统缺省的 shell。即 bash 是 Bourne shell 的扩展，与 Bourne shell 完全向后兼容。在 Bourne shell 的基础上增加、增强了很多特性。可以提供如命令补全、命令编辑和命令历史表等功能。包含了很多 C shell 和 Korn shell 中的优点，有灵活和强大的编程接口，同时又有很友好的用户界面。 5. Debian Almquist Shell(dash)原来bash是GNU/Linux 操作系统中的 /bin/sh 的符号连接，但由于bash过于复杂，有人把 bash 从 NetBSD 移植到 Linux 并更名为 dash，且/bin/sh符号连接到dash。Dash Shell 比 Bash Shell 小的多（ubuntu16.04上，bash大概1M，dash只有150K），符合POSIX标准。Ubuntu 6.10开始默认是Dash。 把sh改为指向bash的方法： 方法一：ln -s /bin/bash /bin/sh； 方法二：配置shellsudo dpkg-reconfigure dash 二、shell 相关命令查看当前系统可用的 shell cat /etc/shells 查看当前使用的 shell，随便打一个错误命令，会有提示。 查看用户登录后默认的 shell cat /etc/passwd |grep 用户名 三、规范和建议每个脚本开头都使用”#!”，#!实际上是一个2字节魔法数字，这是指定一个文件类型的特殊标记，在这种情况下，指的就是一个可执行的脚本。在#!之后，接一个路径名，这个路径名指定了一个解释脚本命令的程序，这个程序可以是shell，程序语言或者任意一个通用程序。 标记为 “#!/bin/sh” 的脚本不应使用任何 POSIX 没有规定的特性 (如 let 等命令, 但 “#!/bin/bash” 可以)。bash支持的写法比dash（ubuntu中的sh）多很多。想要支持 sh xx.sh 运行的，必须遵照 POSIX 规范去写。想要脚本写法多样化，不需要考虑效率的，可以将文件头定义为 #!/bin/bash , 而且不要使用 sh xx.sh 这种运行方式。 四、bash和dash区别语法上的主要的区别有: 1. 定义函数bash: function在bash中为关键字dash: dash中没有function这个关键字 2. select var in list; do command; donebash:支持dash:不支持, 替代方法:采用while+read+case来实现 3. echo {0..10}bash:支持{n..m}展开dash:不支持，替代方法, 采用seq外部命令 4. here stringbash:支持here stringdash:不支持, 替代方法:可采用here documents 5. &gt;&amp;word重定向标准输出和标准错误bash: 当word为非数字时，&gt;&amp;word变成重定向标准错误和标准输出到文件worddash: &gt;&amp;word, word不支持非数字, 替代方法: &gt;word 2&gt;&1; 常见用法 &gt;/dev/null 2&gt;&amp;1 6. 数组bash: 支持数组, bash4支持关联数组dash: 不支持数组，替代方法, 采用变量名+序号来实现类似的效果 7. 子字符串扩展bash: 支持parameter:offset:length,parameter:offset:length,{parameter:offset}dash: 不支持， 替代方法:采用expr或cut外部命令代替 8. 大小写转换bash: 支持parameterpattern,parameterpattern,{parameter^^pattern},parameter,pattern,parameter,pattern,{parameter,,pattern}dash: 不支持，替代方法:采用tr/sed/awk等外部命令转换 9. 进程替换&lt;(command), &gt;(command)bash: 支持进程替换dash: 不支持, 替代方法, 通过临时文件中转 10. [ string1 = string2 ] 和 [ string1 == string2 ]bash: 支持两者dash: 只支持= 11. [[ 加强版testbash: 支持[[ ]], 可实现正则匹配等强大功能dash: 不支持[[ ]], 替代方法，采用外部命令 12. for (( expr1 ; expr2 ; expr3 )) ; do list ; donebash: 支持C语言格式的for循环dash: 不支持该格式的for, 替代方法，用while+((expression))实现13.let命令和((expression))bash:有内置命令let,也支持((expression))方式dash:不支持，替代方法，采用((expression))实现13.let命令和((expression))bash:有内置命令let,也支持((expression))方式dash:不支持，替代方法，采用((expression))或者外部命令做计算 14. $((expression))bash: 支持id++,id–,++id,–id这样到表达式dash: 不支持++,–, 替代方法:id+=1,id-=1, id=id+1,id=id-1 15. 其它常用命令bash: 支持 echo -e, 支持 declaredash: 不支持。 原文：https://blog.csdn.net/weixin_39212776/article/details/81079727","link":"/2021/04/16/linux/sh%E3%80%81bash%E3%80%81dash%E5%8C%BA%E5%88%AB/"},{"title":"各种开源协议介绍","text":"世界上的开源许可证（Open Source License）大概有上百种，今天我们来介绍下几种我们常见的开源协议。大致有GPL、BSD、MIT、Mozilla、Apache和LGPL等。 Apache LicenseApache License（Apache许可证），是Apache软件基金会发布的一个自由软件许可证。 Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。但是也需要遵循以下条件： 需要给代码的用户一份Apache Licence。 如果修改了代码，需要再被修改的文件中说明。 在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。 如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以再Notice中增加自己的许可，但是不可以表现为对Apache Licence构成更改。 Apache Licence也是对商业应用友好的许可。使用者也可以再需要的时候修改代码来满足并作为开源或商业产品发布/销售。 使用这个协议的好处是: 永久权利 一旦被授权，永久拥有。 全球范围的权利 在一个国家获得授权，适用于所有国家。假如你在美国，许可是从印度授权的，也没有问题。 授权免费 无版税， 前期、后期均无任何费用。 授权无排他性 任何人都可以获得授权 授权不可撤消 一旦获得授权，没有任何人可以取消。比如，你基于该产品代码开发了衍生产品，你不用担心会在某一天被禁止使用该代码 BSDBSD是”Berkeley Software Distribution”的缩写，意思是”伯克利软件发行版”。 BSD开源协议：是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。 当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件： 1． 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。 2． 如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。 3． 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。 BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。 GPLGPL （GNU General Public License） ：GNU通用公共许可协议。 Linux 采用了 GPL。 GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。 LGPLLGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。 但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。 GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。 MITMIT是和BSD一样宽范的许可协议,源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称X11协议。作者只想保留版权,而无任何其他了限制。MIT与BSD类似，但是比BSD协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用MIT的软件项目有：jquery、Node.js。 MIT与BSD类似，但是比BSD协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用MIT的软件项目有：jquery、Node.js。 MPL (Mozilla Public License 1.1)MPL协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者 。这种授权维护了商业软件的利益，它要求基于这种软件的修改无偿贡献版权给该软件。这样，围绕该软件的所有代码的版权都集中在发起开发人的手中。但MPL是允许修改，无偿使用得。MPL软件对链接没有要求。 EPL (Eclipse Public License 1.0)EPL允许Recipients任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。 使用EPL协议，需要遵守以下规则： 当一个Contributors将源码的整体或部分再次开源发布的时候,必须继续遵循EPL开源协议来发布,而不能改用其他协议发布.除非你得到了原”源码”Owner 的授权； EPL协议下,你可以将源码不做任何修改来商业发布.但如果你要发布修改后的源码,或者当你再发布的是Object Code的时候,你必须声明它的Source Code是可以获取的,而且要告知获取方法； 当你需要将EPL下的源码作为一部分跟其他私有的源码混和着成为一个Project发布的时候,你可以将整个Project/Product以私人的协议发布,但要声明哪一部分代码是EPL下的,而且声明那部分代码继续遵循EPL； 独立的模块(Separate Module),不需要开源。 Creative Commons 知识共享协议Creative Commons (CC) 许可协议并不能说是真正的开源协议，它们大多是被使用于设计类的工程上。 CC 协议种类繁多，每一种都授权特定的权利。 一个 CC 许可协议具有四个基本部分，这几个部分可以单独起作用，也可以组合起来。下面是这几部分的简介： 1、署名 作品上必须附有作品的归属。如此之后，作品可以被修改，分发，复制和其它用途。 2、相同方式共享 作品可以被修改、分发或其它操作，但所有的衍生品都要置于CC许可协议下。 3、非商业用途 作品可以被修改、分发等等，但不能用于商业目的。但语言上对什么是”商业”的说明十分含糊不清 (没有提供精确的定义)，所以你可以在你的工程里对其进行说明。例如，有些人简单的解释”非商业”为不能出售这个作品。而另外一些人认为你甚至不能在有广告的网站上使用它们。 还有些人认为”商业”仅仅指你用它获取利益。 4、禁止衍生作品 CC 许可协议的这些条款可以自由组合使用。大多数的比较严格的CC协议会声明 “署名权，非商业用途，禁止衍生”条款，这意味着你可以自由的分享这个作品，但你不能改变它和对其收费，而且必须声明作品的归属。这个许可协议非常的有用，它可以让你的作品传播出去，但又可以对作品的使用保留部分或完全的控制。最少限制的CC协议类型当属 “署名”协议，这意味着只要人们能维护你的名誉，他们对你的作品怎么使用都行。 CC 许可协议更多的是在设计类工程中使用，而不是开发类，但没有人或妨碍你将之使用与后者。只是你必须要清楚各部分条款能覆盖到的和不能覆盖到的权利。 图解分析","link":"/2021/04/16/linux/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B/"},{"title":"MAC 终端美化","text":"简洁美观不说，各种提示大大提高了效率。 需要先安装 iTerm2 进行以下步骤前先备份~/.zshrc。 最终效果： 一、安装 oh-my-zsh官网 https://ohmyz.sh/ 运行以下命令直接安装 1sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 二、安装 spaceship 主题官网 https://github.com/denysdovhan/spaceship-prompt 执行下方脚本直接安装 12git clone https://github.com/denysdovhan/spaceship-prompt.git &quot;$ZSH_CUSTOM/themes/spaceship-prompt&quot; --depth=1ln -s &quot;$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme&quot; &quot;$ZSH_CUSTOM/themes/spaceship.zsh-theme&quot; 脚本运行之后，需要在 ~/.zshrc 中找到相应位置并设置 ZSH_THEME=&quot;spaceship&quot; 三、安装插件1234# 命令高亮git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting# 命令提示git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 之后在 ~/.zshrc 中找到相应位置并设置插件 plugins=(git safe-paste zsh-autosuggestions zsh-syntax-highlighting) 四、iTerm2 主题Preferences -&gt; Profiles -&gt; Colors 右下角导入下面链接的主题 https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/PaleNightHC.itermcolors Background 设置为 1c223a 注: git 图标显示为问号是因为字体缺失。推荐安装 Fira Code。 12brew tap homebrew/cask-fontsbrew install --cask font-fira-code 之后需要在 iTerm2 Preferences -&gt; Profiles -&gt; Text 中设置字体。 五、拓展功能代理开关，在有代理的情况下配置。 1234567891011# proxyfunction proxy() { export http_proxy=&quot;http://127.0.0.1:1087&quot; export https_proxy=$http_proxy echo -e &quot;已开启代理&quot;}function proxyOff(){ unset http_proxy unset https_proxy echo -e &quot;已关闭代理&quot;}","link":"/2021/04/16/mac/Mac%20%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96/"},{"title":"操作系统知识总结","text":"一、操作系统概念操作系统（Operating System，简称 OS）本质上是一个运行在计算机上的软件程序 ，用于管理计算机硬件和软件资源。 操作系统的存在屏蔽了硬件层的复杂性。 操作系统就像是硬件使用的负责人，统筹着各种相关事项。 内核操作系统的内核（Kernel）是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。 内核是连接应用程序和硬件的桥梁，决定着系统的性能和稳定性。 内核类型1. 宏内核宏内核是将操作系统功能作为一个紧密结合的整体放到内核。 由于各模块共享信息，因此有很高的性能。 Linux、BSDs(FreeBSD、OpenBSD、NetBSD)、WIndows 都属于宏内核系统。 Mac OS X （也被称为 Darwin）混合结构，BSD + Mech，Mech 微内核提供 RPC、IPC 2. 微内核由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。 在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。 因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。 典型实例：Mech 3. 模块化概念内核有一组核心组件，在启动或运行时动态加载附加服务。Solaris、Linux、Mac OS X 系统中都存在着模块化的思想。 其与微内核的区别在于，模块化的功能是处于内核态的。 系统中断系统中断一般是指硬件中断和软件中断的综合。 中断是CPU对系统发生的某个事件做出的一种反应，CPU暂停正在执行的程序，保留现场后自动地转去执行相应的处理程序，处理完该事件后再返回断点继续执行被“打断”的程序。 中断分类 外中断：I/O中断、时钟中断、控制台中断等。 异常：来自CPU的内部事件或程序执行中的事件引起的过程 CPU本身故障 程序故障（非法操作码、地址越界、浮点溢出等）等 陷入（trap，也译为陷阱）：程序中使用了请求系统服务的系统调用 外中断和异常是被动的，而陷入是主动的。 系统调用（System Call）如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。 Linux 的系统调用主要有以下这些： Task Commands 进程控制 fork(); exit(); wait(); 进程通信 pipe(); shmget(); mmap(); 文件操作 open(); read(); write(); 设备操作 ioctl(); read(); write(); 信息维护 getpid(); alarm(); sleep(); 安全 chmod(); umask(); chown(); 并发和并行并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。 并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。 操作系统通过引入进程和线程，使得程序能够并发运行。 并发是两个队列交替使用一台咖啡机，并行是两个队列同时使用两台咖啡机。 并发：concurrent；顺序：sequential；并行：parallel；串行：serial； 虚拟化虚拟技术把一个物理实体转换为多个逻辑实体。 主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。 多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。 虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。 二、进程管理进程与线程1. 进程进程是资源分配的基本单位。 进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。 下图显示了 4 个程序创建了 4 个进程，这 4 个进程可以并发地执行。 2. 线程线程是独立调度的基本单位。 一个进程中可以有多个线程，它们共享进程资源。 QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。 3. 区别 拥有资源 进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。 调度 线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。 系统开销 由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。 通信方面 线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC（Inter-Process Communication，进程间通信）。 进程状态 创建状态(new) ：进程正在被创建，尚未到就绪状态。 就绪状态(ready) ：进程已处于准备运行状态，即进程获得了除了处理器之外的一切所需资源，一旦得到处理器资源(处理器分配的时间片)即可运行。 运行状态(running) ：进程正在处理器上上运行(单核 CPU 下任意时刻只有一个进程处于运行状态)。 阻塞状态(waiting) ：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待 IO 操作完成。即使处理器空闲，该进程也不能运行。 结束状态(terminated) ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运行。 进程调度算法不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。 1. 批处理系统批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。 1.1 先来先服务 first-come first-serverd（FCFS）非抢占式的调度算法，按照请求的顺序进行调度。 有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。 1.2 短作业优先 shortest job first（SJF）非抢占式的调度算法，按估计运行时间最短的顺序进行调度。 长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。 1.3 最短剩余时间优先 shortest remaining time next（SRTN）最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。 当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程。否则新的进程等待。 2. 交互式系统交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。 2.1 时间片轮转 round-robin （RR）将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。 时间片轮转算法的效率和时间片的大小有很大关系： 因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。 而如果时间片过长，那么实时性就不能得到保证。 2.2 优先级调度 priority scheduling为每个进程分配一个优先级，按优先级进行调度。 为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。 2.3 多级反馈队列 一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。 多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。 每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。 可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。 3. 实时系统实时系统要求一个请求在一个确定时间内得到响应。 分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。 进程同步1. 临界区对临界资源进行访问的那段代码称为临界区。 为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。 123// entry section// critical section;// exit section 2. 同步与互斥 同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。 互斥：多个进程在同一时刻只有一个进程能进入临界区。 3. 信号量信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作。 down : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0； up ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作。 down 和 up 操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。 如果信号量的取值只能为 0 或者 1，那么就成为了 互斥量（Mutex） ，0 表示临界区已经加锁，1 表示临界区解锁。 12345678910111213typedef int semaphore;semaphore mutex = 1;void P1() { down(&amp;mutex); // 临界区 up(&amp;mutex);}void P2() { down(&amp;mutex); // 临界区 up(&amp;mutex);} 使用信号量实现生产者-消费者问题问题描述：使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。 因为缓冲区属于临界资源，因此需要使用一个互斥量 mutex 来控制对缓冲区的互斥访问。 为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计，这里需要使用两个信号量：empty 记录空缓冲区的数量，full 记录满缓冲区的数量。其中，empty 信号量是在生产者进程中使用，当 empty 不为 0 时，生产者才可以放入物品；full 信号量是在消费者进程中使用，当 full 信号量不为 0 时，消费者才可以取走物品。 注意，不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行 down(mutex) 再执行 down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行 down(empty) 操作，发现 empty = 0，此时生产者睡眠。消费者不能进入临界区，因为生产者对缓冲区加锁了，消费者就无法执行 up(empty) 操作，empty 永远都为 0，导致生产者永远等待下去，不会释放锁，消费者因此也会永远等待下去。 123456789101112131415161718192021222324252627#define N 100typedef int semaphore;semaphore mutex = 1;semaphore empty = N;semaphore full = 0;void producer() { while(TRUE) { int item = produce_item(); down(&amp;empty); down(&amp;mutex); insert_item(item); up(&amp;mutex); up(&amp;full); }}void consumer() { while(TRUE) { down(&amp;full); down(&amp;mutex); int item = remove_item(); consume_item(item); up(&amp;mutex); up(&amp;empty); }} 4. 管程使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。 c 语言不支持管程，下面的示例代码使用了类 Pascal 语言来描述管程。示例代码的管程提供了 insert() 和 remove() 方法，客户端代码通过调用这两个方法来解决生产者-消费者问题。 1234567891011121314monitor ProducerConsumer integer i; condition c; procedure insert(); begin // ... end; procedure remove(); begin // ... end;end monitor; 管程有一个重要特性：在一个时刻只能有一个进程使用管程。进程在无法继续执行的时候不能一直占用管程，否则其它进程永远不能使用管程。 管程引入了 条件变量 以及相关的操作：wait() 和 signal() 来实现同步操作。对条件变量执行 wait() 操作会导致调用进程阻塞，把管程让出来给另一个进程持有。signal() 操作用于唤醒被阻塞的进程。 使用管程实现生产者-消费者问题 123456789101112131415161718192021222324252627282930313233343536373839404142// 管程monitor ProducerConsumer condition full, empty; integer count := 0; condition c; procedure insert(item: integer); begin if count = N then wait(full); insert_item(item); count := count + 1; if count = 1 then signal(empty); end; function remove: integer; begin if count = 0 then wait(empty); remove = remove_item; count := count - 1; if count = N -1 then signal(full); end;end monitor;// 生产者客户端procedure producerbegin while true do begin item = produce_item; ProducerConsumer.insert(item); endend;// 消费者客户端procedure consumerbegin while true do begin item = ProducerConsumer.remove; consume_item(item); endend; 5. 经典同步问题5.1 哲学家进餐问题 五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。 下面是一种错误的解法，如果所有哲学家同时拿起左手边的筷子，那么所有哲学家都在等待其它哲学家吃完并释放自己手中的筷子，导致死锁。 123456789101112#define N 5void philosopher(int i) { while(TRUE) { think(); take(i); // 拿起左边的筷子 take((i+1)%N); // 拿起右边的筷子 eat(); put(i); put((i+1)%N); }} 为了防止死锁的发生，可以设置两个条件： 必须同时拿起左右两根筷子； 只有在两个邻居都没有进餐的情况下才允许进餐。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#define N 5#define LEFT (i + N - 1) % N // 左邻居#define RIGHT (i + 1) % N // 右邻居#define THINKING 0#define HUNGRY 1#define EATING 2typedef int semaphore;int state[N]; // 跟踪每个哲学家的状态semaphore mutex = 1; // 临界区的互斥，临界区是 state 数组，对其修改需要互斥semaphore s[N]; // 每个哲学家一个信号量void philosopher(int i) { while(TRUE) { think(i); take_two(i); eat(i); put_two(i); }}void take_two(int i) { down(&amp;mutex); state[i] = HUNGRY; check(i); up(&amp;mutex); down(&amp;s[i]); // 只有收到通知之后才可以开始吃，否则会一直等下去}void put_two(i) { down(&amp;mutex); state[i] = THINKING; check(LEFT); // 尝试通知左右邻居，自己吃完了，你们可以开始吃了 check(RIGHT); up(&amp;mutex);}void eat(int i) { down(&amp;mutex); state[i] = EATING; up(&amp;mutex);}// 检查两个邻居是否都没有用餐，如果是的话，就 up(&amp;s[i])，使得 down(&amp;s[i]) 能够得到通知并继续执行void check(i) { if(state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] !=EATING) { state[i] = EATING; up(&amp;s[i]); }} 5.2 读者-写者问题允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写操作同时发生。 一个整型变量 count 记录在对数据进行读操作的进程数量，一个互斥量 count_mutex 用于对 count 加锁，一个互斥量 data_mutex 用于对读写的数据加锁。 1234567891011121314151617181920212223242526typedef int semaphore;semaphore count_mutex = 1;semaphore data_mutex = 1;int count = 0;void reader() { while(TRUE) { down(&amp;count_mutex); count++; if(count == 1) down(&amp;data_mutex); // 第一个读者需要对数据进行加锁，防止写进程访问 up(&amp;count_mutex); read(); down(&amp;count_mutex); count--; if(count == 0) up(&amp;data_mutex); up(&amp;count_mutex); }}void writer() { while(TRUE) { down(&amp;data_mutex); write(); up(&amp;data_mutex); }} 以下内容由 @Bandi Yugandhar 提供。 The first case may result Writer to starve. This case favous Writers i.e no writer, once added to the queue, shall be kept waiting longer than absolutely necessary(only when there are readers that entered the queue before the writer). 12345678910111213141516171819202122232425262728293031323334353637383940414243444546int readcount, writecount; //(initial value = 0)semaphore rmutex, wmutex, readLock, resource; //(initial value = 1)//READERvoid reader() {&lt;ENTRY Section&gt; down(&amp;readLock); // reader is trying to enter down(&amp;rmutex); // lock to increase readcount readcount++; if (readcount == 1) down(&amp;resource); //if you are the first reader then lock the resource up(&amp;rmutex); //release for other readers up(&amp;readLock); //Done with trying to access the resource&lt;CRITICAL Section&gt;//reading is performed&lt;EXIT Section&gt; down(&amp;rmutex); //reserve exit section - avoids race condition with readers readcount--; //indicate you're leaving if (readcount == 0) //checks if you are last reader leaving up(&amp;resource); //if last, you must release the locked resource up(&amp;rmutex); //release exit section for other readers}//WRITERvoid writer() { &lt;ENTRY Section&gt; down(&amp;wmutex); //reserve entry section for writers - avoids race conditions writecount++; //report yourself as a writer entering if (writecount == 1) //checks if you're first writer down(&amp;readLock); //if you're first, then you must lock the readers out. Prevent them from trying to enter CS up(&amp;wmutex); //release entry section&lt;CRITICAL Section&gt; down(&amp;resource); //reserve the resource for yourself - prevents other writers from simultaneously editing the shared resource //writing is performed up(&amp;resource); //release file&lt;EXIT Section&gt; down(&amp;wmutex); //reserve exit section writecount--; //indicate you're leaving if (writecount == 0) //checks if you're the last writer up(&amp;readLock); //if you're last writer, you must unlock the readers. Allows them to try enter CS for reading up(&amp;wmutex); //release exit section} We can observe that every reader is forced to acquire ReadLock. On the otherhand, writers doesn’t need to lock individually. Once the first writer locks the ReadLock, it will be released only when there is no writer left in the queue. From the both cases we observed that either reader or writer has to starve. Below solution adds the constraint that no thread shall be allowed to starve; that is, the operation of obtaining a lock on the shared data will always terminate in a bounded amount of time. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849int readCount; // init to 0; number of readers currently accessing resource// all semaphores initialised to 1Semaphore resourceAccess; // controls access (read/write) to the resourceSemaphore readCountAccess; // for syncing changes to shared variable readCountSemaphore serviceQueue; // FAIRNESS: preserves ordering of requests (signaling must be FIFO)void writer(){ down(&amp;serviceQueue); // wait in line to be servicexs // &lt;ENTER&gt; down(&amp;resourceAccess); // request exclusive access to resource // &lt;/ENTER&gt; up(&amp;serviceQueue); // let next in line be serviced // &lt;WRITE&gt; writeResource(); // writing is performed // &lt;/WRITE&gt; // &lt;EXIT&gt; up(&amp;resourceAccess); // release resource access for next reader/writer // &lt;/EXIT&gt;}void reader(){ down(&amp;serviceQueue); // wait in line to be serviced down(&amp;readCountAccess); // request exclusive access to readCount // &lt;ENTER&gt; if (readCount == 0) // if there are no readers already reading: down(&amp;resourceAccess); // request resource access for readers (writers blocked) readCount++; // update count of active readers // &lt;/ENTER&gt; up(&amp;serviceQueue); // let next in line be serviced up(&amp;readCountAccess); // release access to readCount // &lt;READ&gt; readResource(); // reading is performed // &lt;/READ&gt; down(&amp;readCountAccess); // request exclusive access to readCount // &lt;EXIT&gt; readCount--; // update count of active readers if (readCount == 0) // if there are no readers left: up(&amp;resourceAccess); // release resource access for all // &lt;/EXIT&gt; up(&amp;readCountAccess); // release access to readCount} 线程同步线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。操作系统一般有下面三种线程同步的方式： 互斥量(Mutex) ：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。 信号量(Semaphares) ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量。 事件(Event) : Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作。 进程通信进程同步与进程通信很容易混淆，它们的区别在于： 进程同步：控制多个进程按一定顺序执行； 进程通信：进程间传输信息。 进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。 1. 管道/匿名管道（Pipes）管道是通过调用 pipe 函数创建的，fd[0] 用于读，fd[1] 用于写。 12#include &lt;unistd.h&gt;int pipe(int fd[2]); 它具有以下限制： 只支持半双工通信（单向交替传输）； 只能在父子进程或者兄弟进程中使用。 2. 有名管道 FIFO也称为命名管道，去除了管道只能在父子进程中使用的限制。 123#include &lt;sys/stat.h&gt;int mkfifo(const char *path, mode_t mode);int mkfifoat(int fd, const char *path, mode_t mode); FIFO 常用于客户-服务器应用程序中，FIFO 用作汇聚点，在客户进程和服务器进程之间传递数据。 3. 信号（Signal）信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生； 4. 消息队列 （Message Queue）相比于 FIFO，消息队列具有以下优点： 消息队列可以独立于读写进程存在，从而避免了 FIFO 中同步管道的打开和关闭时可能产生的困难； 避免了 FIFO 的同步阻塞问题，不需要进程自己提供同步方法； 读进程可以根据消息类型有选择地接收消息，而不像 FIFO 那样只能默认地接收。 5. 信号量（Semaphores）它是一个计数器，用于为多个进程提供对共享数据对象的访问。 6. 共享存储（Shared Memory）允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种 IPC。 需要使用信号量用来同步对共享存储的访问。 多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。另外 XSI 共享内存不是使用文件，而是使用内存的匿名段。 7. 套接字（Socket）与其它通信机制不同的是，它可用于不同机器间的进程通信。 三、内存管理主要功能 内存的分配与回收（malloc 函数：申请内存，free 函数：释放内存） 地址转换：将逻辑地址转换成相应的物理地址 常见的内存管理机制简单分为连续分配管理方式和非连续分配管理方式这两种。连续分配管理方式是指为一个用户程序分配一个连续的内存空间，常见的如 块式管理 。同样地，非连续分配管理方式允许一个程序使用的内存分布在离散或者说不相邻的内存中，常见的如页式管理 和 段式管理。 块式管理 ： 远古时代的计算机操系统的内存管理方式。将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。 页式管理 ：把主存分为大小相等且固定的一页一页的形式，页较小，相对相比于块式管理的划分力度更大，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。 段式管理 ： 页式管理虽然提高了内存利用率，但是页式管理其中的页实际并无任何实际意义。 段式管理把主存分为一段段的，每一段的空间又要比一页的空间小很多 。但是，最重要的是段是有实际意义的，每个段定义了一组逻辑信息，例如,有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。 段页式管理机制 ：段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说 段页式管理机制 中段与段之间以及段的内部的都是离散的。 分页系统地址映射内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间，也称为帧）的映射表。 一个虚拟地址分成两个部分，一部分存储页面号，一部分存储偏移量。 下图的页表存放着 16 个页，这 16 个页需要用 4 个比特位来进行索引定位。例如对于虚拟地址（0010 000000000100），前 4 位是存储页面号 2，读取表项内容为（110 1），页表项最后一位表示是否存在于内存中，1 表示存在。后 12 位存储偏移量。这个页对应的页框的地址为 （110 000000000100）。 快表和多级页表 页表管理机制中有两个很重要的概念：快表和多级页表，这两个东西分别解决了页表管理中很重要的两个问题。 在分页内存管理中，很重要的两点是： 虚拟地址到物理地址的转换要快。 解决虚拟地址空间大，页表也会很大的问题。 快表为了解决虚拟地址到物理地址的转换速度，操作系统在 页表方案 基础之上引入了 快表 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。 这种缓冲称为转换表缓冲区(translation look-aside buffer,TLB)。 使用快表之后的地址转换流程是这样的： 根据虚拟地址中的页号查快表； 如果该页在快表中，直接从快表中读取相应的物理地址； 如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中； 当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。 看完了之后你会发现快表和我们平时经常在我们开发的系统使用的缓存（比如 Redis）很像，的确是这样的，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。 多级页表引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。多级页表属于时间换空间的典型场景，具体可以查看下面这篇文章 多级页表如何节约内存.html 总结为了提高内存的空间性能，提出了多级页表的概念；但是提到空间性能是以浪费时间性能为基础的，因此为了补充损失的时间性能，提出了快表（即 TLB）的概念。 不论是快表还是多级页表实际上都利用到了程序的局部性原理。 逻辑(虚拟)地址和物理地址我们编程一般只有可能和逻辑地址打交道，比如在 C 语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。物理地址指的是真实物理内存中地址，更具体一点来说就是内存地址寄存器中的地址。物理地址是内存单元真正的地址。 CPU 寻址了解吗?为什么需要虚拟地址空间? 这部分内容参考了 Microsoft 官网的介绍，地址：https://docs.microsoft.com/zh-cn/windows-hardware/drivers/gettingstarted/virtual-address-spaces?redirectedfrom=MSDN 现代处理器使用的是一种称为 虚拟寻址(Virtual Addressing) 的寻址方式。使用虚拟寻址，CPU 需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存。 实际上完成虚拟地址转换为物理地址转换的硬件是 CPU 中含有一个被称为 内存管理单元（Memory Management Unit, MMU） 的硬件。如下图所示： 为什么要有虚拟地址空间呢？ 先从没有虚拟地址空间的时候说起吧！没有虚拟地址空间的时候，程序都是直接访问和操作的都是物理内存 。但是这样有什么问题呢？ 用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易（有意或者无意）破坏操作系统，造成操作系统崩溃。 想要同时运行多个程序特别困难，比如你想同时运行一个微信和一个 QQ 音乐都不行。为什么呢？举个简单的例子：微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就造成了微信这个程序就会崩溃。 总结来说：如果直接把物理地址暴露出来的话会带来严重问题，比如可能对操作系统造成伤害以及给同时运行多个程序造成困难。 通过虚拟地址访问内存有以下优势： 程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区。 程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，内存管理器会将物理内存页（通常大小为 4 KB）保存到磁盘文件。数据或代码页会根据需要在物理内存与磁盘之间移动。 不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。 虚拟内存拓展内存大小虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。 为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。 从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。例如有一台计算机可以产生 16 位地址，那么一个程序的地址空间范围是 0~64K。该计算机只有 32KB 的物理内存，虚拟内存技术允许该计算机运行一个 64K 大小的程序。 定义连续的内存地址空间虚拟内存的重要意义是它定义了一个连续的虚拟地址空间。 虚拟内存 使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如 RAM）的使用也更有效率。目前，大多数操作系统都使用了虚拟内存，如 Windows 家族的“虚拟内存”；Linux 的“交换空间”等。 局部性原理 时间局部性 ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。 空间局部性 ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。 页面置换算法地址映射过程中，若在页面中发现所要访问的页面不在内存中，则发生缺页中断 。 缺页中断 就是要访问的页不在主存，需要操作系统将其调入主存后再进行访问。 在这个时候，被内存映射的文件实际上成了一个分页交换文件。 当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。用来选择淘汰哪一页的规则叫做页面置换算法，我们可以把页面置换算法看成是淘汰页面的规则。 页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。 1. 最佳 （OPT, Optimal Replacement Algorithm）所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。 是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。一般作为衡量其他置换算法的方法。 举例：一个系统为某进程分配了三个物理块，并有如下页面引用序列： 17，0，1，2，0，3，0，4，2，3，0，3，2，1，2，0，1，7，0，1 开始运行时，先将 7, 0, 1 三个页面装入内存。当进程要访问页面 2 时，产生缺页中断，会将页面 7 换出，因为页面 7 再次被访问的时间最长。 2. 最近最久未使用（LRU, Least Recently Used）虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。 为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。 因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。 14，7，0，7，1，0，1，2，1，2，6 3. 最近未使用（NRU, Not Recently Used）每个页面都有两个状态位：R 与 M，当页面被访问时设置页面的 R=1，当页面被修改时设置 M=1。其中 R 位会定时被清零。可以将页面分成以下四类： R=0，M=0 R=0，M=1 R=1，M=0 R=1，M=1 当发生缺页中断时，NRU 算法随机地从类编号最小的非空类中挑选一个页面将它换出。 NRU 优先换出已经被修改的脏页面（R=0，M=1），而不是被频繁使用的干净页面（R=1，M=0）。 4. 先进先出（FIFO, First In First Out）选择换出的页面是最先进入的页面。 该算法会将那些经常被访问的页面换出，导致缺页率升高。 5. 第二次机会算法FIFO 算法可能会把经常使用的页面置换出去，为了避免这一问题，对该算法做一个简单的修改： 当页面被访问 (读或写) 时设置该页面的 R 位为 1。需要替换的时候，检查最老页面的 R 位。如果 R 位是 0，那么这个页面既老又没有被使用，可以立刻置换掉；如果是 1，就将 R 位清 0，并把该页面放到链表的尾端，修改它的装入时间使它就像刚装入的一样，然后继续从链表的头部开始搜索。 6. 时钟（Clock）第二次机会算法需要在链表中移动页面，降低了效率。时钟算法使用环形链表将页面连接起来，再使用一个指针指向最老的页面。 四、死锁必要条件 互斥：每个资源要么已经分配给了一个进程，要么就是可用的。 占有和等待：已经得到了某个资源的进程可以再请求新的资源。 不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。 环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。 处理方法主要有以下四种方法： 鸵鸟策略 死锁检测与死锁恢复 死锁预防 死锁避免 鸵鸟策略把头埋在沙子里，假装根本没发生问题。 因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。 当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。 大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。 死锁检测与死锁恢复不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。 1. 每种类型一个资源的死锁检测 上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。 图 a 可以抽取出环，如图 b，它满足了环路等待条件，因此会发生死锁。 每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。 2. 每种类型多个资源的死锁检测 上图中，有三个进程四个资源，每个数据代表的含义如下： E 向量：资源总量 A 向量：资源剩余量 C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量 R 矩阵：每个进程请求的资源数量 进程 P1 和 P2 所请求的资源都得不到满足，只有进程 P3 可以，让 P3 执行，之后释放 P3 拥有的资源，此时 A = (2 2 2 0)。P2 可以执行，执行后释放 P2 拥有的资源，A = (4 2 2 1) 。P1 也可以执行。所有进程都可以顺利执行，没有死锁。 算法总结如下： 每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。 寻找一个没有标记的进程 Pi，它所请求的资源小于等于 A。 如果找到了这样一个进程，那么将 C 矩阵的第 i 行向量加到 A 中，标记该进程，并转回 1。 如果没有这样一个进程，算法终止。 3. 死锁恢复 利用抢占恢复 利用回滚恢复 通过杀死进程恢复 死锁预防在程序运行之前预防发生死锁。 1. 破坏互斥条件例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。 2. 破坏占有和等待条件一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。 3. 破坏不可抢占条件4. 破坏环路等待给资源统一编号，进程只能按编号顺序来请求资源。 死锁避免在程序运行时避免发生死锁。 1. 安全状态 图 a 的第二列 Has 表示已拥有的资源数，第三列 Max 表示总共需要的资源数，Free 表示还有可以使用的资源数。从图 a 开始出发，先让 B 拥有所需的所有资源（图 b），运行结束后释放 B，此时 Free 变为 5（图 c）；接着以同样的方式运行 C 和 A，使得所有进程都能成功运行，因此可以称图 a 所示的状态是安全的。 定义：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。 安全状态的检测与死锁的检测类似，因为安全状态必须要求不能发生死锁。下面的银行家算法与死锁检测算法非常类似，可以结合着做参考对比。 2. 单个资源的银行家算法一个小城镇的银行家，他向一群客户分别承诺了一定的贷款额度，算法要做的是判断对请求的满足是否会进入不安全状态，如果是，就拒绝请求；否则予以分配。 上图 c 为不安全状态，因此算法会拒绝之前的请求，从而避免进入图 c 中的状态。 3. 多个资源的银行家算法 上图中有五个进程，四个资源。左边的图表示已经分配的资源，右边的图表示还需要分配的资源。最右边的 E、P 以及 A 分别表示：总资源、已分配资源以及可用资源，注意这三个为向量，而不是具体数值，例如 A=(1020)，表示 4 个资源分别还剩下 1/0/2/0。 检查一个状态是否安全的算法如下： 查找右边的矩阵是否存在一行小于等于向量 A。如果不存在这样的行，那么系统将会发生死锁，状态是不安全的。 假若找到这样一行，将该进程标记为终止，并将其已分配资源加到 A 中。 重复以上两步，直到所有进程都标记为终止，则状态时安全的。 如果一个状态不是安全的，需要拒绝进入这个状态。 原文链接 CS-Notes JavaGuide 思维导图","link":"/2021/08/01/os/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"},{"title":"使用 docker 搭建 hadoop 集群","text":"用自己的笔记本电脑，搭建一个 hadoop 集群。 123456789101112131415161718192021222324252627# 下载 ubuntu 镜像docker pull openjdk:8# 启动容器# -h: 指定容器的hostname，给容器指定的hostname是相当合理的一个操作，否则ssh的时候你就要每次去找一长串hostname了。# -u： 指定运行的user，但是初始的时候应该只有root，现在可以忽略。# -w： 指定user的work path ，同上，现在可忽略。# --name： 指定容器的名字，这里也挺便捷的，否则我们就只能使用容器id来运行了。docker run -itd --name haoop_base openjdk:8docker exec -it hadoop_base bashapt updateapt upgradeapt install -y vim sudo net-tools inetutils-ping dnsutils maven scala openssh-server openssh-client rsync# 安装 hadoop，外部拷贝。下载略。docker cp hadoop-3.1.3.tar.gz hadoop_base:/usr/local/# 解压cd /usr/localtar -zxvf hadoop-3.1.3.tar.gzmv hadoop-3.1.3 hadooprm hadoop-3.1.3.tar.gz# 生成 ssh 秘钥cd ~ssh-keygen -t rsa -P &quot;&quot;cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys 更改配置文件/root/.bashrc将以下内容添加到最底部 123456789101112131415161718#hadoopexport HADOOP_HOME=/usr/local/hadoopexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbinexport HADOOP_COMMON_HOME=$HADOOP_HOME export HADOOP_HDFS_HOME=$HADOOP_HOME export HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_YARN_HOME=$HADOOP_HOME export HADOOP_INSTALL=$HADOOP_HOME export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native export HADOOP_LIBEXEC_DIR=$HADOOP_HOME/libexec export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATHexport HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoopexport HDFS_DATANODE_USER=rootexport HDFS_DATANODE_SECURE_USER=rootexport HDFS_SECONDARYNAMENODE_USER=rootexport HDFS_NAMENODE_USER=rootexport YARN_RESOURCEMANAGER_USER=rootexport YARN_NODEMANAGER_USER=root /usr/local/hadoop/etc/hadoop/core-site.xml12345678910&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://master:9000&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;hadoop.tmp.dir&lt;/name&gt; &lt;value&gt;/root/hadoop/tmp&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; /usr/local/hadoop/etc/hadoop/hadoop-env.sh将以下内容添加到最底部 1234567export HADOOP_SHELL_EXECNAME=rootexport HDFS_DATANODE_USER=rootexport HDFS_SECONDARYNAMENODE_USER=rootexport HDFS_DATANODE_SECURE_USER=rootexport YARN_RESOURCEMANAGER_USER=rootexport YARN_NODEMANAGER_USER=rootexport JAVA_HOME=/usr/local/openjdk-8 /usr/local/hadoop/etc/hadoop/hdfs-site.xml1234567891011121314&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;2&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt; &lt;value&gt;/root/hadoop/hdfs/name&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;dfs.namenode.data.dir&lt;/name&gt; &lt;value&gt;/root/hadoop/hdfs/data&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; /usr/local/hadoop/etc/hadoop/mapred-site.xml1234567891011121314151617181920&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;mapreduce.application.classpath&lt;/name&gt; &lt;value&gt; /usr/local/hadoop/etc/hadoop, /usr/local/hadoop/share/hadoop/common/*, /usr/local/hadoop/share/hadoop/common/lib/*, /usr/local/hadoop/share/hadoop/hdfs/*, /usr/local/hadoop/share/hadoop/hdfs/lib/*, /usr/local/hadoop/share/hadoop/mapreduce/*, /usr/local/hadoop/share/hadoop/mapreduce/lib/*, /usr/local/hadoop/share/hadoop/yarn/*, /usr/local/hadoop/share/hadoop/yarn/lib/* &lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; /usr/local/hadoop/etc/hadoop/workers12slave1slave2 /usr/local/hadoop/etc/hadoop/yarn-site.xml12345678910111213&lt;configuration&gt;&lt;!-- Site specific YARN configuration properties --&gt; &lt;property&gt; &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt; &lt;value&gt;master&lt;/value&gt; &lt;/property&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; /root/entrypoint.sh新建 123#!/bin/bashservice ssh start/bin/bash 1234567891011121314151617181920chmod +x /root/entrypoint.sh# 格式化 namenode/usr/local/hadoop/bin/hdfs namenode -format# 提交镜像exitdocker commit hadoop_base hadoop_ubuntu# 创建网络docker network create --driver=bridge hadoopdocker network ls# 启动镜像docker run -itd --network hadoop -h &quot;master&quot; --name &quot;master&quot; -p 9870:9870 -p 8088:8088 hadoop_ubuntu /root/entrypoint.shdocker run -itd --network hadoop -h &quot;slave1&quot; --name &quot;slave1&quot; hadoop_ubuntu /root/entrypoint.shdocker run -itd --network hadoop -h &quot;slave2&quot; --name &quot;slave2&quot; hadoop_ubuntu /root/entrypoint.sh# 从 master 节点启动 hadoop 集群/usr/local/hadoop/sbin/start-all.sh 参考 https://www.cnblogs.com/huangqingshi/p/12531717.html 使用 Dockerfile 构建镜像 https://github.com/wangdj2020/hadoop-docker","link":"/2022/01/10/hadoop/docker-haoop/"}],"tags":[{"name":"reading","slug":"reading","link":"/tags/reading/"},{"name":"2021","slug":"2021","link":"/tags/2021/"},{"name":"time","slug":"time","link":"/tags/time/"},{"name":"economy","slug":"economy","link":"/tags/economy/"},{"name":"life","slug":"life","link":"/tags/life/"},{"name":"2020","slug":"2020","link":"/tags/2020/"},{"name":"memory","slug":"memory","link":"/tags/memory/"},{"name":"future","slug":"future","link":"/tags/future/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"license","slug":"license","link":"/tags/license/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"terminal","slug":"terminal","link":"/tags/terminal/"},{"name":"summary","slug":"summary","link":"/tags/summary/"},{"name":"os","slug":"os","link":"/tags/os/"},{"name":"2022","slug":"2022","link":"/tags/2022/"},{"name":"hadoop","slug":"hadoop","link":"/tags/hadoop/"},{"name":"docker","slug":"docker","link":"/tags/docker/"}],"categories":[{"name":"reading","slug":"reading","link":"/categories/reading/"},{"name":"经济","slug":"reading/经济","link":"/categories/reading/%E7%BB%8F%E6%B5%8E/"},{"name":"思维模式","slug":"reading/思维模式","link":"/categories/reading/%E6%80%9D%E7%BB%B4%E6%A8%A1%E5%BC%8F/"},{"name":"读书技巧","slug":"reading/读书技巧","link":"/categories/reading/%E8%AF%BB%E4%B9%A6%E6%8A%80%E5%B7%A7/"},{"name":"理财","slug":"reading/理财","link":"/categories/reading/%E7%90%86%E8%B4%A2/"},{"name":"learning","slug":"learning","link":"/categories/learning/"},{"name":"linux","slug":"learning/linux","link":"/categories/learning/linux/"},{"name":"mac","slug":"learning/mac","link":"/categories/learning/mac/"},{"name":"os","slug":"learning/os","link":"/categories/learning/os/"},{"name":"hadoop","slug":"learning/hadoop","link":"/categories/learning/hadoop/"}]}